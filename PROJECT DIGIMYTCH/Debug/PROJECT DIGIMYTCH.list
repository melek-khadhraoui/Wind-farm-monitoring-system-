
PROJECT DIGIMYTCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062a4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006444  08006444  00007444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006504  08006504  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006504  08006504  00007504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800650c  0800650c  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800650c  0800650c  0000750c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006510  08006510  00007510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006514  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  2000005c  08006570  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08006570  00008348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ea0  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d4  00000000  00000000  00019f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  0001c300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d25  00000000  00000000  0001d390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018293  00000000  00000000  0001e0b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001440b  00000000  00000000  00036348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d062  00000000  00000000  0004a753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e77b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d68  00000000  00000000  000e77f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000ec560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800642c 	.word	0x0800642c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800642c 	.word	0x0800642c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_ldivmod>:
 8000608:	b97b      	cbnz	r3, 800062a <__aeabi_ldivmod+0x22>
 800060a:	b972      	cbnz	r2, 800062a <__aeabi_ldivmod+0x22>
 800060c:	2900      	cmp	r1, #0
 800060e:	bfbe      	ittt	lt
 8000610:	2000      	movlt	r0, #0
 8000612:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000616:	e006      	blt.n	8000626 <__aeabi_ldivmod+0x1e>
 8000618:	bf08      	it	eq
 800061a:	2800      	cmpeq	r0, #0
 800061c:	bf1c      	itt	ne
 800061e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000622:	f04f 30ff 	movne.w	r0, #4294967295
 8000626:	f000 b9b5 	b.w	8000994 <__aeabi_idiv0>
 800062a:	f1ad 0c08 	sub.w	ip, sp, #8
 800062e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000632:	2900      	cmp	r1, #0
 8000634:	db09      	blt.n	800064a <__aeabi_ldivmod+0x42>
 8000636:	2b00      	cmp	r3, #0
 8000638:	db1a      	blt.n	8000670 <__aeabi_ldivmod+0x68>
 800063a:	f000 f84d 	bl	80006d8 <__udivmoddi4>
 800063e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000642:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000646:	b004      	add	sp, #16
 8000648:	4770      	bx	lr
 800064a:	4240      	negs	r0, r0
 800064c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000650:	2b00      	cmp	r3, #0
 8000652:	db1b      	blt.n	800068c <__aeabi_ldivmod+0x84>
 8000654:	f000 f840 	bl	80006d8 <__udivmoddi4>
 8000658:	f8dd e004 	ldr.w	lr, [sp, #4]
 800065c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000660:	b004      	add	sp, #16
 8000662:	4240      	negs	r0, r0
 8000664:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000668:	4252      	negs	r2, r2
 800066a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800066e:	4770      	bx	lr
 8000670:	4252      	negs	r2, r2
 8000672:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000676:	f000 f82f 	bl	80006d8 <__udivmoddi4>
 800067a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800067e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000682:	b004      	add	sp, #16
 8000684:	4240      	negs	r0, r0
 8000686:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800068a:	4770      	bx	lr
 800068c:	4252      	negs	r2, r2
 800068e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000692:	f000 f821 	bl	80006d8 <__udivmoddi4>
 8000696:	f8dd e004 	ldr.w	lr, [sp, #4]
 800069a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800069e:	b004      	add	sp, #16
 80006a0:	4252      	negs	r2, r2
 80006a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006a6:	4770      	bx	lr

080006a8 <__aeabi_uldivmod>:
 80006a8:	b953      	cbnz	r3, 80006c0 <__aeabi_uldivmod+0x18>
 80006aa:	b94a      	cbnz	r2, 80006c0 <__aeabi_uldivmod+0x18>
 80006ac:	2900      	cmp	r1, #0
 80006ae:	bf08      	it	eq
 80006b0:	2800      	cmpeq	r0, #0
 80006b2:	bf1c      	itt	ne
 80006b4:	f04f 31ff 	movne.w	r1, #4294967295
 80006b8:	f04f 30ff 	movne.w	r0, #4294967295
 80006bc:	f000 b96a 	b.w	8000994 <__aeabi_idiv0>
 80006c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006c8:	f000 f806 	bl	80006d8 <__udivmoddi4>
 80006cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006d4:	b004      	add	sp, #16
 80006d6:	4770      	bx	lr

080006d8 <__udivmoddi4>:
 80006d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006dc:	9d08      	ldr	r5, [sp, #32]
 80006de:	460c      	mov	r4, r1
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d14e      	bne.n	8000782 <__udivmoddi4+0xaa>
 80006e4:	4694      	mov	ip, r2
 80006e6:	458c      	cmp	ip, r1
 80006e8:	4686      	mov	lr, r0
 80006ea:	fab2 f282 	clz	r2, r2
 80006ee:	d962      	bls.n	80007b6 <__udivmoddi4+0xde>
 80006f0:	b14a      	cbz	r2, 8000706 <__udivmoddi4+0x2e>
 80006f2:	f1c2 0320 	rsb	r3, r2, #32
 80006f6:	4091      	lsls	r1, r2
 80006f8:	fa20 f303 	lsr.w	r3, r0, r3
 80006fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000700:	4319      	orrs	r1, r3
 8000702:	fa00 fe02 	lsl.w	lr, r0, r2
 8000706:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800070a:	fa1f f68c 	uxth.w	r6, ip
 800070e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000712:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000716:	fb07 1114 	mls	r1, r7, r4, r1
 800071a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800071e:	fb04 f106 	mul.w	r1, r4, r6
 8000722:	4299      	cmp	r1, r3
 8000724:	d90a      	bls.n	800073c <__udivmoddi4+0x64>
 8000726:	eb1c 0303 	adds.w	r3, ip, r3
 800072a:	f104 30ff 	add.w	r0, r4, #4294967295
 800072e:	f080 8112 	bcs.w	8000956 <__udivmoddi4+0x27e>
 8000732:	4299      	cmp	r1, r3
 8000734:	f240 810f 	bls.w	8000956 <__udivmoddi4+0x27e>
 8000738:	3c02      	subs	r4, #2
 800073a:	4463      	add	r3, ip
 800073c:	1a59      	subs	r1, r3, r1
 800073e:	fa1f f38e 	uxth.w	r3, lr
 8000742:	fbb1 f0f7 	udiv	r0, r1, r7
 8000746:	fb07 1110 	mls	r1, r7, r0, r1
 800074a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074e:	fb00 f606 	mul.w	r6, r0, r6
 8000752:	429e      	cmp	r6, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x94>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f100 31ff 	add.w	r1, r0, #4294967295
 800075e:	f080 80fc 	bcs.w	800095a <__udivmoddi4+0x282>
 8000762:	429e      	cmp	r6, r3
 8000764:	f240 80f9 	bls.w	800095a <__udivmoddi4+0x282>
 8000768:	4463      	add	r3, ip
 800076a:	3802      	subs	r0, #2
 800076c:	1b9b      	subs	r3, r3, r6
 800076e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000772:	2100      	movs	r1, #0
 8000774:	b11d      	cbz	r5, 800077e <__udivmoddi4+0xa6>
 8000776:	40d3      	lsrs	r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	e9c5 3200 	strd	r3, r2, [r5]
 800077e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000782:	428b      	cmp	r3, r1
 8000784:	d905      	bls.n	8000792 <__udivmoddi4+0xba>
 8000786:	b10d      	cbz	r5, 800078c <__udivmoddi4+0xb4>
 8000788:	e9c5 0100 	strd	r0, r1, [r5]
 800078c:	2100      	movs	r1, #0
 800078e:	4608      	mov	r0, r1
 8000790:	e7f5      	b.n	800077e <__udivmoddi4+0xa6>
 8000792:	fab3 f183 	clz	r1, r3
 8000796:	2900      	cmp	r1, #0
 8000798:	d146      	bne.n	8000828 <__udivmoddi4+0x150>
 800079a:	42a3      	cmp	r3, r4
 800079c:	d302      	bcc.n	80007a4 <__udivmoddi4+0xcc>
 800079e:	4290      	cmp	r0, r2
 80007a0:	f0c0 80f0 	bcc.w	8000984 <__udivmoddi4+0x2ac>
 80007a4:	1a86      	subs	r6, r0, r2
 80007a6:	eb64 0303 	sbc.w	r3, r4, r3
 80007aa:	2001      	movs	r0, #1
 80007ac:	2d00      	cmp	r5, #0
 80007ae:	d0e6      	beq.n	800077e <__udivmoddi4+0xa6>
 80007b0:	e9c5 6300 	strd	r6, r3, [r5]
 80007b4:	e7e3      	b.n	800077e <__udivmoddi4+0xa6>
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	f040 8090 	bne.w	80008dc <__udivmoddi4+0x204>
 80007bc:	eba1 040c 	sub.w	r4, r1, ip
 80007c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007c4:	fa1f f78c 	uxth.w	r7, ip
 80007c8:	2101      	movs	r1, #1
 80007ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80007ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007d2:	fb08 4416 	mls	r4, r8, r6, r4
 80007d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007da:	fb07 f006 	mul.w	r0, r7, r6
 80007de:	4298      	cmp	r0, r3
 80007e0:	d908      	bls.n	80007f4 <__udivmoddi4+0x11c>
 80007e2:	eb1c 0303 	adds.w	r3, ip, r3
 80007e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80007ea:	d202      	bcs.n	80007f2 <__udivmoddi4+0x11a>
 80007ec:	4298      	cmp	r0, r3
 80007ee:	f200 80cd 	bhi.w	800098c <__udivmoddi4+0x2b4>
 80007f2:	4626      	mov	r6, r4
 80007f4:	1a1c      	subs	r4, r3, r0
 80007f6:	fa1f f38e 	uxth.w	r3, lr
 80007fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80007fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000802:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000806:	fb00 f707 	mul.w	r7, r0, r7
 800080a:	429f      	cmp	r7, r3
 800080c:	d908      	bls.n	8000820 <__udivmoddi4+0x148>
 800080e:	eb1c 0303 	adds.w	r3, ip, r3
 8000812:	f100 34ff 	add.w	r4, r0, #4294967295
 8000816:	d202      	bcs.n	800081e <__udivmoddi4+0x146>
 8000818:	429f      	cmp	r7, r3
 800081a:	f200 80b0 	bhi.w	800097e <__udivmoddi4+0x2a6>
 800081e:	4620      	mov	r0, r4
 8000820:	1bdb      	subs	r3, r3, r7
 8000822:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000826:	e7a5      	b.n	8000774 <__udivmoddi4+0x9c>
 8000828:	f1c1 0620 	rsb	r6, r1, #32
 800082c:	408b      	lsls	r3, r1
 800082e:	fa22 f706 	lsr.w	r7, r2, r6
 8000832:	431f      	orrs	r7, r3
 8000834:	fa20 fc06 	lsr.w	ip, r0, r6
 8000838:	fa04 f301 	lsl.w	r3, r4, r1
 800083c:	ea43 030c 	orr.w	r3, r3, ip
 8000840:	40f4      	lsrs	r4, r6
 8000842:	fa00 f801 	lsl.w	r8, r0, r1
 8000846:	0c38      	lsrs	r0, r7, #16
 8000848:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800084c:	fbb4 fef0 	udiv	lr, r4, r0
 8000850:	fa1f fc87 	uxth.w	ip, r7
 8000854:	fb00 441e 	mls	r4, r0, lr, r4
 8000858:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800085c:	fb0e f90c 	mul.w	r9, lr, ip
 8000860:	45a1      	cmp	r9, r4
 8000862:	fa02 f201 	lsl.w	r2, r2, r1
 8000866:	d90a      	bls.n	800087e <__udivmoddi4+0x1a6>
 8000868:	193c      	adds	r4, r7, r4
 800086a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800086e:	f080 8084 	bcs.w	800097a <__udivmoddi4+0x2a2>
 8000872:	45a1      	cmp	r9, r4
 8000874:	f240 8081 	bls.w	800097a <__udivmoddi4+0x2a2>
 8000878:	f1ae 0e02 	sub.w	lr, lr, #2
 800087c:	443c      	add	r4, r7
 800087e:	eba4 0409 	sub.w	r4, r4, r9
 8000882:	fa1f f983 	uxth.w	r9, r3
 8000886:	fbb4 f3f0 	udiv	r3, r4, r0
 800088a:	fb00 4413 	mls	r4, r0, r3, r4
 800088e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000892:	fb03 fc0c 	mul.w	ip, r3, ip
 8000896:	45a4      	cmp	ip, r4
 8000898:	d907      	bls.n	80008aa <__udivmoddi4+0x1d2>
 800089a:	193c      	adds	r4, r7, r4
 800089c:	f103 30ff 	add.w	r0, r3, #4294967295
 80008a0:	d267      	bcs.n	8000972 <__udivmoddi4+0x29a>
 80008a2:	45a4      	cmp	ip, r4
 80008a4:	d965      	bls.n	8000972 <__udivmoddi4+0x29a>
 80008a6:	3b02      	subs	r3, #2
 80008a8:	443c      	add	r4, r7
 80008aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008ae:	fba0 9302 	umull	r9, r3, r0, r2
 80008b2:	eba4 040c 	sub.w	r4, r4, ip
 80008b6:	429c      	cmp	r4, r3
 80008b8:	46ce      	mov	lr, r9
 80008ba:	469c      	mov	ip, r3
 80008bc:	d351      	bcc.n	8000962 <__udivmoddi4+0x28a>
 80008be:	d04e      	beq.n	800095e <__udivmoddi4+0x286>
 80008c0:	b155      	cbz	r5, 80008d8 <__udivmoddi4+0x200>
 80008c2:	ebb8 030e 	subs.w	r3, r8, lr
 80008c6:	eb64 040c 	sbc.w	r4, r4, ip
 80008ca:	fa04 f606 	lsl.w	r6, r4, r6
 80008ce:	40cb      	lsrs	r3, r1
 80008d0:	431e      	orrs	r6, r3
 80008d2:	40cc      	lsrs	r4, r1
 80008d4:	e9c5 6400 	strd	r6, r4, [r5]
 80008d8:	2100      	movs	r1, #0
 80008da:	e750      	b.n	800077e <__udivmoddi4+0xa6>
 80008dc:	f1c2 0320 	rsb	r3, r2, #32
 80008e0:	fa20 f103 	lsr.w	r1, r0, r3
 80008e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e8:	fa24 f303 	lsr.w	r3, r4, r3
 80008ec:	4094      	lsls	r4, r2
 80008ee:	430c      	orrs	r4, r1
 80008f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80008f8:	fa1f f78c 	uxth.w	r7, ip
 80008fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000900:	fb08 3110 	mls	r1, r8, r0, r3
 8000904:	0c23      	lsrs	r3, r4, #16
 8000906:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800090a:	fb00 f107 	mul.w	r1, r0, r7
 800090e:	4299      	cmp	r1, r3
 8000910:	d908      	bls.n	8000924 <__udivmoddi4+0x24c>
 8000912:	eb1c 0303 	adds.w	r3, ip, r3
 8000916:	f100 36ff 	add.w	r6, r0, #4294967295
 800091a:	d22c      	bcs.n	8000976 <__udivmoddi4+0x29e>
 800091c:	4299      	cmp	r1, r3
 800091e:	d92a      	bls.n	8000976 <__udivmoddi4+0x29e>
 8000920:	3802      	subs	r0, #2
 8000922:	4463      	add	r3, ip
 8000924:	1a5b      	subs	r3, r3, r1
 8000926:	b2a4      	uxth	r4, r4
 8000928:	fbb3 f1f8 	udiv	r1, r3, r8
 800092c:	fb08 3311 	mls	r3, r8, r1, r3
 8000930:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000934:	fb01 f307 	mul.w	r3, r1, r7
 8000938:	42a3      	cmp	r3, r4
 800093a:	d908      	bls.n	800094e <__udivmoddi4+0x276>
 800093c:	eb1c 0404 	adds.w	r4, ip, r4
 8000940:	f101 36ff 	add.w	r6, r1, #4294967295
 8000944:	d213      	bcs.n	800096e <__udivmoddi4+0x296>
 8000946:	42a3      	cmp	r3, r4
 8000948:	d911      	bls.n	800096e <__udivmoddi4+0x296>
 800094a:	3902      	subs	r1, #2
 800094c:	4464      	add	r4, ip
 800094e:	1ae4      	subs	r4, r4, r3
 8000950:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000954:	e739      	b.n	80007ca <__udivmoddi4+0xf2>
 8000956:	4604      	mov	r4, r0
 8000958:	e6f0      	b.n	800073c <__udivmoddi4+0x64>
 800095a:	4608      	mov	r0, r1
 800095c:	e706      	b.n	800076c <__udivmoddi4+0x94>
 800095e:	45c8      	cmp	r8, r9
 8000960:	d2ae      	bcs.n	80008c0 <__udivmoddi4+0x1e8>
 8000962:	ebb9 0e02 	subs.w	lr, r9, r2
 8000966:	eb63 0c07 	sbc.w	ip, r3, r7
 800096a:	3801      	subs	r0, #1
 800096c:	e7a8      	b.n	80008c0 <__udivmoddi4+0x1e8>
 800096e:	4631      	mov	r1, r6
 8000970:	e7ed      	b.n	800094e <__udivmoddi4+0x276>
 8000972:	4603      	mov	r3, r0
 8000974:	e799      	b.n	80008aa <__udivmoddi4+0x1d2>
 8000976:	4630      	mov	r0, r6
 8000978:	e7d4      	b.n	8000924 <__udivmoddi4+0x24c>
 800097a:	46d6      	mov	lr, sl
 800097c:	e77f      	b.n	800087e <__udivmoddi4+0x1a6>
 800097e:	4463      	add	r3, ip
 8000980:	3802      	subs	r0, #2
 8000982:	e74d      	b.n	8000820 <__udivmoddi4+0x148>
 8000984:	4606      	mov	r6, r0
 8000986:	4623      	mov	r3, r4
 8000988:	4608      	mov	r0, r1
 800098a:	e70f      	b.n	80007ac <__udivmoddi4+0xd4>
 800098c:	3e02      	subs	r6, #2
 800098e:	4463      	add	r3, ip
 8000990:	e730      	b.n	80007f4 <__udivmoddi4+0x11c>
 8000992:	bf00      	nop

08000994 <__aeabi_idiv0>:
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2203      	movs	r2, #3
 80009a4:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2200      	movs	r2, #0
 80009aa:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2203      	movs	r2, #3
 80009b0:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2203      	movs	r2, #3
 80009b6:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2203      	movs	r2, #3
 80009bc:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2203      	movs	r2, #3
 80009c2:	715a      	strb	r2, [r3, #5]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	@ 0x28
 80009d4:	af04      	add	r7, sp, #16
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	460b      	mov	r3, r1
 80009da:	607a      	str	r2, [r7, #4]
 80009dc:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80009ea:	7afb      	ldrb	r3, [r7, #11]
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	8af9      	ldrh	r1, [r7, #22]
 80009f0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80009f4:	9302      	str	r3, [sp, #8]
 80009f6:	2302      	movs	r3, #2
 80009f8:	9301      	str	r3, [sp, #4]
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	2301      	movs	r3, #1
 8000a02:	f002 ffc1 	bl	8003988 <HAL_I2C_Mem_Read>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d10b      	bne.n	8000a24 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000a0c:	7d7b      	ldrb	r3, [r7, #21]
 8000a0e:	021b      	lsls	r3, r3, #8
 8000a10:	b21a      	sxth	r2, r3
 8000a12:	7d3b      	ldrb	r3, [r7, #20]
 8000a14:	b21b      	sxth	r3, r3
 8000a16:	4313      	orrs	r3, r2
 8000a18:	b21b      	sxth	r3, r3
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	801a      	strh	r2, [r3, #0]
		return true;
 8000a20:	2301      	movs	r3, #1
 8000a22:	e000      	b.n	8000a26 <read_register16+0x56>
	} else
		return false;
 8000a24:	2300      	movs	r3, #0

}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8000a2e:	b590      	push	{r4, r7, lr}
 8000a30:	b08b      	sub	sp, #44	@ 0x2c
 8000a32:	af04      	add	r7, sp, #16
 8000a34:	60f8      	str	r0, [r7, #12]
 8000a36:	607a      	str	r2, [r7, #4]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	72fb      	strb	r3, [r7, #11]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000a4e:	7afb      	ldrb	r3, [r7, #11]
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	7abb      	ldrb	r3, [r7, #10]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	8af9      	ldrh	r1, [r7, #22]
 8000a58:	f241 3488 	movw	r4, #5000	@ 0x1388
 8000a5c:	9402      	str	r4, [sp, #8]
 8000a5e:	9301      	str	r3, [sp, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	2301      	movs	r3, #1
 8000a66:	f002 ff8f 	bl	8003988 <HAL_I2C_Mem_Read>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d101      	bne.n	8000a74 <read_data+0x46>
		return 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	e000      	b.n	8000a76 <read_data+0x48>
	else
		return 1;
 8000a74:	2301      	movs	r3, #1

}
 8000a76:	4618      	mov	r0, r3
 8000a78:	371c      	adds	r7, #28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd90      	pop	{r4, r7, pc}

08000a7e <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	2188      	movs	r1, #136	@ 0x88
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ff9f 	bl	80009d0 <read_register16>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d06f      	beq.n	8000b78 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3302      	adds	r3, #2
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	218a      	movs	r1, #138	@ 0x8a
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ff95 	bl	80009d0 <read_register16>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d065      	beq.n	8000b78 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3304      	adds	r3, #4
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	218c      	movs	r1, #140	@ 0x8c
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff ff8b 	bl	80009d0 <read_register16>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d05b      	beq.n	8000b78 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3306      	adds	r3, #6
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	218e      	movs	r1, #142	@ 0x8e
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ff81 	bl	80009d0 <read_register16>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d051      	beq.n	8000b78 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3308      	adds	r3, #8
 8000ad8:	461a      	mov	r2, r3
 8000ada:	2190      	movs	r1, #144	@ 0x90
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff ff77 	bl	80009d0 <read_register16>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d047      	beq.n	8000b78 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	330a      	adds	r3, #10
 8000aec:	461a      	mov	r2, r3
 8000aee:	2192      	movs	r1, #146	@ 0x92
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff6d 	bl	80009d0 <read_register16>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d03d      	beq.n	8000b78 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	330c      	adds	r3, #12
 8000b00:	461a      	mov	r2, r3
 8000b02:	2194      	movs	r1, #148	@ 0x94
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff ff63 	bl	80009d0 <read_register16>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d033      	beq.n	8000b78 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	330e      	adds	r3, #14
 8000b14:	461a      	mov	r2, r3
 8000b16:	2196      	movs	r1, #150	@ 0x96
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ff59 	bl	80009d0 <read_register16>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d029      	beq.n	8000b78 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3310      	adds	r3, #16
 8000b28:	461a      	mov	r2, r3
 8000b2a:	2198      	movs	r1, #152	@ 0x98
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff ff4f 	bl	80009d0 <read_register16>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d01f      	beq.n	8000b78 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3312      	adds	r3, #18
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	219a      	movs	r1, #154	@ 0x9a
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ff45 	bl	80009d0 <read_register16>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d015      	beq.n	8000b78 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3314      	adds	r3, #20
 8000b50:	461a      	mov	r2, r3
 8000b52:	219c      	movs	r1, #156	@ 0x9c
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ff3b 	bl	80009d0 <read_register16>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d00b      	beq.n	8000b78 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8000b64:	461a      	mov	r2, r3
 8000b66:	219e      	movs	r1, #158	@ 0x9e
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff ff31 	bl	80009d0 <read_register16>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <read_calibration_data+0xfa>

		return true;
 8000b74:	2301      	movs	r3, #1
 8000b76:	e000      	b.n	8000b7a <read_calibration_data+0xfc>
	}

	return false;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b084      	sub	sp, #16
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f103 0218 	add.w	r2, r3, #24
 8000b90:	2301      	movs	r3, #1
 8000b92:	21a1      	movs	r1, #161	@ 0xa1
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff ff4a 	bl	8000a2e <read_data>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14b      	bne.n	8000c38 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	331a      	adds	r3, #26
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	21e1      	movs	r1, #225	@ 0xe1
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ff11 	bl	80009d0 <read_register16>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d041      	beq.n	8000c38 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f103 021c 	add.w	r2, r3, #28
 8000bba:	2301      	movs	r3, #1
 8000bbc:	21e3      	movs	r1, #227	@ 0xe3
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ff35 	bl	8000a2e <read_data>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d136      	bne.n	8000c38 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8000bca:	f107 030e 	add.w	r3, r7, #14
 8000bce:	461a      	mov	r2, r3
 8000bd0:	21e4      	movs	r1, #228	@ 0xe4
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff fefc 	bl	80009d0 <read_register16>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d02c      	beq.n	8000c38 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	461a      	mov	r2, r3
 8000be4:	21e5      	movs	r1, #229	@ 0xe5
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff fef2 	bl	80009d0 <read_register16>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d022      	beq.n	8000c38 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	21e7      	movs	r1, #231	@ 0xe7
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff ff16 	bl	8000a2e <read_data>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d117      	bne.n	8000c38 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8000c08:	89fb      	ldrh	r3, [r7, #14]
 8000c0a:	011b      	lsls	r3, r3, #4
 8000c0c:	b21b      	sxth	r3, r3
 8000c0e:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 8000c12:	b21a      	sxth	r2, r3
 8000c14:	89fb      	ldrh	r3, [r7, #14]
 8000c16:	121b      	asrs	r3, r3, #8
 8000c18:	b21b      	sxth	r3, r3
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	b21b      	sxth	r3, r3
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b21a      	sxth	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8000c28:	89bb      	ldrh	r3, [r7, #12]
 8000c2a:	091b      	lsrs	r3, r3, #4
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b21a      	sxth	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	841a      	strh	r2, [r3, #32]

		return true;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e000      	b.n	8000c3a <read_hum_calibration_data+0xb8>
	}

	return false;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b088      	sub	sp, #32
 8000c46:	af04      	add	r7, sp, #16
 8000c48:	6078      	str	r0, [r7, #4]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	70fb      	strb	r3, [r7, #3]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000c5e:	78fb      	ldrb	r3, [r7, #3]
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	89f9      	ldrh	r1, [r7, #14]
 8000c64:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000c68:	9302      	str	r3, [sp, #8]
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	9301      	str	r3, [sp, #4]
 8000c6e:	1cbb      	adds	r3, r7, #2
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	2301      	movs	r3, #1
 8000c74:	f002 fd8e 	bl	8003794 <HAL_I2C_Mem_Write>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d101      	bne.n	8000c82 <write_register8+0x40>
		return false;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <write_register8+0x42>
	else
		return true;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000c9a:	2b76      	cmp	r3, #118	@ 0x76
 8000c9c:	d005      	beq.n	8000caa <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000ca2:	2b77      	cmp	r3, #119	@ 0x77
 8000ca4:	d001      	beq.n	8000caa <bmp280_init+0x1e>

		return false;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e099      	b.n	8000dde <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	21d0      	movs	r1, #208	@ 0xd0
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff feba 	bl	8000a2e <read_data>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <bmp280_init+0x38>
		return false;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	e08c      	b.n	8000dde <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8000cca:	2b58      	cmp	r3, #88	@ 0x58
 8000ccc:	d006      	beq.n	8000cdc <bmp280_init+0x50>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8000cd4:	2b60      	cmp	r3, #96	@ 0x60
 8000cd6:	d001      	beq.n	8000cdc <bmp280_init+0x50>

		return false;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	e080      	b.n	8000dde <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8000cdc:	22b6      	movs	r2, #182	@ 0xb6
 8000cde:	21e0      	movs	r1, #224	@ 0xe0
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff ffae 	bl	8000c42 <write_register8>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <bmp280_init+0x64>
		return false;
 8000cec:	2300      	movs	r3, #0
 8000cee:	e076      	b.n	8000dde <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8000cf0:	f107 020c 	add.w	r2, r7, #12
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	21f3      	movs	r1, #243	@ 0xf3
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff fe98 	bl	8000a2e <read_data>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1f5      	bne.n	8000cf0 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8000d04:	7b3b      	ldrb	r3, [r7, #12]
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1f0      	bne.n	8000cf0 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff feb5 	bl	8000a7e <read_calibration_data>
 8000d14:	4603      	mov	r3, r0
 8000d16:	f083 0301 	eor.w	r3, r3, #1
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d100      	bne.n	8000d22 <bmp280_init+0x96>
 8000d20:	e001      	b.n	8000d26 <bmp280_init+0x9a>
		return false;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e05b      	b.n	8000dde <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8000d2c:	2b60      	cmp	r3, #96	@ 0x60
 8000d2e:	d10a      	bne.n	8000d46 <bmp280_init+0xba>
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ff26 	bl	8000b82 <read_hum_calibration_data>
 8000d36:	4603      	mov	r3, r0
 8000d38:	f083 0301 	eor.w	r3, r3, #1
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <bmp280_init+0xba>
		return false;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e04b      	b.n	8000dde <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	795b      	ldrb	r3, [r3, #5]
 8000d4a:	015b      	lsls	r3, r3, #5
 8000d4c:	b25a      	sxtb	r2, r3
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	785b      	ldrb	r3, [r3, #1]
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	b25b      	sxtb	r3, r3
 8000d56:	4313      	orrs	r3, r2
 8000d58:	b25b      	sxtb	r3, r3
 8000d5a:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	21f5      	movs	r1, #245	@ 0xf5
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff ff6d 	bl	8000c42 <write_register8>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <bmp280_init+0xe6>
		return false;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e035      	b.n	8000dde <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d102      	bne.n	8000d80 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	78db      	ldrb	r3, [r3, #3]
 8000d84:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8000d86:	b25a      	sxtb	r2, r3
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	789b      	ldrb	r3, [r3, #2]
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	b25b      	sxtb	r3, r3
 8000d90:	4313      	orrs	r3, r2
 8000d92:	b25a      	sxtb	r2, r3
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b25b      	sxtb	r3, r3
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000d9e:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8000da6:	2b60      	cmp	r3, #96	@ 0x60
 8000da8:	d10d      	bne.n	8000dc6 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	791b      	ldrb	r3, [r3, #4]
 8000dae:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8000db0:	7b7b      	ldrb	r3, [r7, #13]
 8000db2:	461a      	mov	r2, r3
 8000db4:	21f2      	movs	r1, #242	@ 0xf2
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ff43 	bl	8000c42 <write_register8>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <bmp280_init+0x13a>
			return false;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e00b      	b.n	8000dde <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000dc6:	7bbb      	ldrb	r3, [r7, #14]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	21f4      	movs	r1, #244	@ 0xf4
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ff38 	bl	8000c42 <write_register8>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <bmp280_init+0x150>
		return false;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	e000      	b.n	8000dde <bmp280_init+0x152>
	}

	return true;
 8000ddc:	2301      	movs	r3, #1
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8000de6:	b480      	push	{r7}
 8000de8:	b087      	sub	sp, #28
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	10da      	asrs	r2, r3, #3
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000e04:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000e08:	12db      	asrs	r3, r3, #11
 8000e0a:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	111b      	asrs	r3, r3, #4
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	8812      	ldrh	r2, [r2, #0]
 8000e14:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	1112      	asrs	r2, r2, #4
 8000e1a:	68f9      	ldr	r1, [r7, #12]
 8000e1c:	8809      	ldrh	r1, [r1, #0]
 8000e1e:	1a52      	subs	r2, r2, r1
 8000e20:	fb02 f303 	mul.w	r3, r2, r3
 8000e24:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000e2c:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000e30:	139b      	asrs	r3, r3, #14
 8000e32:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	441a      	add	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4613      	mov	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	3380      	adds	r3, #128	@ 0x80
 8000e4a:	121b      	asrs	r3, r3, #8
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	371c      	adds	r7, #28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8000e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e5c:	b0cc      	sub	sp, #304	@ 0x130
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8000e64:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8000e68:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8000e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000e70:	17da      	asrs	r2, r3, #31
 8000e72:	461c      	mov	r4, r3
 8000e74:	4615      	mov	r5, r2
 8000e76:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8000e7a:	f145 3bff 	adc.w	fp, r5, #4294967295
 8000e7e:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8000e82:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000e86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000e8a:	fb03 f102 	mul.w	r1, r3, r2
 8000e8e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000e92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000e96:	fb02 f303 	mul.w	r3, r2, r3
 8000e9a:	18ca      	adds	r2, r1, r3
 8000e9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000ea0:	fba3 8903 	umull	r8, r9, r3, r3
 8000ea4:	eb02 0309 	add.w	r3, r2, r9
 8000ea8:	4699      	mov	r9, r3
 8000eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000eae:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000eb2:	b21b      	sxth	r3, r3
 8000eb4:	17da      	asrs	r2, r3, #31
 8000eb6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000eba:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000ebe:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	fb03 f209 	mul.w	r2, r3, r9
 8000ec8:	460b      	mov	r3, r1
 8000eca:	fb08 f303 	mul.w	r3, r8, r3
 8000ece:	4413      	add	r3, r2
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	fba8 1202 	umull	r1, r2, r8, r2
 8000ed6:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000eda:	460a      	mov	r2, r1
 8000edc:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000ee0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000ee4:	4413      	add	r3, r2
 8000ee6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000eea:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000eee:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8000ef2:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8000ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000efa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000efe:	b21b      	sxth	r3, r3
 8000f00:	17da      	asrs	r2, r3, #31
 8000f02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000f06:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000f0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000f0e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000f12:	462a      	mov	r2, r5
 8000f14:	fb02 f203 	mul.w	r2, r2, r3
 8000f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f1c:	4621      	mov	r1, r4
 8000f1e:	fb01 f303 	mul.w	r3, r1, r3
 8000f22:	441a      	add	r2, r3
 8000f24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000f28:	4621      	mov	r1, r4
 8000f2a:	fba3 1301 	umull	r1, r3, r3, r1
 8000f2e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000f32:	460b      	mov	r3, r1
 8000f34:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000f3c:	18d3      	adds	r3, r2, r3
 8000f3e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000f42:	f04f 0000 	mov.w	r0, #0
 8000f46:	f04f 0100 	mov.w	r1, #0
 8000f4a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000f4e:	462b      	mov	r3, r5
 8000f50:	0459      	lsls	r1, r3, #17
 8000f52:	4623      	mov	r3, r4
 8000f54:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000f58:	4623      	mov	r3, r4
 8000f5a:	0458      	lsls	r0, r3, #17
 8000f5c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000f60:	1814      	adds	r4, r2, r0
 8000f62:	643c      	str	r4, [r7, #64]	@ 0x40
 8000f64:	414b      	adcs	r3, r1
 8000f66:	647b      	str	r3, [r7, #68]	@ 0x44
 8000f68:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000f6c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8000f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000f74:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	17da      	asrs	r2, r3, #31
 8000f7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000f80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000f84:	f04f 0000 	mov.w	r0, #0
 8000f88:	f04f 0100 	mov.w	r1, #0
 8000f8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f90:	00d9      	lsls	r1, r3, #3
 8000f92:	2000      	movs	r0, #0
 8000f94:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000f98:	1814      	adds	r4, r2, r0
 8000f9a:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000f9c:	414b      	adcs	r3, r1
 8000f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000fa0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000fa4:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000fa8:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000fac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000fb0:	fb03 f102 	mul.w	r1, r3, r2
 8000fb4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000fb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000fbc:	fb02 f303 	mul.w	r3, r2, r3
 8000fc0:	18ca      	adds	r2, r1, r3
 8000fc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000fc6:	fba3 1303 	umull	r1, r3, r3, r3
 8000fca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000fce:	460b      	mov	r3, r1
 8000fd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000fd8:	18d3      	adds	r3, r2, r3
 8000fda:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000fe2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000fe6:	b21b      	sxth	r3, r3
 8000fe8:	17da      	asrs	r2, r3, #31
 8000fea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000fee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000ff2:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000ff6:	462b      	mov	r3, r5
 8000ff8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000ffc:	4642      	mov	r2, r8
 8000ffe:	fb02 f203 	mul.w	r2, r2, r3
 8001002:	464b      	mov	r3, r9
 8001004:	4621      	mov	r1, r4
 8001006:	fb01 f303 	mul.w	r3, r1, r3
 800100a:	4413      	add	r3, r2
 800100c:	4622      	mov	r2, r4
 800100e:	4641      	mov	r1, r8
 8001010:	fba2 1201 	umull	r1, r2, r2, r1
 8001014:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001018:	460a      	mov	r2, r1
 800101a:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800101e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001022:	4413      	add	r3, r2
 8001024:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001028:	f04f 0000 	mov.w	r0, #0
 800102c:	f04f 0100 	mov.w	r1, #0
 8001030:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001034:	4623      	mov	r3, r4
 8001036:	0a18      	lsrs	r0, r3, #8
 8001038:	462b      	mov	r3, r5
 800103a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800103e:	462b      	mov	r3, r5
 8001040:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001046:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800104a:	b21b      	sxth	r3, r3
 800104c:	17da      	asrs	r2, r3, #31
 800104e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001052:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001056:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800105a:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800105e:	464a      	mov	r2, r9
 8001060:	fb02 f203 	mul.w	r2, r2, r3
 8001064:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001068:	4644      	mov	r4, r8
 800106a:	fb04 f303 	mul.w	r3, r4, r3
 800106e:	441a      	add	r2, r3
 8001070:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001074:	4644      	mov	r4, r8
 8001076:	fba3 4304 	umull	r4, r3, r3, r4
 800107a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800107e:	4623      	mov	r3, r4
 8001080:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001084:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001088:	18d3      	adds	r3, r2, r3
 800108a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800109a:	464c      	mov	r4, r9
 800109c:	0323      	lsls	r3, r4, #12
 800109e:	4644      	mov	r4, r8
 80010a0:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80010a4:	4644      	mov	r4, r8
 80010a6:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80010a8:	1884      	adds	r4, r0, r2
 80010aa:	633c      	str	r4, [r7, #48]	@ 0x30
 80010ac:	eb41 0303 	adc.w	r3, r1, r3
 80010b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80010b2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80010b6:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80010ba:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80010be:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80010c2:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80010c6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80010ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80010ce:	88db      	ldrh	r3, [r3, #6]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	2200      	movs	r2, #0
 80010d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80010d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80010dc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80010e0:	462b      	mov	r3, r5
 80010e2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80010e6:	4642      	mov	r2, r8
 80010e8:	fb02 f203 	mul.w	r2, r2, r3
 80010ec:	464b      	mov	r3, r9
 80010ee:	4621      	mov	r1, r4
 80010f0:	fb01 f303 	mul.w	r3, r1, r3
 80010f4:	4413      	add	r3, r2
 80010f6:	4622      	mov	r2, r4
 80010f8:	4641      	mov	r1, r8
 80010fa:	fba2 1201 	umull	r1, r2, r2, r1
 80010fe:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001102:	460a      	mov	r2, r1
 8001104:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001108:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800110c:	4413      	add	r3, r2
 800110e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	f04f 0300 	mov.w	r3, #0
 800111a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800111e:	4629      	mov	r1, r5
 8001120:	104a      	asrs	r2, r1, #1
 8001122:	4629      	mov	r1, r5
 8001124:	17cb      	asrs	r3, r1, #31
 8001126:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 800112a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800112e:	4313      	orrs	r3, r2
 8001130:	d101      	bne.n	8001136 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001132:	2300      	movs	r3, #0
 8001134:	e148      	b.n	80013c8 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8001136:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800113a:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800113e:	17da      	asrs	r2, r3, #31
 8001140:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001142:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001144:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001148:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 800114c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001150:	105b      	asrs	r3, r3, #1
 8001152:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001156:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800115a:	07db      	lsls	r3, r3, #31
 800115c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001160:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001164:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001168:	4621      	mov	r1, r4
 800116a:	1a89      	subs	r1, r1, r2
 800116c:	67b9      	str	r1, [r7, #120]	@ 0x78
 800116e:	4629      	mov	r1, r5
 8001170:	eb61 0303 	sbc.w	r3, r1, r3
 8001174:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001176:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800117a:	4622      	mov	r2, r4
 800117c:	462b      	mov	r3, r5
 800117e:	1891      	adds	r1, r2, r2
 8001180:	6239      	str	r1, [r7, #32]
 8001182:	415b      	adcs	r3, r3
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
 8001186:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800118a:	4621      	mov	r1, r4
 800118c:	1851      	adds	r1, r2, r1
 800118e:	61b9      	str	r1, [r7, #24]
 8001190:	4629      	mov	r1, r5
 8001192:	414b      	adcs	r3, r1
 8001194:	61fb      	str	r3, [r7, #28]
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80011a2:	4649      	mov	r1, r9
 80011a4:	018b      	lsls	r3, r1, #6
 80011a6:	4641      	mov	r1, r8
 80011a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80011ac:	4641      	mov	r1, r8
 80011ae:	018a      	lsls	r2, r1, #6
 80011b0:	4641      	mov	r1, r8
 80011b2:	1889      	adds	r1, r1, r2
 80011b4:	6139      	str	r1, [r7, #16]
 80011b6:	4649      	mov	r1, r9
 80011b8:	eb43 0101 	adc.w	r1, r3, r1
 80011bc:	6179      	str	r1, [r7, #20]
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	f04f 0300 	mov.w	r3, #0
 80011c6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80011ca:	4649      	mov	r1, r9
 80011cc:	008b      	lsls	r3, r1, #2
 80011ce:	4641      	mov	r1, r8
 80011d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80011d4:	4641      	mov	r1, r8
 80011d6:	008a      	lsls	r2, r1, #2
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	4603      	mov	r3, r0
 80011de:	4622      	mov	r2, r4
 80011e0:	189b      	adds	r3, r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	460b      	mov	r3, r1
 80011e6:	462a      	mov	r2, r5
 80011e8:	eb42 0303 	adc.w	r3, r2, r3
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80011fa:	4649      	mov	r1, r9
 80011fc:	008b      	lsls	r3, r1, #2
 80011fe:	4641      	mov	r1, r8
 8001200:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001204:	4641      	mov	r1, r8
 8001206:	008a      	lsls	r2, r1, #2
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	4603      	mov	r3, r0
 800120e:	4622      	mov	r2, r4
 8001210:	189b      	adds	r3, r3, r2
 8001212:	673b      	str	r3, [r7, #112]	@ 0x70
 8001214:	462b      	mov	r3, r5
 8001216:	460a      	mov	r2, r1
 8001218:	eb42 0303 	adc.w	r3, r2, r3
 800121c:	677b      	str	r3, [r7, #116]	@ 0x74
 800121e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001222:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001226:	f7ff f9ef 	bl	8000608 <__aeabi_ldivmod>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001236:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800123a:	b21b      	sxth	r3, r3
 800123c:	17da      	asrs	r2, r3, #31
 800123e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001240:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001242:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001246:	f04f 0000 	mov.w	r0, #0
 800124a:	f04f 0100 	mov.w	r1, #0
 800124e:	0b50      	lsrs	r0, r2, #13
 8001250:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001254:	1359      	asrs	r1, r3, #13
 8001256:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800125a:	462b      	mov	r3, r5
 800125c:	fb00 f203 	mul.w	r2, r0, r3
 8001260:	4623      	mov	r3, r4
 8001262:	fb03 f301 	mul.w	r3, r3, r1
 8001266:	4413      	add	r3, r2
 8001268:	4622      	mov	r2, r4
 800126a:	fba2 1200 	umull	r1, r2, r2, r0
 800126e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001272:	460a      	mov	r2, r1
 8001274:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001278:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800127c:	4413      	add	r3, r2
 800127e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001282:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001286:	f04f 0000 	mov.w	r0, #0
 800128a:	f04f 0100 	mov.w	r1, #0
 800128e:	0b50      	lsrs	r0, r2, #13
 8001290:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001294:	1359      	asrs	r1, r3, #13
 8001296:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800129a:	462b      	mov	r3, r5
 800129c:	fb00 f203 	mul.w	r2, r0, r3
 80012a0:	4623      	mov	r3, r4
 80012a2:	fb03 f301 	mul.w	r3, r3, r1
 80012a6:	4413      	add	r3, r2
 80012a8:	4622      	mov	r2, r4
 80012aa:	fba2 1200 	umull	r1, r2, r2, r0
 80012ae:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80012b2:	460a      	mov	r2, r1
 80012b4:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80012b8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80012bc:	4413      	add	r3, r2
 80012be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	f04f 0300 	mov.w	r3, #0
 80012ca:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80012ce:	4621      	mov	r1, r4
 80012d0:	0e4a      	lsrs	r2, r1, #25
 80012d2:	4629      	mov	r1, r5
 80012d4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80012d8:	4629      	mov	r1, r5
 80012da:	164b      	asrs	r3, r1, #25
 80012dc:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80012e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80012e4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	17da      	asrs	r2, r3, #31
 80012ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80012ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80012f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80012f4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80012f8:	462a      	mov	r2, r5
 80012fa:	fb02 f203 	mul.w	r2, r2, r3
 80012fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001302:	4621      	mov	r1, r4
 8001304:	fb01 f303 	mul.w	r3, r1, r3
 8001308:	4413      	add	r3, r2
 800130a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800130e:	4621      	mov	r1, r4
 8001310:	fba2 1201 	umull	r1, r2, r2, r1
 8001314:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001318:	460a      	mov	r2, r1
 800131a:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800131e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001322:	4413      	add	r3, r2
 8001324:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	f04f 0300 	mov.w	r3, #0
 8001330:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001334:	4621      	mov	r1, r4
 8001336:	0cca      	lsrs	r2, r1, #19
 8001338:	4629      	mov	r1, r5
 800133a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800133e:	4629      	mov	r1, r5
 8001340:	14cb      	asrs	r3, r1, #19
 8001342:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001346:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800134a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800134e:	1884      	adds	r4, r0, r2
 8001350:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001352:	eb41 0303 	adc.w	r3, r1, r3
 8001356:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001358:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800135c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001360:	4621      	mov	r1, r4
 8001362:	1889      	adds	r1, r1, r2
 8001364:	6539      	str	r1, [r7, #80]	@ 0x50
 8001366:	4629      	mov	r1, r5
 8001368:	eb43 0101 	adc.w	r1, r3, r1
 800136c:	6579      	str	r1, [r7, #84]	@ 0x54
 800136e:	f04f 0000 	mov.w	r0, #0
 8001372:	f04f 0100 	mov.w	r1, #0
 8001376:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800137a:	4623      	mov	r3, r4
 800137c:	0a18      	lsrs	r0, r3, #8
 800137e:	462b      	mov	r3, r5
 8001380:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001384:	462b      	mov	r3, r5
 8001386:	1219      	asrs	r1, r3, #8
 8001388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800138c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001390:	b21b      	sxth	r3, r3
 8001392:	17da      	asrs	r2, r3, #31
 8001394:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001396:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	f04f 0300 	mov.w	r3, #0
 80013a0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80013a4:	464c      	mov	r4, r9
 80013a6:	0123      	lsls	r3, r4, #4
 80013a8:	4644      	mov	r4, r8
 80013aa:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80013ae:	4644      	mov	r4, r8
 80013b0:	0122      	lsls	r2, r4, #4
 80013b2:	1884      	adds	r4, r0, r2
 80013b4:	603c      	str	r4, [r7, #0]
 80013b6:	eb41 0303 	adc.w	r3, r1, r3
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80013c0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 80013c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80013ce:	46bd      	mov	sp, r7
 80013d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080013d4 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 80013e6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	039a      	lsls	r2, r3, #14
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80013f2:	051b      	lsls	r3, r3, #20
 80013f4:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80013fc:	4619      	mov	r1, r3
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	fb01 f303 	mul.w	r3, r1, r3
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800140a:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001412:	4611      	mov	r1, r2
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	fb01 f202 	mul.w	r2, r1, r2
 800141a:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800141c:	68f9      	ldr	r1, [r7, #12]
 800141e:	7f09      	ldrb	r1, [r1, #28]
 8001420:	4608      	mov	r0, r1
 8001422:	6979      	ldr	r1, [r7, #20]
 8001424:	fb00 f101 	mul.w	r1, r0, r1
 8001428:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800142a:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800142e:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001432:	1292      	asrs	r2, r2, #10
 8001434:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001438:	68f9      	ldr	r1, [r7, #12]
 800143a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800143e:	fb01 f202 	mul.w	r2, r1, r2
 8001442:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001446:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001448:	fb02 f303 	mul.w	r3, r2, r3
 800144c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	13db      	asrs	r3, r3, #15
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	13d2      	asrs	r2, r2, #15
 8001456:	fb02 f303 	mul.w	r3, r2, r3
 800145a:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	7e12      	ldrb	r2, [r2, #24]
 8001460:	fb02 f303 	mul.w	r3, r2, r3
 8001464:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001472:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 800147a:	bfa8      	it	ge
 800147c:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001480:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	131b      	asrs	r3, r3, #12
}
 8001486:	4618      	mov	r0, r3
 8001488:	371c      	adds	r7, #28
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001492:	b580      	push	{r7, lr}
 8001494:	b08c      	sub	sp, #48	@ 0x30
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80014a6:	2b60      	cmp	r3, #96	@ 0x60
 80014a8:	d007      	beq.n	80014ba <bmp280_read_fixed+0x28>
		if (humidity)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d002      	beq.n	80014b6 <bmp280_read_fixed+0x24>
			*humidity = 0;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <bmp280_read_fixed+0x32>
 80014c0:	2308      	movs	r3, #8
 80014c2:	e000      	b.n	80014c6 <bmp280_read_fixed+0x34>
 80014c4:	2306      	movs	r3, #6
 80014c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 80014c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	f107 0218 	add.w	r2, r7, #24
 80014d0:	21f7      	movs	r1, #247	@ 0xf7
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f7ff faab 	bl	8000a2e <read_data>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <bmp280_read_fixed+0x50>
		return false;
 80014de:	2300      	movs	r3, #0
 80014e0:	e038      	b.n	8001554 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80014e2:	7e3b      	ldrb	r3, [r7, #24]
 80014e4:	031a      	lsls	r2, r3, #12
 80014e6:	7e7b      	ldrb	r3, [r7, #25]
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	4313      	orrs	r3, r2
 80014ec:	7eba      	ldrb	r2, [r7, #26]
 80014ee:	0912      	lsrs	r2, r2, #4
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	4313      	orrs	r3, r2
 80014f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80014f6:	7efb      	ldrb	r3, [r7, #27]
 80014f8:	031a      	lsls	r2, r3, #12
 80014fa:	7f3b      	ldrb	r3, [r7, #28]
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	4313      	orrs	r3, r2
 8001500:	7f7a      	ldrb	r2, [r7, #29]
 8001502:	0912      	lsrs	r2, r2, #4
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	4313      	orrs	r3, r2
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	461a      	mov	r2, r3
 8001510:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f7ff fc67 	bl	8000de6 <compensate_temperature>
 8001518:	4602      	mov	r2, r0
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	461a      	mov	r2, r3
 8001522:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f7ff fc97 	bl	8000e58 <compensate_pressure>
 800152a:	4602      	mov	r2, r0
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00d      	beq.n	8001552 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001536:	7fbb      	ldrb	r3, [r7, #30]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	7ffa      	ldrb	r2, [r7, #31]
 800153c:	4313      	orrs	r3, r2
 800153e:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	461a      	mov	r2, r3
 8001544:	6a39      	ldr	r1, [r7, #32]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f7ff ff44 	bl	80013d4 <compensate_humidity>
 800154c:	4602      	mov	r2, r0
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	3730      	adds	r7, #48	@ 0x30
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
 8001568:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d002      	beq.n	8001576 <bmp280_read_float+0x1a>
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	e000      	b.n	8001578 <bmp280_read_float+0x1c>
 8001576:	2300      	movs	r3, #0
 8001578:	f107 0218 	add.w	r2, r7, #24
 800157c:	f107 011c 	add.w	r1, r7, #28
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f7ff ff86 	bl	8001492 <bmp280_read_fixed>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d028      	beq.n	80015de <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	ee07 3a90 	vmov	s15, r3
 8001592:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001596:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80015e8 <bmp280_read_float+0x8c>
 800159a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015ae:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80015ec <bmp280_read_float+0x90>
 80015b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00b      	beq.n	80015da <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015cc:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80015f0 <bmp280_read_float+0x94>
 80015d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	edc3 7a00 	vstr	s15, [r3]
		return true;
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <bmp280_read_float+0x84>
	}

	return false;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3720      	adds	r7, #32
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	42c80000 	.word	0x42c80000
 80015ec:	43800000 	.word	0x43800000
 80015f0:	44800000 	.word	0x44800000

080015f4 <main>:
void ReadVibration(void);
void Transmit_Sensor_Data(uint8_t vitesse_vent, float temperature, float pressure, float courant, float angle);
void TransmitVibrationAlert(uint8_t vibration);

int main(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015fa:	f000 fd7f 	bl	80020fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015fe:	f000 f867 	bl	80016d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001602:	f000 f9ff 	bl	8001a04 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001606:	f000 f8bf 	bl	8001788 <MX_ADC1_Init>
  MX_I2C1_Init();
 800160a:	f000 f94f 	bl	80018ac <MX_I2C1_Init>
  MX_TIM2_Init();
 800160e:	f000 f97b 	bl	8001908 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8001612:	f000 f9cd 	bl	80019b0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001616:	213c      	movs	r1, #60	@ 0x3c
 8001618:	4824      	ldr	r0, [pc, #144]	@ (80016ac <main+0xb8>)
 800161a:	f003 fc99 	bl	8004f50 <HAL_TIM_Encoder_Start>
  bmp280_params_t params;
      bmp280_init_default_params(&params);
 800161e:	463b      	mov	r3, r7
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff f9b9 	bl	8000998 <bmp280_init_default_params>
      bmp280.i2c = &hi2c1;
 8001626:	4b22      	ldr	r3, [pc, #136]	@ (80016b0 <main+0xbc>)
 8001628:	4a22      	ldr	r2, [pc, #136]	@ (80016b4 <main+0xc0>)
 800162a:	629a      	str	r2, [r3, #40]	@ 0x28
      bmp280.addr = BMP280_I2C_ADDRESS_0; // or BMP280_I2C_ADDRESS_1 based on your hardware setup
 800162c:	4b20      	ldr	r3, [pc, #128]	@ (80016b0 <main+0xbc>)
 800162e:	2276      	movs	r2, #118	@ 0x76
 8001630:	849a      	strh	r2, [r3, #36]	@ 0x24

      // Initialize BMP280
      if (!bmp280_init(&bmp280, &params)) {
 8001632:	463b      	mov	r3, r7
 8001634:	4619      	mov	r1, r3
 8001636:	481e      	ldr	r0, [pc, #120]	@ (80016b0 <main+0xbc>)
 8001638:	f7ff fb28 	bl	8000c8c <bmp280_init>
 800163c:	4603      	mov	r3, r0
 800163e:	f083 0301 	eor.w	r3, r3, #1
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <main+0x58>
          Error_Handler();
 8001648:	f000 fb3c 	bl	8001cc4 <Error_Handler>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ReadADCValues(); // lire les valeurs du vent et du courant
 800164c:	f000 fa24 	bl	8001a98 <ReadADCValues>
	   //verifier si il y a une vibration
	  ReadAngle();   // /La position et l'orientation des pales des éoliennes
 8001650:	f000 fa6c 	bl	8001b2c <ReadAngle>
	 bmp280_read_float(&bmp280, &temperature, &pressure, NULL);
 8001654:	2300      	movs	r3, #0
 8001656:	4a18      	ldr	r2, [pc, #96]	@ (80016b8 <main+0xc4>)
 8001658:	4918      	ldr	r1, [pc, #96]	@ (80016bc <main+0xc8>)
 800165a:	4815      	ldr	r0, [pc, #84]	@ (80016b0 <main+0xbc>)
 800165c:	f7ff ff7e 	bl	800155c <bmp280_read_float>

	    Transmit_Sensor_Data(vitesse_vent, temperature, pressure, courant,angle);
 8001660:	4b17      	ldr	r3, [pc, #92]	@ (80016c0 <main+0xcc>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4a15      	ldr	r2, [pc, #84]	@ (80016bc <main+0xc8>)
 8001666:	edd2 7a00 	vldr	s15, [r2]
 800166a:	4a13      	ldr	r2, [pc, #76]	@ (80016b8 <main+0xc4>)
 800166c:	ed92 7a00 	vldr	s14, [r2]
 8001670:	4a14      	ldr	r2, [pc, #80]	@ (80016c4 <main+0xd0>)
 8001672:	edd2 6a00 	vldr	s13, [r2]
 8001676:	4a14      	ldr	r2, [pc, #80]	@ (80016c8 <main+0xd4>)
 8001678:	ed92 6a00 	vldr	s12, [r2]
 800167c:	eef0 1a46 	vmov.f32	s3, s12
 8001680:	eeb0 1a66 	vmov.f32	s2, s13
 8001684:	eef0 0a47 	vmov.f32	s1, s14
 8001688:	eeb0 0a67 	vmov.f32	s0, s15
 800168c:	4618      	mov	r0, r3
 800168e:	f000 fa9f 	bl	8001bd0 <Transmit_Sensor_Data>
	    ReadVibration();
 8001692:	f000 fa6f 	bl	8001b74 <ReadVibration>
	    TransmitVibrationAlert( vibration);
 8001696:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <main+0xd8>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f000 fae2 	bl	8001c64 <TransmitVibrationAlert>
	  HAL_Delay(3000);
 80016a0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80016a4:	f000 fd9c 	bl	80021e0 <HAL_Delay>
	  ReadADCValues(); // lire les valeurs du vent et du courant
 80016a8:	bf00      	nop
 80016aa:	e7cf      	b.n	800164c <main+0x58>
 80016ac:	20000114 	.word	0x20000114
 80016b0:	200001a4 	.word	0x200001a4
 80016b4:	200000c0 	.word	0x200000c0
 80016b8:	200001e8 	.word	0x200001e8
 80016bc:	200001e4 	.word	0x200001e4
 80016c0:	200001d8 	.word	0x200001d8
 80016c4:	200001dc 	.word	0x200001dc
 80016c8:	200001ec 	.word	0x200001ec
 80016cc:	200001e0 	.word	0x200001e0

080016d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b094      	sub	sp, #80	@ 0x50
 80016d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d6:	f107 0320 	add.w	r3, r7, #32
 80016da:	2230      	movs	r2, #48	@ 0x30
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f004 fa24 	bl	8005b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	4b21      	ldr	r3, [pc, #132]	@ (8001780 <SystemClock_Config+0xb0>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fc:	4a20      	ldr	r2, [pc, #128]	@ (8001780 <SystemClock_Config+0xb0>)
 80016fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001702:	6413      	str	r3, [r2, #64]	@ 0x40
 8001704:	4b1e      	ldr	r3, [pc, #120]	@ (8001780 <SystemClock_Config+0xb0>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001710:	2300      	movs	r3, #0
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <SystemClock_Config+0xb4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a1a      	ldr	r2, [pc, #104]	@ (8001784 <SystemClock_Config+0xb4>)
 800171a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b18      	ldr	r3, [pc, #96]	@ (8001784 <SystemClock_Config+0xb4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800172c:	2301      	movs	r3, #1
 800172e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001730:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001734:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001736:	2300      	movs	r3, #0
 8001738:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173a:	f107 0320 	add.w	r3, r7, #32
 800173e:	4618      	mov	r0, r3
 8001740:	f002 ff08 	bl	8004554 <HAL_RCC_OscConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800174a:	f000 fabb 	bl	8001cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800174e:	230f      	movs	r3, #15
 8001750:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001752:	2301      	movs	r3, #1
 8001754:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f003 f96b 	bl	8004a44 <HAL_RCC_ClockConfig>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001774:	f000 faa6 	bl	8001cc4 <Error_Handler>
  }
}
 8001778:	bf00      	nop
 800177a:	3750      	adds	r7, #80	@ 0x50
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40023800 	.word	0x40023800
 8001784:	40007000 	.word	0x40007000

08001788 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08c      	sub	sp, #48	@ 0x30
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800178e:	f107 0320 	add.w	r3, r7, #32
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800179c:	463b      	mov	r3, r7
 800179e:	2220      	movs	r2, #32
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f004 f9c2 	bl	8005b2c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017a8:	4b3c      	ldr	r3, [pc, #240]	@ (800189c <MX_ADC1_Init+0x114>)
 80017aa:	4a3d      	ldr	r2, [pc, #244]	@ (80018a0 <MX_ADC1_Init+0x118>)
 80017ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017ae:	4b3b      	ldr	r3, [pc, #236]	@ (800189c <MX_ADC1_Init+0x114>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017b4:	4b39      	ldr	r3, [pc, #228]	@ (800189c <MX_ADC1_Init+0x114>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80017ba:	4b38      	ldr	r3, [pc, #224]	@ (800189c <MX_ADC1_Init+0x114>)
 80017bc:	2201      	movs	r2, #1
 80017be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017c0:	4b36      	ldr	r3, [pc, #216]	@ (800189c <MX_ADC1_Init+0x114>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017c6:	4b35      	ldr	r3, [pc, #212]	@ (800189c <MX_ADC1_Init+0x114>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017ce:	4b33      	ldr	r3, [pc, #204]	@ (800189c <MX_ADC1_Init+0x114>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017d4:	4b31      	ldr	r3, [pc, #196]	@ (800189c <MX_ADC1_Init+0x114>)
 80017d6:	4a33      	ldr	r2, [pc, #204]	@ (80018a4 <MX_ADC1_Init+0x11c>)
 80017d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017da:	4b30      	ldr	r3, [pc, #192]	@ (800189c <MX_ADC1_Init+0x114>)
 80017dc:	2200      	movs	r2, #0
 80017de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80017e0:	4b2e      	ldr	r3, [pc, #184]	@ (800189c <MX_ADC1_Init+0x114>)
 80017e2:	2202      	movs	r2, #2
 80017e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017e6:	4b2d      	ldr	r3, [pc, #180]	@ (800189c <MX_ADC1_Init+0x114>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017ee:	4b2b      	ldr	r3, [pc, #172]	@ (800189c <MX_ADC1_Init+0x114>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017f4:	4829      	ldr	r0, [pc, #164]	@ (800189c <MX_ADC1_Init+0x114>)
 80017f6:	f000 fd17 	bl	8002228 <HAL_ADC_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8001800:	f000 fa60 	bl	8001cc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8001808:	2301      	movs	r3, #1
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800180c:	2301      	movs	r3, #1
 800180e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001810:	f107 0320 	add.w	r3, r7, #32
 8001814:	4619      	mov	r1, r3
 8001816:	4821      	ldr	r0, [pc, #132]	@ (800189c <MX_ADC1_Init+0x114>)
 8001818:	f000 fff8 	bl	800280c <HAL_ADC_ConfigChannel>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001822:	f000 fa4f 	bl	8001cc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001826:	2301      	movs	r3, #1
 8001828:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 800182a:	2302      	movs	r3, #2
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800182e:	f107 0320 	add.w	r3, r7, #32
 8001832:	4619      	mov	r1, r3
 8001834:	4819      	ldr	r0, [pc, #100]	@ (800189c <MX_ADC1_Init+0x114>)
 8001836:	f000 ffe9 	bl	800280c <HAL_ADC_ConfigChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8001840:	f000 fa40 	bl	8001cc4 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8001844:	2300      	movs	r3, #0
 8001846:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8001848:	2301      	movs	r3, #1
 800184a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800184c:	2302      	movs	r3, #2
 800184e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8001854:	2300      	movs	r3, #0
 8001856:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8001858:	4b13      	ldr	r3, [pc, #76]	@ (80018a8 <MX_ADC1_Init+0x120>)
 800185a:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001868:	463b      	mov	r3, r7
 800186a:	4619      	mov	r1, r3
 800186c:	480b      	ldr	r0, [pc, #44]	@ (800189c <MX_ADC1_Init+0x114>)
 800186e:	f001 fa05 	bl	8002c7c <HAL_ADCEx_InjectedConfigChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8001878:	f000 fa24 	bl	8001cc4 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedRank = 2;
 800187c:	2302      	movs	r3, #2
 800187e:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001880:	463b      	mov	r3, r7
 8001882:	4619      	mov	r1, r3
 8001884:	4805      	ldr	r0, [pc, #20]	@ (800189c <MX_ADC1_Init+0x114>)
 8001886:	f001 f9f9 	bl	8002c7c <HAL_ADCEx_InjectedConfigChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8001890:	f000 fa18 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	3730      	adds	r7, #48	@ 0x30
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000078 	.word	0x20000078
 80018a0:	40012000 	.word	0x40012000
 80018a4:	0f000001 	.word	0x0f000001
 80018a8:	000f0001 	.word	0x000f0001

080018ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018b0:	4b12      	ldr	r3, [pc, #72]	@ (80018fc <MX_I2C1_Init+0x50>)
 80018b2:	4a13      	ldr	r2, [pc, #76]	@ (8001900 <MX_I2C1_Init+0x54>)
 80018b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018b6:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <MX_I2C1_Init+0x50>)
 80018b8:	4a12      	ldr	r2, [pc, #72]	@ (8001904 <MX_I2C1_Init+0x58>)
 80018ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	@ (80018fc <MX_I2C1_Init+0x50>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <MX_I2C1_Init+0x50>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <MX_I2C1_Init+0x50>)
 80018ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d0:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <MX_I2C1_Init+0x50>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018d6:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <MX_I2C1_Init+0x50>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018dc:	4b07      	ldr	r3, [pc, #28]	@ (80018fc <MX_I2C1_Init+0x50>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018e2:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <MX_I2C1_Init+0x50>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018e8:	4804      	ldr	r0, [pc, #16]	@ (80018fc <MX_I2C1_Init+0x50>)
 80018ea:	f001 fe0f 	bl	800350c <HAL_I2C_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018f4:	f000 f9e6 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	200000c0 	.word	0x200000c0
 8001900:	40005400 	.word	0x40005400
 8001904:	000186a0 	.word	0x000186a0

08001908 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08c      	sub	sp, #48	@ 0x30
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	2224      	movs	r2, #36	@ 0x24
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f004 f908 	bl	8005b2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001924:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <MX_TIM2_Init+0xa4>)
 8001926:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800192a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800192c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ac <MX_TIM2_Init+0xa4>)
 800192e:	2200      	movs	r2, #0
 8001930:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001932:	4b1e      	ldr	r3, [pc, #120]	@ (80019ac <MX_TIM2_Init+0xa4>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001938:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <MX_TIM2_Init+0xa4>)
 800193a:	f04f 32ff 	mov.w	r2, #4294967295
 800193e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001940:	4b1a      	ldr	r3, [pc, #104]	@ (80019ac <MX_TIM2_Init+0xa4>)
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001946:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <MX_TIM2_Init+0xa4>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800194c:	2303      	movs	r3, #3
 800194e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001950:	2302      	movs	r3, #2
 8001952:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001954:	2301      	movs	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001958:	2300      	movs	r3, #0
 800195a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001964:	2301      	movs	r3, #1
 8001966:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001968:	2300      	movs	r3, #0
 800196a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	4619      	mov	r1, r3
 8001976:	480d      	ldr	r0, [pc, #52]	@ (80019ac <MX_TIM2_Init+0xa4>)
 8001978:	f003 fa44 	bl	8004e04 <HAL_TIM_Encoder_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001982:	f000 f99f 	bl	8001cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	4619      	mov	r1, r3
 8001992:	4806      	ldr	r0, [pc, #24]	@ (80019ac <MX_TIM2_Init+0xa4>)
 8001994:	f003 fc1c 	bl	80051d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800199e:	f000 f991 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	3730      	adds	r7, #48	@ 0x30
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000114 	.word	0x20000114

080019b0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80019b4:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <MX_USART6_UART_Init+0x4c>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	@ (8001a00 <MX_USART6_UART_Init+0x50>)
 80019b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80019ba:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <MX_USART6_UART_Init+0x4c>)
 80019bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80019c2:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <MX_USART6_UART_Init+0x4c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80019c8:	4b0c      	ldr	r3, [pc, #48]	@ (80019fc <MX_USART6_UART_Init+0x4c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80019ce:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <MX_USART6_UART_Init+0x4c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80019d4:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <MX_USART6_UART_Init+0x4c>)
 80019d6:	220c      	movs	r2, #12
 80019d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019da:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <MX_USART6_UART_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e0:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <MX_USART6_UART_Init+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80019e6:	4805      	ldr	r0, [pc, #20]	@ (80019fc <MX_USART6_UART_Init+0x4c>)
 80019e8:	f003 fc60 	bl	80052ac <HAL_UART_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80019f2:	f000 f967 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	2000015c 	.word	0x2000015c
 8001a00:	40011400 	.word	0x40011400

08001a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
 8001a18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a90 <MX_GPIO_Init+0x8c>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	4a1b      	ldr	r2, [pc, #108]	@ (8001a90 <MX_GPIO_Init+0x8c>)
 8001a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2a:	4b19      	ldr	r3, [pc, #100]	@ (8001a90 <MX_GPIO_Init+0x8c>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <MX_GPIO_Init+0x8c>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	4a14      	ldr	r2, [pc, #80]	@ (8001a90 <MX_GPIO_Init+0x8c>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a46:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <MX_GPIO_Init+0x8c>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <MX_GPIO_Init+0x8c>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	4a0d      	ldr	r2, [pc, #52]	@ (8001a90 <MX_GPIO_Init+0x8c>)
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a62:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <MX_GPIO_Init+0x8c>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : CAPTEUR_DE_VIBRATION_Pin */
  GPIO_InitStruct.Pin = CAPTEUR_DE_VIBRATION_Pin;
 8001a6e:	2304      	movs	r3, #4
 8001a70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CAPTEUR_DE_VIBRATION_GPIO_Port, &GPIO_InitStruct);
 8001a7a:	f107 030c 	add.w	r3, r7, #12
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4804      	ldr	r0, [pc, #16]	@ (8001a94 <MX_GPIO_Init+0x90>)
 8001a82:	f001 fba7 	bl	80031d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a86:	bf00      	nop
 8001a88:	3720      	adds	r7, #32
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40020000 	.word	0x40020000

08001a98 <ReadADCValues>:

/* USER CODE BEGIN 4 */
void ReadADCValues(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0

    HAL_ADC_Start(&hadc1);
 8001a9e:	481e      	ldr	r0, [pc, #120]	@ (8001b18 <ReadADCValues+0x80>)
 8001aa0:	f000 fc06 	bl	80022b0 <HAL_ADC_Start>

    // Attendre la fin de la conversion pour le canal 0
    if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK)
 8001aa4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001aa8:	481b      	ldr	r0, [pc, #108]	@ (8001b18 <ReadADCValues+0x80>)
 8001aaa:	f000 fce8 	bl	800247e <HAL_ADC_PollForConversion>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d106      	bne.n	8001ac2 <ReadADCValues+0x2a>
    {
        // Lire la valeur ADC pour le canal 0 (vitesse du vent)
        vitesse_vent = HAL_ADC_GetValue(&hadc1);
 8001ab4:	4818      	ldr	r0, [pc, #96]	@ (8001b18 <ReadADCValues+0x80>)
 8001ab6:	f000 fe7d 	bl	80027b4 <HAL_ADC_GetValue>
 8001aba:	4603      	mov	r3, r0
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4b17      	ldr	r3, [pc, #92]	@ (8001b1c <ReadADCValues+0x84>)
 8001ac0:	701a      	strb	r2, [r3, #0]
    }

    // Attendre la fin de la conversion pour le canal 1
    if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK)
 8001ac2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ac6:	4814      	ldr	r0, [pc, #80]	@ (8001b18 <ReadADCValues+0x80>)
 8001ac8:	f000 fcd9 	bl	800247e <HAL_ADC_PollForConversion>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d11b      	bne.n	8001b0a <ReadADCValues+0x72>
    {
        // Lire la valeur ADC pour le canal 1 (courant)
        uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 8001ad2:	4811      	ldr	r0, [pc, #68]	@ (8001b18 <ReadADCValues+0x80>)
 8001ad4:	f000 fe6e 	bl	80027b4 <HAL_ADC_GetValue>
 8001ad8:	6078      	str	r0, [r7, #4]
        float voltage = adcValue * (3.3f / 4096.0f); // Convertir la valeur ADC en tension
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	ee07 3a90 	vmov	s15, r3
 8001ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001b20 <ReadADCValues+0x88>
 8001ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aec:	edc7 7a00 	vstr	s15, [r7]
        courant = (voltage - 2.5f) / 0.185f; // Convertir la tension en courant (pour ACS712)
 8001af0:	edd7 7a00 	vldr	s15, [r7]
 8001af4:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8001af8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001afc:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001b24 <ReadADCValues+0x8c>
 8001b00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b04:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <ReadADCValues+0x90>)
 8001b06:	edc3 7a00 	vstr	s15, [r3]
    }


    HAL_ADC_Stop(&hadc1);
 8001b0a:	4803      	ldr	r0, [pc, #12]	@ (8001b18 <ReadADCValues+0x80>)
 8001b0c:	f000 fc84 	bl	8002418 <HAL_ADC_Stop>

}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000078 	.word	0x20000078
 8001b1c:	200001d8 	.word	0x200001d8
 8001b20:	3a533333 	.word	0x3a533333
 8001b24:	3e3d70a4 	.word	0x3e3d70a4
 8001b28:	200001dc 	.word	0x200001dc

08001b2c <ReadAngle>:
void ReadAngle(void){
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
    // Lire la position actuelle de l'encodeur
       int32_t encoder_position = __HAL_TIM_GET_COUNTER(&htim2);
 8001b32:	4b0d      	ldr	r3, [pc, #52]	@ (8001b68 <ReadAngle+0x3c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b38:	607b      	str	r3, [r7, #4]

       // Calcul de l'angle actuel
     angle = ((float)encoder_position / PULSES_PER_REVOLUTION) * 360.0f;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	ee07 3a90 	vmov	s15, r3
 8001b40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b44:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001b48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b4c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001b6c <ReadAngle+0x40>
 8001b50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b54:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <ReadAngle+0x44>)
 8001b56:	edc3 7a00 	vstr	s15, [r3]
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000114 	.word	0x20000114
 8001b6c:	43b40000 	.word	0x43b40000
 8001b70:	200001ec 	.word	0x200001ec

08001b74 <ReadVibration>:

  void ReadVibration(void)
  { static uint32_t lastDebounceTime = 0;
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
  static uint8_t lastState = 0;
  uint8_t currentState = HAL_GPIO_ReadPin(GPIOA, 2);
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	4810      	ldr	r0, [pc, #64]	@ (8001bc0 <ReadVibration+0x4c>)
 8001b7e:	f001 fcad 	bl	80034dc <HAL_GPIO_ReadPin>
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]

  if (currentState != lastState) {
 8001b86:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <ReadVibration+0x50>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	79fa      	ldrb	r2, [r7, #7]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d004      	beq.n	8001b9a <ReadVibration+0x26>
      lastDebounceTime = HAL_GetTick(); // Obtenez le temps actuel
 8001b90:	f000 fb1a 	bl	80021c8 <HAL_GetTick>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc8 <ReadVibration+0x54>)
 8001b98:	6013      	str	r3, [r2, #0]
  }

  if ((HAL_GetTick() - lastDebounceTime) > DEBOUNCE_DELAY) {
 8001b9a:	f000 fb15 	bl	80021c8 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <ReadVibration+0x54>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b32      	cmp	r3, #50	@ 0x32
 8001ba8:	d902      	bls.n	8001bb0 <ReadVibration+0x3c>
      // Considérez l'état stable uniquement si le délai de debounce est écoulé
      vibration = currentState;
 8001baa:	4a08      	ldr	r2, [pc, #32]	@ (8001bcc <ReadVibration+0x58>)
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	7013      	strb	r3, [r2, #0]
  }

  lastState = currentState;}
 8001bb0:	4a04      	ldr	r2, [pc, #16]	@ (8001bc4 <ReadVibration+0x50>)
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	7013      	strb	r3, [r2, #0]
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40020000 	.word	0x40020000
 8001bc4:	200001f0 	.word	0x200001f0
 8001bc8:	200001f4 	.word	0x200001f4
 8001bcc:	200001e0 	.word	0x200001e0

08001bd0 <Transmit_Sensor_Data>:
  void Transmit_Sensor_Data(uint8_t vitesse_vent, float temperature, float pressure, float courant, float angle)
  {
 8001bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bd4:	b0a9      	sub	sp, #164	@ 0xa4
 8001bd6:	af08      	add	r7, sp, #32
 8001bd8:	4603      	mov	r3, r0
 8001bda:	ed87 0a04 	vstr	s0, [r7, #16]
 8001bde:	edc7 0a03 	vstr	s1, [r7, #12]
 8001be2:	ed87 1a02 	vstr	s2, [r7, #8]
 8001be6:	edc7 1a01 	vstr	s3, [r7, #4]
 8001bea:	75fb      	strb	r3, [r7, #23]
      char data_buffer[100];  // Taille du buffer à ajuster selon la quantité de données à transmettre

      // Formater les données sous forme de chaîne de caractères
      snprintf(data_buffer, sizeof(data_buffer), "VALWind:%d,Temp:%.2f,Press:%.2f,Current:%.2f,Angle:%.2f\n",
 8001bec:	7dfe      	ldrb	r6, [r7, #23]
 8001bee:	6938      	ldr	r0, [r7, #16]
 8001bf0:	f7fe fcb2 	bl	8000558 <__aeabi_f2d>
 8001bf4:	4604      	mov	r4, r0
 8001bf6:	460d      	mov	r5, r1
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f7fe fcad 	bl	8000558 <__aeabi_f2d>
 8001bfe:	4680      	mov	r8, r0
 8001c00:	4689      	mov	r9, r1
 8001c02:	68b8      	ldr	r0, [r7, #8]
 8001c04:	f7fe fca8 	bl	8000558 <__aeabi_f2d>
 8001c08:	4682      	mov	sl, r0
 8001c0a:	468b      	mov	fp, r1
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7fe fca3 	bl	8000558 <__aeabi_f2d>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	f107 001c 	add.w	r0, r7, #28
 8001c1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001c1e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001c22:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001c26:	e9cd 4500 	strd	r4, r5, [sp]
 8001c2a:	4633      	mov	r3, r6
 8001c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c5c <Transmit_Sensor_Data+0x8c>)
 8001c2e:	2164      	movs	r1, #100	@ 0x64
 8001c30:	f003 ff48 	bl	8005ac4 <sniprintf>
               vitesse_vent, temperature, pressure, courant, angle);

      // Transmettre les données via UART
      HAL_UART_Transmit(&huart6, (uint8_t*)data_buffer, strlen(data_buffer), HAL_MAX_DELAY);
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fad1 	bl	80001e0 <strlen>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	f107 011c 	add.w	r1, r7, #28
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4a:	4805      	ldr	r0, [pc, #20]	@ (8001c60 <Transmit_Sensor_Data+0x90>)
 8001c4c:	f003 fb7e 	bl	800534c <HAL_UART_Transmit>
  }
 8001c50:	bf00      	nop
 8001c52:	3784      	adds	r7, #132	@ 0x84
 8001c54:	46bd      	mov	sp, r7
 8001c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c5a:	bf00      	nop
 8001c5c:	08006444 	.word	0x08006444
 8001c60:	2000015c 	.word	0x2000015c

08001c64 <TransmitVibrationAlert>:

  void TransmitVibrationAlert(uint8_t vibration) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b090      	sub	sp, #64	@ 0x40
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
      char vibration_buffer[50];  // Taille du buffer à ajuster selon la quantité de données à transmettre

      // Formater le message d'alerte de vibration
      if (vibration == 1) {
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d107      	bne.n	8001c84 <TransmitVibrationAlert+0x20>
          snprintf(vibration_buffer, sizeof(vibration_buffer), "VIB Vibration détectée\n");
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb8 <TransmitVibrationAlert+0x54>)
 8001c7a:	2132      	movs	r1, #50	@ 0x32
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f003 ff21 	bl	8005ac4 <sniprintf>
 8001c82:	e006      	b.n	8001c92 <TransmitVibrationAlert+0x2e>
      } else {
          snprintf(vibration_buffer, sizeof(vibration_buffer), "VIB Vibration arrêtée\n");
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	4a0c      	ldr	r2, [pc, #48]	@ (8001cbc <TransmitVibrationAlert+0x58>)
 8001c8a:	2132      	movs	r1, #50	@ 0x32
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f003 ff19 	bl	8005ac4 <sniprintf>
      }

      // Transmettre l'alerte via UART
      HAL_UART_Transmit(&huart6, (uint8_t*)vibration_buffer, strlen(vibration_buffer), HAL_MAX_DELAY);
 8001c92:	f107 030c 	add.w	r3, r7, #12
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe faa2 	bl	80001e0 <strlen>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	f107 010c 	add.w	r1, r7, #12
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca8:	4805      	ldr	r0, [pc, #20]	@ (8001cc0 <TransmitVibrationAlert+0x5c>)
 8001caa:	f003 fb4f 	bl	800534c <HAL_UART_Transmit>
  }
 8001cae:	bf00      	nop
 8001cb0:	3740      	adds	r7, #64	@ 0x40
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	08006480 	.word	0x08006480
 8001cbc:	0800649c 	.word	0x0800649c
 8001cc0:	2000015c 	.word	0x2000015c

08001cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc8:	b672      	cpsid	i
}
 8001cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <Error_Handler+0x8>

08001cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	4b10      	ldr	r3, [pc, #64]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cde:	4a0f      	ldr	r2, [pc, #60]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001ce0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	603b      	str	r3, [r7, #0]
 8001cf6:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	4a08      	ldr	r2, [pc, #32]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d02:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800

08001d20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	@ 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001dac <HAL_ADC_MspInit+0x8c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d12f      	bne.n	8001da2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	4b1a      	ldr	r3, [pc, #104]	@ (8001db0 <HAL_ADC_MspInit+0x90>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4a:	4a19      	ldr	r2, [pc, #100]	@ (8001db0 <HAL_ADC_MspInit+0x90>)
 8001d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d52:	4b17      	ldr	r3, [pc, #92]	@ (8001db0 <HAL_ADC_MspInit+0x90>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <HAL_ADC_MspInit+0x90>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	4a12      	ldr	r2, [pc, #72]	@ (8001db0 <HAL_ADC_MspInit+0x90>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6e:	4b10      	ldr	r3, [pc, #64]	@ (8001db0 <HAL_ADC_MspInit+0x90>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CAPTEUR_DE_VENT_Pin|CAPTEUR_DE_COURANT_Pin;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d86:	f107 0314 	add.w	r3, r7, #20
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4809      	ldr	r0, [pc, #36]	@ (8001db4 <HAL_ADC_MspInit+0x94>)
 8001d8e:	f001 fa21 	bl	80031d4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2100      	movs	r1, #0
 8001d96:	2012      	movs	r0, #18
 8001d98:	f001 f9e5 	bl	8003166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d9c:	2012      	movs	r0, #18
 8001d9e:	f001 f9fe 	bl	800319e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001da2:	bf00      	nop
 8001da4:	3728      	adds	r7, #40	@ 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40012000 	.word	0x40012000
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020000 	.word	0x40020000

08001db8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	@ 0x28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a19      	ldr	r2, [pc, #100]	@ (8001e3c <HAL_I2C_MspInit+0x84>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d12b      	bne.n	8001e32 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	4b18      	ldr	r3, [pc, #96]	@ (8001e40 <HAL_I2C_MspInit+0x88>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	4a17      	ldr	r2, [pc, #92]	@ (8001e40 <HAL_I2C_MspInit+0x88>)
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dea:	4b15      	ldr	r3, [pc, #84]	@ (8001e40 <HAL_I2C_MspInit+0x88>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = CAPTEUR_TEMPERATURE_PRESSION_Pin|CAPTEUR_TEMPERATURE_PRESSION___Pin;
 8001df6:	23c0      	movs	r3, #192	@ 0xc0
 8001df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dfa:	2312      	movs	r3, #18
 8001dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e02:	2303      	movs	r3, #3
 8001e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e06:	2304      	movs	r3, #4
 8001e08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	4619      	mov	r1, r3
 8001e10:	480c      	ldr	r0, [pc, #48]	@ (8001e44 <HAL_I2C_MspInit+0x8c>)
 8001e12:	f001 f9df 	bl	80031d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <HAL_I2C_MspInit+0x88>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1e:	4a08      	ldr	r2, [pc, #32]	@ (8001e40 <HAL_I2C_MspInit+0x88>)
 8001e20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e26:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <HAL_I2C_MspInit+0x88>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e32:	bf00      	nop
 8001e34:	3728      	adds	r7, #40	@ 0x28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40005400 	.word	0x40005400
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40020400 	.word	0x40020400

08001e48 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	@ 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e68:	d149      	bne.n	8001efe <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	4b26      	ldr	r3, [pc, #152]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	4a25      	ldr	r2, [pc, #148]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e7a:	4b23      	ldr	r3, [pc, #140]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e96:	4b1c      	ldr	r3, [pc, #112]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	4b18      	ldr	r3, [pc, #96]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	4a17      	ldr	r2, [pc, #92]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb2:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	480c      	ldr	r0, [pc, #48]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0xc4>)
 8001eda:	f001 f97b 	bl	80031d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ede:	2308      	movs	r3, #8
 8001ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4805      	ldr	r0, [pc, #20]	@ (8001f10 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001efa:	f001 f96b 	bl	80031d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001efe:	bf00      	nop
 8001f00:	3728      	adds	r7, #40	@ 0x28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	40020400 	.word	0x40020400

08001f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	@ 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a19      	ldr	r2, [pc, #100]	@ (8001f98 <HAL_UART_MspInit+0x84>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d12c      	bne.n	8001f90 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	4b18      	ldr	r3, [pc, #96]	@ (8001f9c <HAL_UART_MspInit+0x88>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	4a17      	ldr	r2, [pc, #92]	@ (8001f9c <HAL_UART_MspInit+0x88>)
 8001f40:	f043 0320 	orr.w	r3, r3, #32
 8001f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f46:	4b15      	ldr	r3, [pc, #84]	@ (8001f9c <HAL_UART_MspInit+0x88>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <HAL_UART_MspInit+0x88>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	4a10      	ldr	r2, [pc, #64]	@ (8001f9c <HAL_UART_MspInit+0x88>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f62:	4b0e      	ldr	r3, [pc, #56]	@ (8001f9c <HAL_UART_MspInit+0x88>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f6e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f74:	2302      	movs	r3, #2
 8001f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f80:	2308      	movs	r3, #8
 8001f82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4805      	ldr	r0, [pc, #20]	@ (8001fa0 <HAL_UART_MspInit+0x8c>)
 8001f8c:	f001 f922 	bl	80031d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001f90:	bf00      	nop
 8001f92:	3728      	adds	r7, #40	@ 0x28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40011400 	.word	0x40011400
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40020000 	.word	0x40020000

08001fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <NMI_Handler+0x4>

08001fac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <HardFault_Handler+0x4>

08001fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <MemManage_Handler+0x4>

08001fbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <BusFault_Handler+0x4>

08001fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <UsageFault_Handler+0x4>

08001fcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ffa:	f000 f8d1 	bl	80021a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002008:	4802      	ldr	r0, [pc, #8]	@ (8002014 <ADC_IRQHandler+0x10>)
 800200a:	f000 fac3 	bl	8002594 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000078 	.word	0x20000078

08002018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002020:	4a14      	ldr	r2, [pc, #80]	@ (8002074 <_sbrk+0x5c>)
 8002022:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <_sbrk+0x60>)
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800202c:	4b13      	ldr	r3, [pc, #76]	@ (800207c <_sbrk+0x64>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d102      	bne.n	800203a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002034:	4b11      	ldr	r3, [pc, #68]	@ (800207c <_sbrk+0x64>)
 8002036:	4a12      	ldr	r2, [pc, #72]	@ (8002080 <_sbrk+0x68>)
 8002038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800203a:	4b10      	ldr	r3, [pc, #64]	@ (800207c <_sbrk+0x64>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	429a      	cmp	r2, r3
 8002046:	d207      	bcs.n	8002058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002048:	f003 fd78 	bl	8005b3c <__errno>
 800204c:	4603      	mov	r3, r0
 800204e:	220c      	movs	r2, #12
 8002050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002052:	f04f 33ff 	mov.w	r3, #4294967295
 8002056:	e009      	b.n	800206c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002058:	4b08      	ldr	r3, [pc, #32]	@ (800207c <_sbrk+0x64>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800205e:	4b07      	ldr	r3, [pc, #28]	@ (800207c <_sbrk+0x64>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	4a05      	ldr	r2, [pc, #20]	@ (800207c <_sbrk+0x64>)
 8002068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800206a:	68fb      	ldr	r3, [r7, #12]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20020000 	.word	0x20020000
 8002078:	00000400 	.word	0x00000400
 800207c:	200001f8 	.word	0x200001f8
 8002080:	20000348 	.word	0x20000348

08002084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002088:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <SystemInit+0x20>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208e:	4a05      	ldr	r2, [pc, #20]	@ (80020a4 <SystemInit+0x20>)
 8002090:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002094:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020ac:	f7ff ffea 	bl	8002084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020b0:	480c      	ldr	r0, [pc, #48]	@ (80020e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020b2:	490d      	ldr	r1, [pc, #52]	@ (80020e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020b4:	4a0d      	ldr	r2, [pc, #52]	@ (80020ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b8:	e002      	b.n	80020c0 <LoopCopyDataInit>

080020ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020be:	3304      	adds	r3, #4

080020c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c4:	d3f9      	bcc.n	80020ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020c6:	4a0a      	ldr	r2, [pc, #40]	@ (80020f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020c8:	4c0a      	ldr	r4, [pc, #40]	@ (80020f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020cc:	e001      	b.n	80020d2 <LoopFillZerobss>

080020ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d0:	3204      	adds	r2, #4

080020d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d4:	d3fb      	bcc.n	80020ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020d6:	f003 fd37 	bl	8005b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020da:	f7ff fa8b 	bl	80015f4 <main>
  bx  lr    
 80020de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80020ec:	08006514 	.word	0x08006514
  ldr r2, =_sbss
 80020f0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80020f4:	20000348 	.word	0x20000348

080020f8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020f8:	e7fe      	b.n	80020f8 <DMA1_Stream0_IRQHandler>
	...

080020fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002100:	4b0e      	ldr	r3, [pc, #56]	@ (800213c <HAL_Init+0x40>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0d      	ldr	r2, [pc, #52]	@ (800213c <HAL_Init+0x40>)
 8002106:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800210a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800210c:	4b0b      	ldr	r3, [pc, #44]	@ (800213c <HAL_Init+0x40>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0a      	ldr	r2, [pc, #40]	@ (800213c <HAL_Init+0x40>)
 8002112:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002116:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002118:	4b08      	ldr	r3, [pc, #32]	@ (800213c <HAL_Init+0x40>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a07      	ldr	r2, [pc, #28]	@ (800213c <HAL_Init+0x40>)
 800211e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002122:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002124:	2003      	movs	r0, #3
 8002126:	f001 f813 	bl	8003150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800212a:	200f      	movs	r0, #15
 800212c:	f000 f808 	bl	8002140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002130:	f7ff fdce 	bl	8001cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40023c00 	.word	0x40023c00

08002140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002148:	4b12      	ldr	r3, [pc, #72]	@ (8002194 <HAL_InitTick+0x54>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <HAL_InitTick+0x58>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	4619      	mov	r1, r3
 8002152:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002156:	fbb3 f3f1 	udiv	r3, r3, r1
 800215a:	fbb2 f3f3 	udiv	r3, r2, r3
 800215e:	4618      	mov	r0, r3
 8002160:	f001 f82b 	bl	80031ba <HAL_SYSTICK_Config>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e00e      	b.n	800218c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b0f      	cmp	r3, #15
 8002172:	d80a      	bhi.n	800218a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002174:	2200      	movs	r2, #0
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	f04f 30ff 	mov.w	r0, #4294967295
 800217c:	f000 fff3 	bl	8003166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002180:	4a06      	ldr	r2, [pc, #24]	@ (800219c <HAL_InitTick+0x5c>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	e000      	b.n	800218c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
}
 800218c:	4618      	mov	r0, r3
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000000 	.word	0x20000000
 8002198:	20000008 	.word	0x20000008
 800219c:	20000004 	.word	0x20000004

080021a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021a4:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <HAL_IncTick+0x20>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <HAL_IncTick+0x24>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	4a04      	ldr	r2, [pc, #16]	@ (80021c4 <HAL_IncTick+0x24>)
 80021b2:	6013      	str	r3, [r2, #0]
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20000008 	.word	0x20000008
 80021c4:	200001fc 	.word	0x200001fc

080021c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return uwTick;
 80021cc:	4b03      	ldr	r3, [pc, #12]	@ (80021dc <HAL_GetTick+0x14>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	200001fc 	.word	0x200001fc

080021e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e8:	f7ff ffee 	bl	80021c8 <HAL_GetTick>
 80021ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f8:	d005      	beq.n	8002206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002224 <HAL_Delay+0x44>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4413      	add	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002206:	bf00      	nop
 8002208:	f7ff ffde 	bl	80021c8 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	429a      	cmp	r2, r3
 8002216:	d8f7      	bhi.n	8002208 <HAL_Delay+0x28>
  {
  }
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000008 	.word	0x20000008

08002228 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e033      	b.n	80022a6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff fd6a 	bl	8001d20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	2b00      	cmp	r3, #0
 8002264:	d118      	bne.n	8002298 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800226e:	f023 0302 	bic.w	r3, r3, #2
 8002272:	f043 0202 	orr.w	r2, r3, #2
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fbf8 	bl	8002a70 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	f023 0303 	bic.w	r3, r3, #3
 800228e:	f043 0201 	orr.w	r2, r3, #1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	@ 0x40
 8002296:	e001      	b.n	800229c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_ADC_Start+0x1a>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e097      	b.n	80023fa <HAL_ADC_Start+0x14a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d018      	beq.n	8002312 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022f0:	4b45      	ldr	r3, [pc, #276]	@ (8002408 <HAL_ADC_Start+0x158>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a45      	ldr	r2, [pc, #276]	@ (800240c <HAL_ADC_Start+0x15c>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	0c9a      	lsrs	r2, r3, #18
 80022fc:	4613      	mov	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4413      	add	r3, r2
 8002302:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002304:	e002      	b.n	800230c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	3b01      	subs	r3, #1
 800230a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f9      	bne.n	8002306 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b01      	cmp	r3, #1
 800231e:	d15f      	bne.n	80023e0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002324:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800233e:	2b00      	cmp	r3, #0
 8002340:	d007      	beq.n	8002352 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800234a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800235a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800235e:	d106      	bne.n	800236e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002364:	f023 0206 	bic.w	r2, r3, #6
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	645a      	str	r2, [r3, #68]	@ 0x44
 800236c:	e002      	b.n	8002374 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800237c:	4b24      	ldr	r3, [pc, #144]	@ (8002410 <HAL_ADC_Start+0x160>)
 800237e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002388:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10f      	bne.n	80023b6 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d129      	bne.n	80023f8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	e020      	b.n	80023f8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a16      	ldr	r2, [pc, #88]	@ (8002414 <HAL_ADC_Start+0x164>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d11b      	bne.n	80023f8 <HAL_ADC_Start+0x148>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d114      	bne.n	80023f8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80023dc:	609a      	str	r2, [r3, #8]
 80023de:	e00b      	b.n	80023f8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e4:	f043 0210 	orr.w	r2, r3, #16
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f0:	f043 0201 	orr.w	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20000000 	.word	0x20000000
 800240c:	431bde83 	.word	0x431bde83
 8002410:	40012300 	.word	0x40012300
 8002414:	40012000 	.word	0x40012000

08002418 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_ADC_Stop+0x16>
 800242a:	2302      	movs	r3, #2
 800242c:	e021      	b.n	8002472 <HAL_ADC_Stop+0x5a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0201 	bic.w	r2, r2, #1
 8002444:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	d109      	bne.n	8002468 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002458:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	f043 0201 	orr.w	r2, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800249a:	d113      	bne.n	80024c4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024aa:	d10b      	bne.n	80024c4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b0:	f043 0220 	orr.w	r2, r3, #32
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e063      	b.n	800258c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80024c4:	f7ff fe80 	bl	80021c8 <HAL_GetTick>
 80024c8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024ca:	e021      	b.n	8002510 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d2:	d01d      	beq.n	8002510 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d007      	beq.n	80024ea <HAL_ADC_PollForConversion+0x6c>
 80024da:	f7ff fe75 	bl	80021c8 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d212      	bcs.n	8002510 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d00b      	beq.n	8002510 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fc:	f043 0204 	orr.w	r2, r3, #4
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e03d      	b.n	800258c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b02      	cmp	r3, #2
 800251c:	d1d6      	bne.n	80024cc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f06f 0212 	mvn.w	r2, #18
 8002526:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d123      	bne.n	800258a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002546:	2b00      	cmp	r3, #0
 8002548:	d11f      	bne.n	800258a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002550:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002554:	2b00      	cmp	r3, #0
 8002556:	d006      	beq.n	8002566 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002562:	2b00      	cmp	r3, #0
 8002564:	d111      	bne.n	800258a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d105      	bne.n	800258a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	2300      	movs	r3, #0
 80025a2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d049      	beq.n	800265e <HAL_ADC_IRQHandler+0xca>
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d046      	beq.n	800265e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d105      	bne.n	80025e8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d12b      	bne.n	800264e <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d127      	bne.n	800264e <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002604:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002608:	2b00      	cmp	r3, #0
 800260a:	d006      	beq.n	800261a <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002616:	2b00      	cmp	r3, #0
 8002618:	d119      	bne.n	800264e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0220 	bic.w	r2, r2, #32
 8002628:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d105      	bne.n	800264e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	f043 0201 	orr.w	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f8bd 	bl	80027ce <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0212 	mvn.w	r2, #18
 800265c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800266c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d057      	beq.n	8002724 <HAL_ADC_IRQHandler+0x190>
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d054      	beq.n	8002724 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	2b00      	cmp	r3, #0
 8002684:	d105      	bne.n	8002692 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d139      	bne.n	8002714 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d006      	beq.n	80026bc <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d12b      	bne.n	8002714 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d124      	bne.n	8002714 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d11d      	bne.n	8002714 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d119      	bne.n	8002714 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026ee:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d105      	bne.n	8002714 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	f043 0201 	orr.w	r2, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 faa7 	bl	8002c68 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f06f 020c 	mvn.w	r2, #12
 8002722:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002732:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d017      	beq.n	800276a <HAL_ADC_IRQHandler+0x1d6>
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d014      	beq.n	800276a <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b01      	cmp	r3, #1
 800274c:	d10d      	bne.n	800276a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f841 	bl	80027e2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 0201 	mvn.w	r2, #1
 8002768:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f003 0320 	and.w	r3, r3, #32
 8002770:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002778:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d015      	beq.n	80027ac <HAL_ADC_IRQHandler+0x218>
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d012      	beq.n	80027ac <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278a:	f043 0202 	orr.w	r2, r3, #2
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f06f 0220 	mvn.w	r2, #32
 800279a:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f82a 	bl	80027f6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f06f 0220 	mvn.w	r2, #32
 80027aa:	601a      	str	r2, [r3, #0]
  }
}
 80027ac:	bf00      	nop
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x1c>
 8002824:	2302      	movs	r3, #2
 8002826:	e113      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x244>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b09      	cmp	r3, #9
 8002836:	d925      	bls.n	8002884 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68d9      	ldr	r1, [r3, #12]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	4613      	mov	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	3b1e      	subs	r3, #30
 800284e:	2207      	movs	r2, #7
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43da      	mvns	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	400a      	ands	r2, r1
 800285c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68d9      	ldr	r1, [r3, #12]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	b29b      	uxth	r3, r3
 800286e:	4618      	mov	r0, r3
 8002870:	4603      	mov	r3, r0
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4403      	add	r3, r0
 8002876:	3b1e      	subs	r3, #30
 8002878:	409a      	lsls	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	60da      	str	r2, [r3, #12]
 8002882:	e022      	b.n	80028ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6919      	ldr	r1, [r3, #16]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	b29b      	uxth	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	4613      	mov	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4413      	add	r3, r2
 8002898:	2207      	movs	r2, #7
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43da      	mvns	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	400a      	ands	r2, r1
 80028a6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6919      	ldr	r1, [r3, #16]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	4618      	mov	r0, r3
 80028ba:	4603      	mov	r3, r0
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	4403      	add	r3, r0
 80028c0:	409a      	lsls	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b06      	cmp	r3, #6
 80028d0:	d824      	bhi.n	800291c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	3b05      	subs	r3, #5
 80028e4:	221f      	movs	r2, #31
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43da      	mvns	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	400a      	ands	r2, r1
 80028f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	4618      	mov	r0, r3
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	3b05      	subs	r3, #5
 800290e:	fa00 f203 	lsl.w	r2, r0, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	635a      	str	r2, [r3, #52]	@ 0x34
 800291a:	e04c      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b0c      	cmp	r3, #12
 8002922:	d824      	bhi.n	800296e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	3b23      	subs	r3, #35	@ 0x23
 8002936:	221f      	movs	r2, #31
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43da      	mvns	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	400a      	ands	r2, r1
 8002944:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	b29b      	uxth	r3, r3
 8002952:	4618      	mov	r0, r3
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	3b23      	subs	r3, #35	@ 0x23
 8002960:	fa00 f203 	lsl.w	r2, r0, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	631a      	str	r2, [r3, #48]	@ 0x30
 800296c:	e023      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	3b41      	subs	r3, #65	@ 0x41
 8002980:	221f      	movs	r2, #31
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43da      	mvns	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	400a      	ands	r2, r1
 800298e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	b29b      	uxth	r3, r3
 800299c:	4618      	mov	r0, r3
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	3b41      	subs	r3, #65	@ 0x41
 80029aa:	fa00 f203 	lsl.w	r2, r0, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029b6:	4b29      	ldr	r3, [pc, #164]	@ (8002a5c <HAL_ADC_ConfigChannel+0x250>)
 80029b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a28      	ldr	r2, [pc, #160]	@ (8002a60 <HAL_ADC_ConfigChannel+0x254>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d10f      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x1d8>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b12      	cmp	r3, #18
 80029ca:	d10b      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002a60 <HAL_ADC_ConfigChannel+0x254>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d12b      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x23a>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a64 <HAL_ADC_ConfigChannel+0x258>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d003      	beq.n	8002a00 <HAL_ADC_ConfigChannel+0x1f4>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b11      	cmp	r3, #17
 80029fe:	d122      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a11      	ldr	r2, [pc, #68]	@ (8002a64 <HAL_ADC_ConfigChannel+0x258>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d111      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a22:	4b11      	ldr	r3, [pc, #68]	@ (8002a68 <HAL_ADC_ConfigChannel+0x25c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a11      	ldr	r2, [pc, #68]	@ (8002a6c <HAL_ADC_ConfigChannel+0x260>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	0c9a      	lsrs	r2, r3, #18
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a38:	e002      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f9      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	40012300 	.word	0x40012300
 8002a60:	40012000 	.word	0x40012000
 8002a64:	10000012 	.word	0x10000012
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	431bde83 	.word	0x431bde83

08002a70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a78:	4b79      	ldr	r3, [pc, #484]	@ (8002c60 <ADC_Init+0x1f0>)
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	431a      	orrs	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002aa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6859      	ldr	r1, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	021a      	lsls	r2, r3, #8
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002ac8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6899      	ldr	r1, [r3, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b02:	4a58      	ldr	r2, [pc, #352]	@ (8002c64 <ADC_Init+0x1f4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d022      	beq.n	8002b4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6899      	ldr	r1, [r3, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6899      	ldr	r1, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	e00f      	b.n	8002b6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b6c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0202 	bic.w	r2, r2, #2
 8002b7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6899      	ldr	r1, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	7e1b      	ldrb	r3, [r3, #24]
 8002b88:	005a      	lsls	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d01b      	beq.n	8002bd4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002baa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002bba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6859      	ldr	r1, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	035a      	lsls	r2, r3, #13
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	e007      	b.n	8002be4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002be2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	051a      	lsls	r2, r3, #20
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6899      	ldr	r1, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c26:	025a      	lsls	r2, r3, #9
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6899      	ldr	r1, [r3, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	029a      	lsls	r2, r3, #10
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	609a      	str	r2, [r3, #8]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	40012300 	.word	0x40012300
 8002c64:	0f000001 	.word	0x0f000001

08002c68 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8002c90:	2302      	movs	r3, #2
 8002c92:	e17e      	b.n	8002f92 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b09      	cmp	r3, #9
 8002ca2:	d925      	bls.n	8002cf0 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68d9      	ldr	r1, [r3, #12]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3b1e      	subs	r3, #30
 8002cba:	2207      	movs	r2, #7
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43da      	mvns	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	400a      	ands	r2, r1
 8002cc8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68d9      	ldr	r1, [r3, #12]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	4618      	mov	r0, r3
 8002cdc:	4603      	mov	r3, r0
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	4403      	add	r3, r0
 8002ce2:	3b1e      	subs	r3, #30
 8002ce4:	409a      	lsls	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	e022      	b.n	8002d36 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6919      	ldr	r1, [r3, #16]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4613      	mov	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	2207      	movs	r2, #7
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43da      	mvns	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	400a      	ands	r2, r1
 8002d12:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6919      	ldr	r1, [r3, #16]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	4618      	mov	r0, r3
 8002d26:	4603      	mov	r3, r0
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4403      	add	r3, r0
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002d44:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	3b01      	subs	r3, #1
 8002d52:	051a      	lsls	r2, r3, #20
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	3303      	adds	r3, #3
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	221f      	movs	r2, #31
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43da      	mvns	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	400a      	ands	r2, r1
 8002d8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	3303      	adds	r3, #3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	461a      	mov	r2, r3
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	fa00 f203 	lsl.w	r2, r0, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	4a75      	ldr	r2, [pc, #468]	@ (8002fa0 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d022      	beq.n	8002e14 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8002ddc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6899      	ldr	r1, [r3, #8]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	699a      	ldr	r2, [r3, #24]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002dfe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6899      	ldr	r1, [r3, #8]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	69da      	ldr	r2, [r3, #28]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	609a      	str	r2, [r3, #8]
 8002e12:	e00f      	b.n	8002e34 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8002e22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002e32:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	7d5b      	ldrb	r3, [r3, #21]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e4a:	605a      	str	r2, [r3, #4]
 8002e4c:	e007      	b.n	8002e5e <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e5c:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	7d1b      	ldrb	r3, [r3, #20]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d008      	beq.n	8002e78 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	e007      	b.n	8002e88 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e86:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d02e      	beq.n	8002eee <HAL_ADCEx_InjectedConfigChannel+0x272>
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d840      	bhi.n	8002f16 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d002      	beq.n	8002e9e <HAL_ADCEx_InjectedConfigChannel+0x222>
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d014      	beq.n	8002ec6 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8002e9c:	e03b      	b.n	8002f16 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002eac:	f023 030f 	bic.w	r3, r3, #15
 8002eb0:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6959      	ldr	r1, [r3, #20]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	615a      	str	r2, [r3, #20]
      break;
 8002ec4:	e03b      	b.n	8002f3e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002ed4:	f023 030f 	bic.w	r3, r3, #15
 8002ed8:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6999      	ldr	r1, [r3, #24]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	619a      	str	r2, [r3, #24]
      break;
 8002eec:	e027      	b.n	8002f3e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002efc:	f023 030f 	bic.w	r3, r3, #15
 8002f00:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	69d9      	ldr	r1, [r3, #28]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	61da      	str	r2, [r3, #28]
      break;
 8002f14:	e013      	b.n	8002f3e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002f24:	f023 030f 	bic.w	r3, r3, #15
 8002f28:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6a19      	ldr	r1, [r3, #32]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	621a      	str	r2, [r3, #32]
      break;
 8002f3c:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f3e:	4b19      	ldr	r3, [pc, #100]	@ (8002fa4 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002f40:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a18      	ldr	r2, [pc, #96]	@ (8002fa8 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d109      	bne.n	8002f60 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b12      	cmp	r3, #18
 8002f52:	d105      	bne.n	8002f60 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a10      	ldr	r2, [pc, #64]	@ (8002fa8 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d10e      	bne.n	8002f88 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a0f      	ldr	r2, [pc, #60]	@ (8002fac <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d003      	beq.n	8002f7c <HAL_ADCEx_InjectedConfigChannel+0x300>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b11      	cmp	r3, #17
 8002f7a:	d105      	bne.n	8002f88 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	000f0001 	.word	0x000f0001
 8002fa4:	40012300 	.word	0x40012300
 8002fa8:	40012000 	.word	0x40012000
 8002fac:	10000012 	.word	0x10000012

08002fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fe2:	4a04      	ldr	r2, [pc, #16]	@ (8002ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	60d3      	str	r3, [r2, #12]
}
 8002fe8:	bf00      	nop
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ffc:	4b04      	ldr	r3, [pc, #16]	@ (8003010 <__NVIC_GetPriorityGrouping+0x18>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	0a1b      	lsrs	r3, r3, #8
 8003002:	f003 0307 	and.w	r3, r3, #7
}
 8003006:	4618      	mov	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	2b00      	cmp	r3, #0
 8003024:	db0b      	blt.n	800303e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	f003 021f 	and.w	r2, r3, #31
 800302c:	4907      	ldr	r1, [pc, #28]	@ (800304c <__NVIC_EnableIRQ+0x38>)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	2001      	movs	r0, #1
 8003036:	fa00 f202 	lsl.w	r2, r0, r2
 800303a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	e000e100 	.word	0xe000e100

08003050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	6039      	str	r1, [r7, #0]
 800305a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003060:	2b00      	cmp	r3, #0
 8003062:	db0a      	blt.n	800307a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	b2da      	uxtb	r2, r3
 8003068:	490c      	ldr	r1, [pc, #48]	@ (800309c <__NVIC_SetPriority+0x4c>)
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	0112      	lsls	r2, r2, #4
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	440b      	add	r3, r1
 8003074:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003078:	e00a      	b.n	8003090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	b2da      	uxtb	r2, r3
 800307e:	4908      	ldr	r1, [pc, #32]	@ (80030a0 <__NVIC_SetPriority+0x50>)
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	3b04      	subs	r3, #4
 8003088:	0112      	lsls	r2, r2, #4
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	440b      	add	r3, r1
 800308e:	761a      	strb	r2, [r3, #24]
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	e000e100 	.word	0xe000e100
 80030a0:	e000ed00 	.word	0xe000ed00

080030a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b089      	sub	sp, #36	@ 0x24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f1c3 0307 	rsb	r3, r3, #7
 80030be:	2b04      	cmp	r3, #4
 80030c0:	bf28      	it	cs
 80030c2:	2304      	movcs	r3, #4
 80030c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3304      	adds	r3, #4
 80030ca:	2b06      	cmp	r3, #6
 80030cc:	d902      	bls.n	80030d4 <NVIC_EncodePriority+0x30>
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	3b03      	subs	r3, #3
 80030d2:	e000      	b.n	80030d6 <NVIC_EncodePriority+0x32>
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d8:	f04f 32ff 	mov.w	r2, #4294967295
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43da      	mvns	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	401a      	ands	r2, r3
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030ec:	f04f 31ff 	mov.w	r1, #4294967295
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	fa01 f303 	lsl.w	r3, r1, r3
 80030f6:	43d9      	mvns	r1, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030fc:	4313      	orrs	r3, r2
         );
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3724      	adds	r7, #36	@ 0x24
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3b01      	subs	r3, #1
 8003118:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800311c:	d301      	bcc.n	8003122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800311e:	2301      	movs	r3, #1
 8003120:	e00f      	b.n	8003142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003122:	4a0a      	ldr	r2, [pc, #40]	@ (800314c <SysTick_Config+0x40>)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3b01      	subs	r3, #1
 8003128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800312a:	210f      	movs	r1, #15
 800312c:	f04f 30ff 	mov.w	r0, #4294967295
 8003130:	f7ff ff8e 	bl	8003050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003134:	4b05      	ldr	r3, [pc, #20]	@ (800314c <SysTick_Config+0x40>)
 8003136:	2200      	movs	r2, #0
 8003138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800313a:	4b04      	ldr	r3, [pc, #16]	@ (800314c <SysTick_Config+0x40>)
 800313c:	2207      	movs	r2, #7
 800313e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	e000e010 	.word	0xe000e010

08003150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff ff29 	bl	8002fb0 <__NVIC_SetPriorityGrouping>
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003166:	b580      	push	{r7, lr}
 8003168:	b086      	sub	sp, #24
 800316a:	af00      	add	r7, sp, #0
 800316c:	4603      	mov	r3, r0
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	607a      	str	r2, [r7, #4]
 8003172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003178:	f7ff ff3e 	bl	8002ff8 <__NVIC_GetPriorityGrouping>
 800317c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	6978      	ldr	r0, [r7, #20]
 8003184:	f7ff ff8e 	bl	80030a4 <NVIC_EncodePriority>
 8003188:	4602      	mov	r2, r0
 800318a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800318e:	4611      	mov	r1, r2
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff ff5d 	bl	8003050 <__NVIC_SetPriority>
}
 8003196:	bf00      	nop
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	4603      	mov	r3, r0
 80031a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff ff31 	bl	8003014 <__NVIC_EnableIRQ>
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b082      	sub	sp, #8
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff ffa2 	bl	800310c <SysTick_Config>
 80031c8:	4603      	mov	r3, r0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b089      	sub	sp, #36	@ 0x24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	e159      	b.n	80034a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031f0:	2201      	movs	r2, #1
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4013      	ands	r3, r2
 8003202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	429a      	cmp	r2, r3
 800320a:	f040 8148 	bne.w	800349e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b01      	cmp	r3, #1
 8003218:	d005      	beq.n	8003226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003222:	2b02      	cmp	r3, #2
 8003224:	d130      	bne.n	8003288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	2203      	movs	r2, #3
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4013      	ands	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800325c:	2201      	movs	r2, #1
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	091b      	lsrs	r3, r3, #4
 8003272:	f003 0201 	and.w	r2, r3, #1
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	2b03      	cmp	r3, #3
 8003292:	d017      	beq.n	80032c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	2203      	movs	r2, #3
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d123      	bne.n	8003318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	08da      	lsrs	r2, r3, #3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3208      	adds	r2, #8
 80032d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	220f      	movs	r2, #15
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	08da      	lsrs	r2, r3, #3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3208      	adds	r2, #8
 8003312:	69b9      	ldr	r1, [r7, #24]
 8003314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	2203      	movs	r2, #3
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 0203 	and.w	r2, r3, #3
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80a2 	beq.w	800349e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	4b57      	ldr	r3, [pc, #348]	@ (80034bc <HAL_GPIO_Init+0x2e8>)
 8003360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003362:	4a56      	ldr	r2, [pc, #344]	@ (80034bc <HAL_GPIO_Init+0x2e8>)
 8003364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003368:	6453      	str	r3, [r2, #68]	@ 0x44
 800336a:	4b54      	ldr	r3, [pc, #336]	@ (80034bc <HAL_GPIO_Init+0x2e8>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003376:	4a52      	ldr	r2, [pc, #328]	@ (80034c0 <HAL_GPIO_Init+0x2ec>)
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	3302      	adds	r3, #2
 800337e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	220f      	movs	r2, #15
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4013      	ands	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a49      	ldr	r2, [pc, #292]	@ (80034c4 <HAL_GPIO_Init+0x2f0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d019      	beq.n	80033d6 <HAL_GPIO_Init+0x202>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a48      	ldr	r2, [pc, #288]	@ (80034c8 <HAL_GPIO_Init+0x2f4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <HAL_GPIO_Init+0x1fe>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a47      	ldr	r2, [pc, #284]	@ (80034cc <HAL_GPIO_Init+0x2f8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00d      	beq.n	80033ce <HAL_GPIO_Init+0x1fa>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a46      	ldr	r2, [pc, #280]	@ (80034d0 <HAL_GPIO_Init+0x2fc>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d007      	beq.n	80033ca <HAL_GPIO_Init+0x1f6>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a45      	ldr	r2, [pc, #276]	@ (80034d4 <HAL_GPIO_Init+0x300>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d101      	bne.n	80033c6 <HAL_GPIO_Init+0x1f2>
 80033c2:	2304      	movs	r3, #4
 80033c4:	e008      	b.n	80033d8 <HAL_GPIO_Init+0x204>
 80033c6:	2307      	movs	r3, #7
 80033c8:	e006      	b.n	80033d8 <HAL_GPIO_Init+0x204>
 80033ca:	2303      	movs	r3, #3
 80033cc:	e004      	b.n	80033d8 <HAL_GPIO_Init+0x204>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e002      	b.n	80033d8 <HAL_GPIO_Init+0x204>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_GPIO_Init+0x204>
 80033d6:	2300      	movs	r3, #0
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	f002 0203 	and.w	r2, r2, #3
 80033de:	0092      	lsls	r2, r2, #2
 80033e0:	4093      	lsls	r3, r2
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033e8:	4935      	ldr	r1, [pc, #212]	@ (80034c0 <HAL_GPIO_Init+0x2ec>)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	089b      	lsrs	r3, r3, #2
 80033ee:	3302      	adds	r3, #2
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033f6:	4b38      	ldr	r3, [pc, #224]	@ (80034d8 <HAL_GPIO_Init+0x304>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	43db      	mvns	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800341a:	4a2f      	ldr	r2, [pc, #188]	@ (80034d8 <HAL_GPIO_Init+0x304>)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003420:	4b2d      	ldr	r3, [pc, #180]	@ (80034d8 <HAL_GPIO_Init+0x304>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003444:	4a24      	ldr	r2, [pc, #144]	@ (80034d8 <HAL_GPIO_Init+0x304>)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800344a:	4b23      	ldr	r3, [pc, #140]	@ (80034d8 <HAL_GPIO_Init+0x304>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	43db      	mvns	r3, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800346e:	4a1a      	ldr	r2, [pc, #104]	@ (80034d8 <HAL_GPIO_Init+0x304>)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003474:	4b18      	ldr	r3, [pc, #96]	@ (80034d8 <HAL_GPIO_Init+0x304>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003498:	4a0f      	ldr	r2, [pc, #60]	@ (80034d8 <HAL_GPIO_Init+0x304>)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3301      	adds	r3, #1
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b0f      	cmp	r3, #15
 80034a8:	f67f aea2 	bls.w	80031f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	3724      	adds	r7, #36	@ 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40023800 	.word	0x40023800
 80034c0:	40013800 	.word	0x40013800
 80034c4:	40020000 	.word	0x40020000
 80034c8:	40020400 	.word	0x40020400
 80034cc:	40020800 	.word	0x40020800
 80034d0:	40020c00 	.word	0x40020c00
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40013c00 	.word	0x40013c00

080034dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	887b      	ldrh	r3, [r7, #2]
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
 80034f8:	e001      	b.n	80034fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034fa:	2300      	movs	r3, #0
 80034fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e12b      	b.n	8003776 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fe fc40 	bl	8001db8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2224      	movs	r2, #36	@ 0x24
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0201 	bic.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800355e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800356e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003570:	f001 fc20 	bl	8004db4 <HAL_RCC_GetPCLK1Freq>
 8003574:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4a81      	ldr	r2, [pc, #516]	@ (8003780 <HAL_I2C_Init+0x274>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d807      	bhi.n	8003590 <HAL_I2C_Init+0x84>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4a80      	ldr	r2, [pc, #512]	@ (8003784 <HAL_I2C_Init+0x278>)
 8003584:	4293      	cmp	r3, r2
 8003586:	bf94      	ite	ls
 8003588:	2301      	movls	r3, #1
 800358a:	2300      	movhi	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	e006      	b.n	800359e <HAL_I2C_Init+0x92>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4a7d      	ldr	r2, [pc, #500]	@ (8003788 <HAL_I2C_Init+0x27c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	bf94      	ite	ls
 8003598:	2301      	movls	r3, #1
 800359a:	2300      	movhi	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e0e7      	b.n	8003776 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	4a78      	ldr	r2, [pc, #480]	@ (800378c <HAL_I2C_Init+0x280>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	0c9b      	lsrs	r3, r3, #18
 80035b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4a6a      	ldr	r2, [pc, #424]	@ (8003780 <HAL_I2C_Init+0x274>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d802      	bhi.n	80035e0 <HAL_I2C_Init+0xd4>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	3301      	adds	r3, #1
 80035de:	e009      	b.n	80035f4 <HAL_I2C_Init+0xe8>
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80035e6:	fb02 f303 	mul.w	r3, r2, r3
 80035ea:	4a69      	ldr	r2, [pc, #420]	@ (8003790 <HAL_I2C_Init+0x284>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	099b      	lsrs	r3, r3, #6
 80035f2:	3301      	adds	r3, #1
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	430b      	orrs	r3, r1
 80035fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003606:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	495c      	ldr	r1, [pc, #368]	@ (8003780 <HAL_I2C_Init+0x274>)
 8003610:	428b      	cmp	r3, r1
 8003612:	d819      	bhi.n	8003648 <HAL_I2C_Init+0x13c>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	1e59      	subs	r1, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003622:	1c59      	adds	r1, r3, #1
 8003624:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003628:	400b      	ands	r3, r1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_I2C_Init+0x138>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1e59      	subs	r1, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	fbb1 f3f3 	udiv	r3, r1, r3
 800363c:	3301      	adds	r3, #1
 800363e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003642:	e051      	b.n	80036e8 <HAL_I2C_Init+0x1dc>
 8003644:	2304      	movs	r3, #4
 8003646:	e04f      	b.n	80036e8 <HAL_I2C_Init+0x1dc>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d111      	bne.n	8003674 <HAL_I2C_Init+0x168>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1e58      	subs	r0, r3, #1
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6859      	ldr	r1, [r3, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	440b      	add	r3, r1
 800365e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003662:	3301      	adds	r3, #1
 8003664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003668:	2b00      	cmp	r3, #0
 800366a:	bf0c      	ite	eq
 800366c:	2301      	moveq	r3, #1
 800366e:	2300      	movne	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	e012      	b.n	800369a <HAL_I2C_Init+0x18e>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	1e58      	subs	r0, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6859      	ldr	r1, [r3, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	0099      	lsls	r1, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	fbb0 f3f3 	udiv	r3, r0, r3
 800368a:	3301      	adds	r3, #1
 800368c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf0c      	ite	eq
 8003694:	2301      	moveq	r3, #1
 8003696:	2300      	movne	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_I2C_Init+0x196>
 800369e:	2301      	movs	r3, #1
 80036a0:	e022      	b.n	80036e8 <HAL_I2C_Init+0x1dc>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10e      	bne.n	80036c8 <HAL_I2C_Init+0x1bc>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1e58      	subs	r0, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6859      	ldr	r1, [r3, #4]
 80036b2:	460b      	mov	r3, r1
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	440b      	add	r3, r1
 80036b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80036bc:	3301      	adds	r3, #1
 80036be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036c6:	e00f      	b.n	80036e8 <HAL_I2C_Init+0x1dc>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	1e58      	subs	r0, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6859      	ldr	r1, [r3, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	0099      	lsls	r1, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	fbb0 f3f3 	udiv	r3, r0, r3
 80036de:	3301      	adds	r3, #1
 80036e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	6809      	ldr	r1, [r1, #0]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69da      	ldr	r2, [r3, #28]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003716:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6911      	ldr	r1, [r2, #16]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	68d2      	ldr	r2, [r2, #12]
 8003722:	4311      	orrs	r1, r2
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	430b      	orrs	r3, r1
 800372a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695a      	ldr	r2, [r3, #20]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	000186a0 	.word	0x000186a0
 8003784:	001e847f 	.word	0x001e847f
 8003788:	003d08ff 	.word	0x003d08ff
 800378c:	431bde83 	.word	0x431bde83
 8003790:	10624dd3 	.word	0x10624dd3

08003794 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	4608      	mov	r0, r1
 800379e:	4611      	mov	r1, r2
 80037a0:	461a      	mov	r2, r3
 80037a2:	4603      	mov	r3, r0
 80037a4:	817b      	strh	r3, [r7, #10]
 80037a6:	460b      	mov	r3, r1
 80037a8:	813b      	strh	r3, [r7, #8]
 80037aa:	4613      	mov	r3, r2
 80037ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037ae:	f7fe fd0b 	bl	80021c8 <HAL_GetTick>
 80037b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b20      	cmp	r3, #32
 80037be:	f040 80d9 	bne.w	8003974 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	2319      	movs	r3, #25
 80037c8:	2201      	movs	r2, #1
 80037ca:	496d      	ldr	r1, [pc, #436]	@ (8003980 <HAL_I2C_Mem_Write+0x1ec>)
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 fc8b 	bl	80040e8 <I2C_WaitOnFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80037d8:	2302      	movs	r3, #2
 80037da:	e0cc      	b.n	8003976 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_I2C_Mem_Write+0x56>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e0c5      	b.n	8003976 <HAL_I2C_Mem_Write+0x1e2>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d007      	beq.n	8003810 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800381e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2221      	movs	r2, #33	@ 0x21
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2240      	movs	r2, #64	@ 0x40
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a3a      	ldr	r2, [r7, #32]
 800383a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003840:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4a4d      	ldr	r2, [pc, #308]	@ (8003984 <HAL_I2C_Mem_Write+0x1f0>)
 8003850:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003852:	88f8      	ldrh	r0, [r7, #6]
 8003854:	893a      	ldrh	r2, [r7, #8]
 8003856:	8979      	ldrh	r1, [r7, #10]
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	9301      	str	r3, [sp, #4]
 800385c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	4603      	mov	r3, r0
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 fac2 	bl	8003dec <I2C_RequestMemoryWrite>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d052      	beq.n	8003914 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e081      	b.n	8003976 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 fd50 	bl	800431c <I2C_WaitOnTXEFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00d      	beq.n	800389e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003886:	2b04      	cmp	r3, #4
 8003888:	d107      	bne.n	800389a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003898:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e06b      	b.n	8003976 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a2:	781a      	ldrb	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d11b      	bne.n	8003914 <HAL_I2C_Mem_Write+0x180>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d017      	beq.n	8003914 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	781a      	ldrb	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1aa      	bne.n	8003872 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 fd43 	bl	80043ac <I2C_WaitOnBTFFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00d      	beq.n	8003948 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003930:	2b04      	cmp	r3, #4
 8003932:	d107      	bne.n	8003944 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003942:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e016      	b.n	8003976 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003956:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	e000      	b.n	8003976 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003974:	2302      	movs	r3, #2
  }
}
 8003976:	4618      	mov	r0, r3
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	00100002 	.word	0x00100002
 8003984:	ffff0000 	.word	0xffff0000

08003988 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08c      	sub	sp, #48	@ 0x30
 800398c:	af02      	add	r7, sp, #8
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	4608      	mov	r0, r1
 8003992:	4611      	mov	r1, r2
 8003994:	461a      	mov	r2, r3
 8003996:	4603      	mov	r3, r0
 8003998:	817b      	strh	r3, [r7, #10]
 800399a:	460b      	mov	r3, r1
 800399c:	813b      	strh	r3, [r7, #8]
 800399e:	4613      	mov	r3, r2
 80039a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039a2:	f7fe fc11 	bl	80021c8 <HAL_GetTick>
 80039a6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	f040 8214 	bne.w	8003dde <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	2319      	movs	r3, #25
 80039bc:	2201      	movs	r2, #1
 80039be:	497b      	ldr	r1, [pc, #492]	@ (8003bac <HAL_I2C_Mem_Read+0x224>)
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 fb91 	bl	80040e8 <I2C_WaitOnFlagUntilTimeout>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80039cc:	2302      	movs	r3, #2
 80039ce:	e207      	b.n	8003de0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d101      	bne.n	80039de <HAL_I2C_Mem_Read+0x56>
 80039da:	2302      	movs	r3, #2
 80039dc:	e200      	b.n	8003de0 <HAL_I2C_Mem_Read+0x458>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d007      	beq.n	8003a04 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2222      	movs	r2, #34	@ 0x22
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2240      	movs	r2, #64	@ 0x40
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003a34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4a5b      	ldr	r2, [pc, #364]	@ (8003bb0 <HAL_I2C_Mem_Read+0x228>)
 8003a44:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a46:	88f8      	ldrh	r0, [r7, #6]
 8003a48:	893a      	ldrh	r2, [r7, #8]
 8003a4a:	8979      	ldrh	r1, [r7, #10]
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4e:	9301      	str	r3, [sp, #4]
 8003a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	4603      	mov	r3, r0
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 fa5e 	bl	8003f18 <I2C_RequestMemoryRead>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e1bc      	b.n	8003de0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d113      	bne.n	8003a96 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a6e:	2300      	movs	r3, #0
 8003a70:	623b      	str	r3, [r7, #32]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	623b      	str	r3, [r7, #32]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	623b      	str	r3, [r7, #32]
 8003a82:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	e190      	b.n	8003db8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d11b      	bne.n	8003ad6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	61fb      	str	r3, [r7, #28]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	61fb      	str	r3, [r7, #28]
 8003ac2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	e170      	b.n	8003db8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d11b      	bne.n	8003b16 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003afc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afe:	2300      	movs	r3, #0
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	e150      	b.n	8003db8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b2c:	e144      	b.n	8003db8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	f200 80f1 	bhi.w	8003d1a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d123      	bne.n	8003b88 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b42:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 fc79 	bl	800443c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e145      	b.n	8003de0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b86:	e117      	b.n	8003db8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d14e      	bne.n	8003c2e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b96:	2200      	movs	r2, #0
 8003b98:	4906      	ldr	r1, [pc, #24]	@ (8003bb4 <HAL_I2C_Mem_Read+0x22c>)
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 faa4 	bl	80040e8 <I2C_WaitOnFlagUntilTimeout>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d008      	beq.n	8003bb8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e11a      	b.n	8003de0 <HAL_I2C_Mem_Read+0x458>
 8003baa:	bf00      	nop
 8003bac:	00100002 	.word	0x00100002
 8003bb0:	ffff0000 	.word	0xffff0000
 8003bb4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691a      	ldr	r2, [r3, #16]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c2c:	e0c4      	b.n	8003db8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c34:	2200      	movs	r2, #0
 8003c36:	496c      	ldr	r1, [pc, #432]	@ (8003de8 <HAL_I2C_Mem_Read+0x460>)
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 fa55 	bl	80040e8 <I2C_WaitOnFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e0cb      	b.n	8003de0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691a      	ldr	r2, [r3, #16]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c90:	2200      	movs	r2, #0
 8003c92:	4955      	ldr	r1, [pc, #340]	@ (8003de8 <HAL_I2C_Mem_Read+0x460>)
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 fa27 	bl	80040e8 <I2C_WaitOnFlagUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e09d      	b.n	8003de0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691a      	ldr	r2, [r3, #16]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d18:	e04e      	b.n	8003db8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d1c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 fb8c 	bl	800443c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e058      	b.n	8003de0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d124      	bne.n	8003db8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d107      	bne.n	8003d86 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d84:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f47f aeb6 	bne.w	8003b2e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e000      	b.n	8003de0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003dde:	2302      	movs	r3, #2
  }
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3728      	adds	r7, #40	@ 0x28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	00010004 	.word	0x00010004

08003dec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	4608      	mov	r0, r1
 8003df6:	4611      	mov	r1, r2
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	817b      	strh	r3, [r7, #10]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	813b      	strh	r3, [r7, #8]
 8003e02:	4613      	mov	r3, r2
 8003e04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 f960 	bl	80040e8 <I2C_WaitOnFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00d      	beq.n	8003e4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e3c:	d103      	bne.n	8003e46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e05f      	b.n	8003f0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e4a:	897b      	ldrh	r3, [r7, #10]
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	461a      	mov	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	6a3a      	ldr	r2, [r7, #32]
 8003e5e:	492d      	ldr	r1, [pc, #180]	@ (8003f14 <I2C_RequestMemoryWrite+0x128>)
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 f9bb 	bl	80041dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e04c      	b.n	8003f0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e70:	2300      	movs	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e88:	6a39      	ldr	r1, [r7, #32]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 fa46 	bl	800431c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00d      	beq.n	8003eb2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d107      	bne.n	8003eae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e02b      	b.n	8003f0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eb2:	88fb      	ldrh	r3, [r7, #6]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d105      	bne.n	8003ec4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eb8:	893b      	ldrh	r3, [r7, #8]
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	611a      	str	r2, [r3, #16]
 8003ec2:	e021      	b.n	8003f08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ec4:	893b      	ldrh	r3, [r7, #8]
 8003ec6:	0a1b      	lsrs	r3, r3, #8
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed4:	6a39      	ldr	r1, [r7, #32]
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 fa20 	bl	800431c <I2C_WaitOnTXEFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00d      	beq.n	8003efe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d107      	bne.n	8003efa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ef8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e005      	b.n	8003f0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003efe:	893b      	ldrh	r3, [r7, #8]
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	00010002 	.word	0x00010002

08003f18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af02      	add	r7, sp, #8
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	4608      	mov	r0, r1
 8003f22:	4611      	mov	r1, r2
 8003f24:	461a      	mov	r2, r3
 8003f26:	4603      	mov	r3, r0
 8003f28:	817b      	strh	r3, [r7, #10]
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	813b      	strh	r3, [r7, #8]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f8c2 	bl	80040e8 <I2C_WaitOnFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00d      	beq.n	8003f86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f78:	d103      	bne.n	8003f82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e0aa      	b.n	80040dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f86:	897b      	ldrh	r3, [r7, #10]
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f98:	6a3a      	ldr	r2, [r7, #32]
 8003f9a:	4952      	ldr	r1, [pc, #328]	@ (80040e4 <I2C_RequestMemoryRead+0x1cc>)
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f91d 	bl	80041dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e097      	b.n	80040dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fc4:	6a39      	ldr	r1, [r7, #32]
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 f9a8 	bl	800431c <I2C_WaitOnTXEFlagUntilTimeout>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00d      	beq.n	8003fee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d107      	bne.n	8003fea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fe8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e076      	b.n	80040dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fee:	88fb      	ldrh	r3, [r7, #6]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d105      	bne.n	8004000 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ff4:	893b      	ldrh	r3, [r7, #8]
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	611a      	str	r2, [r3, #16]
 8003ffe:	e021      	b.n	8004044 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004000:	893b      	ldrh	r3, [r7, #8]
 8004002:	0a1b      	lsrs	r3, r3, #8
 8004004:	b29b      	uxth	r3, r3
 8004006:	b2da      	uxtb	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800400e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004010:	6a39      	ldr	r1, [r7, #32]
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 f982 	bl	800431c <I2C_WaitOnTXEFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00d      	beq.n	800403a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004022:	2b04      	cmp	r3, #4
 8004024:	d107      	bne.n	8004036 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004034:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e050      	b.n	80040dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800403a:	893b      	ldrh	r3, [r7, #8]
 800403c:	b2da      	uxtb	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004046:	6a39      	ldr	r1, [r7, #32]
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 f967 	bl	800431c <I2C_WaitOnTXEFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00d      	beq.n	8004070 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004058:	2b04      	cmp	r3, #4
 800405a:	d107      	bne.n	800406c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800406a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e035      	b.n	80040dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800407e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	2200      	movs	r2, #0
 8004088:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 f82b 	bl	80040e8 <I2C_WaitOnFlagUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00d      	beq.n	80040b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040a6:	d103      	bne.n	80040b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e013      	b.n	80040dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040b4:	897b      	ldrh	r3, [r7, #10]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	6a3a      	ldr	r2, [r7, #32]
 80040c8:	4906      	ldr	r1, [pc, #24]	@ (80040e4 <I2C_RequestMemoryRead+0x1cc>)
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f886 	bl	80041dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	00010002 	.word	0x00010002

080040e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	603b      	str	r3, [r7, #0]
 80040f4:	4613      	mov	r3, r2
 80040f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040f8:	e048      	b.n	800418c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	d044      	beq.n	800418c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004102:	f7fe f861 	bl	80021c8 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d302      	bcc.n	8004118 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d139      	bne.n	800418c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	0c1b      	lsrs	r3, r3, #16
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b01      	cmp	r3, #1
 8004120:	d10d      	bne.n	800413e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	43da      	mvns	r2, r3
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	4013      	ands	r3, r2
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	bf0c      	ite	eq
 8004134:	2301      	moveq	r3, #1
 8004136:	2300      	movne	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	461a      	mov	r2, r3
 800413c:	e00c      	b.n	8004158 <I2C_WaitOnFlagUntilTimeout+0x70>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	43da      	mvns	r2, r3
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	4013      	ands	r3, r2
 800414a:	b29b      	uxth	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	bf0c      	ite	eq
 8004150:	2301      	moveq	r3, #1
 8004152:	2300      	movne	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	461a      	mov	r2, r3
 8004158:	79fb      	ldrb	r3, [r7, #7]
 800415a:	429a      	cmp	r2, r3
 800415c:	d116      	bne.n	800418c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004178:	f043 0220 	orr.w	r2, r3, #32
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e023      	b.n	80041d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	0c1b      	lsrs	r3, r3, #16
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b01      	cmp	r3, #1
 8004194:	d10d      	bne.n	80041b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	43da      	mvns	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4013      	ands	r3, r2
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bf0c      	ite	eq
 80041a8:	2301      	moveq	r3, #1
 80041aa:	2300      	movne	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	e00c      	b.n	80041cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	43da      	mvns	r2, r3
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4013      	ands	r3, r2
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bf0c      	ite	eq
 80041c4:	2301      	moveq	r3, #1
 80041c6:	2300      	movne	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d093      	beq.n	80040fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041ea:	e071      	b.n	80042d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041fa:	d123      	bne.n	8004244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800420a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004214:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004230:	f043 0204 	orr.w	r2, r3, #4
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e067      	b.n	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424a:	d041      	beq.n	80042d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424c:	f7fd ffbc 	bl	80021c8 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	429a      	cmp	r2, r3
 800425a:	d302      	bcc.n	8004262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d136      	bne.n	80042d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	0c1b      	lsrs	r3, r3, #16
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b01      	cmp	r3, #1
 800426a:	d10c      	bne.n	8004286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	43da      	mvns	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4013      	ands	r3, r2
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	bf14      	ite	ne
 800427e:	2301      	movne	r3, #1
 8004280:	2300      	moveq	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	e00b      	b.n	800429e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	43da      	mvns	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	4013      	ands	r3, r2
 8004292:	b29b      	uxth	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	bf14      	ite	ne
 8004298:	2301      	movne	r3, #1
 800429a:	2300      	moveq	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d016      	beq.n	80042d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042bc:	f043 0220 	orr.w	r2, r3, #32
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e021      	b.n	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	0c1b      	lsrs	r3, r3, #16
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d10c      	bne.n	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	43da      	mvns	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	4013      	ands	r3, r2
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	bf14      	ite	ne
 80042ec:	2301      	movne	r3, #1
 80042ee:	2300      	moveq	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	e00b      	b.n	800430c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	43da      	mvns	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4013      	ands	r3, r2
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	bf14      	ite	ne
 8004306:	2301      	movne	r3, #1
 8004308:	2300      	moveq	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	f47f af6d 	bne.w	80041ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004328:	e034      	b.n	8004394 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f8e3 	bl	80044f6 <I2C_IsAcknowledgeFailed>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e034      	b.n	80043a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d028      	beq.n	8004394 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004342:	f7fd ff41 	bl	80021c8 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	429a      	cmp	r2, r3
 8004350:	d302      	bcc.n	8004358 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d11d      	bne.n	8004394 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004362:	2b80      	cmp	r3, #128	@ 0x80
 8004364:	d016      	beq.n	8004394 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004380:	f043 0220 	orr.w	r2, r3, #32
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e007      	b.n	80043a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800439e:	2b80      	cmp	r3, #128	@ 0x80
 80043a0:	d1c3      	bne.n	800432a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043b8:	e034      	b.n	8004424 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f89b 	bl	80044f6 <I2C_IsAcknowledgeFailed>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e034      	b.n	8004434 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d0:	d028      	beq.n	8004424 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d2:	f7fd fef9 	bl	80021c8 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d302      	bcc.n	80043e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d11d      	bne.n	8004424 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f003 0304 	and.w	r3, r3, #4
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d016      	beq.n	8004424 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004410:	f043 0220 	orr.w	r2, r3, #32
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e007      	b.n	8004434 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	2b04      	cmp	r3, #4
 8004430:	d1c3      	bne.n	80043ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004448:	e049      	b.n	80044de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b10      	cmp	r3, #16
 8004456:	d119      	bne.n	800448c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0210 	mvn.w	r2, #16
 8004460:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e030      	b.n	80044ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800448c:	f7fd fe9c 	bl	80021c8 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	429a      	cmp	r2, r3
 800449a:	d302      	bcc.n	80044a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d11d      	bne.n	80044de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ac:	2b40      	cmp	r3, #64	@ 0x40
 80044ae:	d016      	beq.n	80044de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ca:	f043 0220 	orr.w	r2, r3, #32
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e007      	b.n	80044ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e8:	2b40      	cmp	r3, #64	@ 0x40
 80044ea:	d1ae      	bne.n	800444a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800450c:	d11b      	bne.n	8004546 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004516:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	f043 0204 	orr.w	r2, r3, #4
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e267      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d075      	beq.n	800465e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004572:	4b88      	ldr	r3, [pc, #544]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
 800457a:	2b04      	cmp	r3, #4
 800457c:	d00c      	beq.n	8004598 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800457e:	4b85      	ldr	r3, [pc, #532]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004586:	2b08      	cmp	r3, #8
 8004588:	d112      	bne.n	80045b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800458a:	4b82      	ldr	r3, [pc, #520]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004592:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004596:	d10b      	bne.n	80045b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004598:	4b7e      	ldr	r3, [pc, #504]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d05b      	beq.n	800465c <HAL_RCC_OscConfig+0x108>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d157      	bne.n	800465c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e242      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b8:	d106      	bne.n	80045c8 <HAL_RCC_OscConfig+0x74>
 80045ba:	4b76      	ldr	r3, [pc, #472]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a75      	ldr	r2, [pc, #468]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	e01d      	b.n	8004604 <HAL_RCC_OscConfig+0xb0>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045d0:	d10c      	bne.n	80045ec <HAL_RCC_OscConfig+0x98>
 80045d2:	4b70      	ldr	r3, [pc, #448]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a6f      	ldr	r2, [pc, #444]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	4b6d      	ldr	r3, [pc, #436]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a6c      	ldr	r2, [pc, #432]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	e00b      	b.n	8004604 <HAL_RCC_OscConfig+0xb0>
 80045ec:	4b69      	ldr	r3, [pc, #420]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a68      	ldr	r2, [pc, #416]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	4b66      	ldr	r3, [pc, #408]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a65      	ldr	r2, [pc, #404]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d013      	beq.n	8004634 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460c:	f7fd fddc 	bl	80021c8 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004614:	f7fd fdd8 	bl	80021c8 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b64      	cmp	r3, #100	@ 0x64
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e207      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004626:	4b5b      	ldr	r3, [pc, #364]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCC_OscConfig+0xc0>
 8004632:	e014      	b.n	800465e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004634:	f7fd fdc8 	bl	80021c8 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800463c:	f7fd fdc4 	bl	80021c8 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b64      	cmp	r3, #100	@ 0x64
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e1f3      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800464e:	4b51      	ldr	r3, [pc, #324]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0xe8>
 800465a:	e000      	b.n	800465e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800465c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d063      	beq.n	8004732 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800466a:	4b4a      	ldr	r3, [pc, #296]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00b      	beq.n	800468e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004676:	4b47      	ldr	r3, [pc, #284]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800467e:	2b08      	cmp	r3, #8
 8004680:	d11c      	bne.n	80046bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004682:	4b44      	ldr	r3, [pc, #272]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d116      	bne.n	80046bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800468e:	4b41      	ldr	r3, [pc, #260]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <HAL_RCC_OscConfig+0x152>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d001      	beq.n	80046a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e1c7      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	4937      	ldr	r1, [pc, #220]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ba:	e03a      	b.n	8004732 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d020      	beq.n	8004706 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046c4:	4b34      	ldr	r3, [pc, #208]	@ (8004798 <HAL_RCC_OscConfig+0x244>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ca:	f7fd fd7d 	bl	80021c8 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046d2:	f7fd fd79 	bl	80021c8 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e1a8      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f0:	4b28      	ldr	r3, [pc, #160]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	4925      	ldr	r1, [pc, #148]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004700:	4313      	orrs	r3, r2
 8004702:	600b      	str	r3, [r1, #0]
 8004704:	e015      	b.n	8004732 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004706:	4b24      	ldr	r3, [pc, #144]	@ (8004798 <HAL_RCC_OscConfig+0x244>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470c:	f7fd fd5c 	bl	80021c8 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004714:	f7fd fd58 	bl	80021c8 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e187      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004726:	4b1b      	ldr	r3, [pc, #108]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d036      	beq.n	80047ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d016      	beq.n	8004774 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004746:	4b15      	ldr	r3, [pc, #84]	@ (800479c <HAL_RCC_OscConfig+0x248>)
 8004748:	2201      	movs	r2, #1
 800474a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474c:	f7fd fd3c 	bl	80021c8 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004754:	f7fd fd38 	bl	80021c8 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e167      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004766:	4b0b      	ldr	r3, [pc, #44]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0x200>
 8004772:	e01b      	b.n	80047ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004774:	4b09      	ldr	r3, [pc, #36]	@ (800479c <HAL_RCC_OscConfig+0x248>)
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477a:	f7fd fd25 	bl	80021c8 <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004780:	e00e      	b.n	80047a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004782:	f7fd fd21 	bl	80021c8 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d907      	bls.n	80047a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e150      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
 8004794:	40023800 	.word	0x40023800
 8004798:	42470000 	.word	0x42470000
 800479c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047a0:	4b88      	ldr	r3, [pc, #544]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80047a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1ea      	bne.n	8004782 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 8097 	beq.w	80048e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ba:	2300      	movs	r3, #0
 80047bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047be:	4b81      	ldr	r3, [pc, #516]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10f      	bne.n	80047ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ca:	2300      	movs	r3, #0
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	4b7d      	ldr	r3, [pc, #500]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d2:	4a7c      	ldr	r2, [pc, #496]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80047d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80047da:	4b7a      	ldr	r3, [pc, #488]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047e2:	60bb      	str	r3, [r7, #8]
 80047e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047e6:	2301      	movs	r3, #1
 80047e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ea:	4b77      	ldr	r3, [pc, #476]	@ (80049c8 <HAL_RCC_OscConfig+0x474>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d118      	bne.n	8004828 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047f6:	4b74      	ldr	r3, [pc, #464]	@ (80049c8 <HAL_RCC_OscConfig+0x474>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a73      	ldr	r2, [pc, #460]	@ (80049c8 <HAL_RCC_OscConfig+0x474>)
 80047fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004802:	f7fd fce1 	bl	80021c8 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480a:	f7fd fcdd 	bl	80021c8 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e10c      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481c:	4b6a      	ldr	r3, [pc, #424]	@ (80049c8 <HAL_RCC_OscConfig+0x474>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d106      	bne.n	800483e <HAL_RCC_OscConfig+0x2ea>
 8004830:	4b64      	ldr	r3, [pc, #400]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004834:	4a63      	ldr	r2, [pc, #396]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	6713      	str	r3, [r2, #112]	@ 0x70
 800483c:	e01c      	b.n	8004878 <HAL_RCC_OscConfig+0x324>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	2b05      	cmp	r3, #5
 8004844:	d10c      	bne.n	8004860 <HAL_RCC_OscConfig+0x30c>
 8004846:	4b5f      	ldr	r3, [pc, #380]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484a:	4a5e      	ldr	r2, [pc, #376]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 800484c:	f043 0304 	orr.w	r3, r3, #4
 8004850:	6713      	str	r3, [r2, #112]	@ 0x70
 8004852:	4b5c      	ldr	r3, [pc, #368]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004856:	4a5b      	ldr	r2, [pc, #364]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004858:	f043 0301 	orr.w	r3, r3, #1
 800485c:	6713      	str	r3, [r2, #112]	@ 0x70
 800485e:	e00b      	b.n	8004878 <HAL_RCC_OscConfig+0x324>
 8004860:	4b58      	ldr	r3, [pc, #352]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004864:	4a57      	ldr	r2, [pc, #348]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004866:	f023 0301 	bic.w	r3, r3, #1
 800486a:	6713      	str	r3, [r2, #112]	@ 0x70
 800486c:	4b55      	ldr	r3, [pc, #340]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 800486e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004870:	4a54      	ldr	r2, [pc, #336]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004872:	f023 0304 	bic.w	r3, r3, #4
 8004876:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d015      	beq.n	80048ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004880:	f7fd fca2 	bl	80021c8 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004886:	e00a      	b.n	800489e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004888:	f7fd fc9e 	bl	80021c8 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004896:	4293      	cmp	r3, r2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e0cb      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800489e:	4b49      	ldr	r3, [pc, #292]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80048a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0ee      	beq.n	8004888 <HAL_RCC_OscConfig+0x334>
 80048aa:	e014      	b.n	80048d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ac:	f7fd fc8c 	bl	80021c8 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048b2:	e00a      	b.n	80048ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b4:	f7fd fc88 	bl	80021c8 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e0b5      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ca:	4b3e      	ldr	r3, [pc, #248]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80048cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1ee      	bne.n	80048b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d105      	bne.n	80048e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048dc:	4b39      	ldr	r3, [pc, #228]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80048de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e0:	4a38      	ldr	r2, [pc, #224]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80048e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 80a1 	beq.w	8004a34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048f2:	4b34      	ldr	r3, [pc, #208]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 030c 	and.w	r3, r3, #12
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d05c      	beq.n	80049b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d141      	bne.n	800498a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004906:	4b31      	ldr	r3, [pc, #196]	@ (80049cc <HAL_RCC_OscConfig+0x478>)
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490c:	f7fd fc5c 	bl	80021c8 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004914:	f7fd fc58 	bl	80021c8 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e087      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004926:	4b27      	ldr	r3, [pc, #156]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1f0      	bne.n	8004914 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69da      	ldr	r2, [r3, #28]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004940:	019b      	lsls	r3, r3, #6
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004948:	085b      	lsrs	r3, r3, #1
 800494a:	3b01      	subs	r3, #1
 800494c:	041b      	lsls	r3, r3, #16
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004954:	061b      	lsls	r3, r3, #24
 8004956:	491b      	ldr	r1, [pc, #108]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004958:	4313      	orrs	r3, r2
 800495a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800495c:	4b1b      	ldr	r3, [pc, #108]	@ (80049cc <HAL_RCC_OscConfig+0x478>)
 800495e:	2201      	movs	r2, #1
 8004960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004962:	f7fd fc31 	bl	80021c8 <HAL_GetTick>
 8004966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004968:	e008      	b.n	800497c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800496a:	f7fd fc2d 	bl	80021c8 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e05c      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800497c:	4b11      	ldr	r3, [pc, #68]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0f0      	beq.n	800496a <HAL_RCC_OscConfig+0x416>
 8004988:	e054      	b.n	8004a34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800498a:	4b10      	ldr	r3, [pc, #64]	@ (80049cc <HAL_RCC_OscConfig+0x478>)
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004990:	f7fd fc1a 	bl	80021c8 <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004998:	f7fd fc16 	bl	80021c8 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e045      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049aa:	4b06      	ldr	r3, [pc, #24]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f0      	bne.n	8004998 <HAL_RCC_OscConfig+0x444>
 80049b6:	e03d      	b.n	8004a34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d107      	bne.n	80049d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e038      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
 80049c4:	40023800 	.word	0x40023800
 80049c8:	40007000 	.word	0x40007000
 80049cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a40 <HAL_RCC_OscConfig+0x4ec>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d028      	beq.n	8004a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d121      	bne.n	8004a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d11a      	bne.n	8004a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a00:	4013      	ands	r3, r2
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d111      	bne.n	8004a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a16:	085b      	lsrs	r3, r3, #1
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d107      	bne.n	8004a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d001      	beq.n	8004a34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40023800 	.word	0x40023800

08004a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e0cc      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a58:	4b68      	ldr	r3, [pc, #416]	@ (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d90c      	bls.n	8004a80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a66:	4b65      	ldr	r3, [pc, #404]	@ (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6e:	4b63      	ldr	r3, [pc, #396]	@ (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d001      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e0b8      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d020      	beq.n	8004ace <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a98:	4b59      	ldr	r3, [pc, #356]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	4a58      	ldr	r2, [pc, #352]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004aa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ab0:	4b53      	ldr	r3, [pc, #332]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	4a52      	ldr	r2, [pc, #328]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004aba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004abc:	4b50      	ldr	r3, [pc, #320]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	494d      	ldr	r1, [pc, #308]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d044      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d107      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae2:	4b47      	ldr	r3, [pc, #284]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d119      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e07f      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d003      	beq.n	8004b02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d107      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b02:	4b3f      	ldr	r3, [pc, #252]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d109      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e06f      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b12:	4b3b      	ldr	r3, [pc, #236]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e067      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b22:	4b37      	ldr	r3, [pc, #220]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f023 0203 	bic.w	r2, r3, #3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	4934      	ldr	r1, [pc, #208]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b34:	f7fd fb48 	bl	80021c8 <HAL_GetTick>
 8004b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3a:	e00a      	b.n	8004b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b3c:	f7fd fb44 	bl	80021c8 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e04f      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b52:	4b2b      	ldr	r3, [pc, #172]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 020c 	and.w	r2, r3, #12
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d1eb      	bne.n	8004b3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b64:	4b25      	ldr	r3, [pc, #148]	@ (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d20c      	bcs.n	8004b8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b72:	4b22      	ldr	r3, [pc, #136]	@ (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7a:	4b20      	ldr	r3, [pc, #128]	@ (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d001      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e032      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b98:	4b19      	ldr	r3, [pc, #100]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	4916      	ldr	r1, [pc, #88]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d009      	beq.n	8004bca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bb6:	4b12      	ldr	r3, [pc, #72]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	490e      	ldr	r1, [pc, #56]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bca:	f000 f821 	bl	8004c10 <HAL_RCC_GetSysClockFreq>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	091b      	lsrs	r3, r3, #4
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	490a      	ldr	r1, [pc, #40]	@ (8004c04 <HAL_RCC_ClockConfig+0x1c0>)
 8004bdc:	5ccb      	ldrb	r3, [r1, r3]
 8004bde:	fa22 f303 	lsr.w	r3, r2, r3
 8004be2:	4a09      	ldr	r2, [pc, #36]	@ (8004c08 <HAL_RCC_ClockConfig+0x1c4>)
 8004be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004be6:	4b09      	ldr	r3, [pc, #36]	@ (8004c0c <HAL_RCC_ClockConfig+0x1c8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fd faa8 	bl	8002140 <HAL_InitTick>

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40023c00 	.word	0x40023c00
 8004c00:	40023800 	.word	0x40023800
 8004c04:	080064b8 	.word	0x080064b8
 8004c08:	20000000 	.word	0x20000000
 8004c0c:	20000004 	.word	0x20000004

08004c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c14:	b090      	sub	sp, #64	@ 0x40
 8004c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c20:	2300      	movs	r3, #0
 8004c22:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c28:	4b59      	ldr	r3, [pc, #356]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 030c 	and.w	r3, r3, #12
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d00d      	beq.n	8004c50 <HAL_RCC_GetSysClockFreq+0x40>
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	f200 80a1 	bhi.w	8004d7c <HAL_RCC_GetSysClockFreq+0x16c>
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <HAL_RCC_GetSysClockFreq+0x34>
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d003      	beq.n	8004c4a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c42:	e09b      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c44:	4b53      	ldr	r3, [pc, #332]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c46:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004c48:	e09b      	b.n	8004d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c4a:	4b53      	ldr	r3, [pc, #332]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c4e:	e098      	b.n	8004d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c50:	4b4f      	ldr	r3, [pc, #316]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c58:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c5a:	4b4d      	ldr	r3, [pc, #308]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d028      	beq.n	8004cb8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c66:	4b4a      	ldr	r3, [pc, #296]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	099b      	lsrs	r3, r3, #6
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	623b      	str	r3, [r7, #32]
 8004c70:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c78:	2100      	movs	r1, #0
 8004c7a:	4b47      	ldr	r3, [pc, #284]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c7c:	fb03 f201 	mul.w	r2, r3, r1
 8004c80:	2300      	movs	r3, #0
 8004c82:	fb00 f303 	mul.w	r3, r0, r3
 8004c86:	4413      	add	r3, r2
 8004c88:	4a43      	ldr	r2, [pc, #268]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c8a:	fba0 1202 	umull	r1, r2, r0, r2
 8004c8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c90:	460a      	mov	r2, r1
 8004c92:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004c94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c96:	4413      	add	r3, r2
 8004c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	61bb      	str	r3, [r7, #24]
 8004ca0:	61fa      	str	r2, [r7, #28]
 8004ca2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ca6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004caa:	f7fb fcfd 	bl	80006a8 <__aeabi_uldivmod>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cb6:	e053      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb8:	4b35      	ldr	r3, [pc, #212]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	099b      	lsrs	r3, r3, #6
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	617a      	str	r2, [r7, #20]
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004cca:	f04f 0b00 	mov.w	fp, #0
 8004cce:	4652      	mov	r2, sl
 8004cd0:	465b      	mov	r3, fp
 8004cd2:	f04f 0000 	mov.w	r0, #0
 8004cd6:	f04f 0100 	mov.w	r1, #0
 8004cda:	0159      	lsls	r1, r3, #5
 8004cdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ce0:	0150      	lsls	r0, r2, #5
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	ebb2 080a 	subs.w	r8, r2, sl
 8004cea:	eb63 090b 	sbc.w	r9, r3, fp
 8004cee:	f04f 0200 	mov.w	r2, #0
 8004cf2:	f04f 0300 	mov.w	r3, #0
 8004cf6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004cfa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004cfe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d02:	ebb2 0408 	subs.w	r4, r2, r8
 8004d06:	eb63 0509 	sbc.w	r5, r3, r9
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	00eb      	lsls	r3, r5, #3
 8004d14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d18:	00e2      	lsls	r2, r4, #3
 8004d1a:	4614      	mov	r4, r2
 8004d1c:	461d      	mov	r5, r3
 8004d1e:	eb14 030a 	adds.w	r3, r4, sl
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	eb45 030b 	adc.w	r3, r5, fp
 8004d28:	607b      	str	r3, [r7, #4]
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d36:	4629      	mov	r1, r5
 8004d38:	028b      	lsls	r3, r1, #10
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d40:	4621      	mov	r1, r4
 8004d42:	028a      	lsls	r2, r1, #10
 8004d44:	4610      	mov	r0, r2
 8004d46:	4619      	mov	r1, r3
 8004d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	60bb      	str	r3, [r7, #8]
 8004d4e:	60fa      	str	r2, [r7, #12]
 8004d50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d54:	f7fb fca8 	bl	80006a8 <__aeabi_uldivmod>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d60:	4b0b      	ldr	r3, [pc, #44]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	0c1b      	lsrs	r3, r3, #16
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004d70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d78:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d7a:	e002      	b.n	8004d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d7c:	4b05      	ldr	r3, [pc, #20]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3740      	adds	r7, #64	@ 0x40
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d8e:	bf00      	nop
 8004d90:	40023800 	.word	0x40023800
 8004d94:	00f42400 	.word	0x00f42400
 8004d98:	017d7840 	.word	0x017d7840

08004d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004da0:	4b03      	ldr	r3, [pc, #12]	@ (8004db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004da2:	681b      	ldr	r3, [r3, #0]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	20000000 	.word	0x20000000

08004db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004db8:	f7ff fff0 	bl	8004d9c <HAL_RCC_GetHCLKFreq>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	4b05      	ldr	r3, [pc, #20]	@ (8004dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	0a9b      	lsrs	r3, r3, #10
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	4903      	ldr	r1, [pc, #12]	@ (8004dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dca:	5ccb      	ldrb	r3, [r1, r3]
 8004dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	080064c8 	.word	0x080064c8

08004ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004de0:	f7ff ffdc 	bl	8004d9c <HAL_RCC_GetHCLKFreq>
 8004de4:	4602      	mov	r2, r0
 8004de6:	4b05      	ldr	r3, [pc, #20]	@ (8004dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	0b5b      	lsrs	r3, r3, #13
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	4903      	ldr	r1, [pc, #12]	@ (8004e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004df2:	5ccb      	ldrb	r3, [r1, r3]
 8004df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	080064c8 	.word	0x080064c8

08004e04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e097      	b.n	8004f48 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d106      	bne.n	8004e32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7fd f80b 	bl	8001e48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2202      	movs	r2, #2
 8004e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6812      	ldr	r2, [r2, #0]
 8004e44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e48:	f023 0307 	bic.w	r3, r3, #7
 8004e4c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3304      	adds	r3, #4
 8004e56:	4619      	mov	r1, r3
 8004e58:	4610      	mov	r0, r2
 8004e5a:	f000 f907 	bl	800506c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e86:	f023 0303 	bic.w	r3, r3, #3
 8004e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	021b      	lsls	r3, r3, #8
 8004e96:	4313      	orrs	r3, r2
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004ea4:	f023 030c 	bic.w	r3, r3, #12
 8004ea8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004eb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004eb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	011a      	lsls	r2, r3, #4
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	031b      	lsls	r3, r3, #12
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004ee2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004eea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f60:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f68:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f70:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004f78:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d110      	bne.n	8004fa2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d102      	bne.n	8004f8c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f86:	7b7b      	ldrb	r3, [r7, #13]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d001      	beq.n	8004f90 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e069      	b.n	8005064 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fa0:	e031      	b.n	8005006 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d110      	bne.n	8004fca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fa8:	7bbb      	ldrb	r3, [r7, #14]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d102      	bne.n	8004fb4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fae:	7b3b      	ldrb	r3, [r7, #12]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d001      	beq.n	8004fb8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e055      	b.n	8005064 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fc8:	e01d      	b.n	8005006 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d108      	bne.n	8004fe2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fd0:	7bbb      	ldrb	r3, [r7, #14]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d105      	bne.n	8004fe2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fd6:	7b7b      	ldrb	r3, [r7, #13]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d102      	bne.n	8004fe2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fdc:	7b3b      	ldrb	r3, [r7, #12]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d001      	beq.n	8004fe6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e03e      	b.n	8005064 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2202      	movs	r2, #2
 8004fea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2202      	movs	r2, #2
 8005002:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <HAL_TIM_Encoder_Start+0xc4>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b04      	cmp	r3, #4
 8005010:	d008      	beq.n	8005024 <HAL_TIM_Encoder_Start+0xd4>
 8005012:	e00f      	b.n	8005034 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2201      	movs	r2, #1
 800501a:	2100      	movs	r1, #0
 800501c:	4618      	mov	r0, r3
 800501e:	f000 f8b1 	bl	8005184 <TIM_CCxChannelCmd>
      break;
 8005022:	e016      	b.n	8005052 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2201      	movs	r2, #1
 800502a:	2104      	movs	r1, #4
 800502c:	4618      	mov	r0, r3
 800502e:	f000 f8a9 	bl	8005184 <TIM_CCxChannelCmd>
      break;
 8005032:	e00e      	b.n	8005052 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2201      	movs	r2, #1
 800503a:	2100      	movs	r1, #0
 800503c:	4618      	mov	r0, r3
 800503e:	f000 f8a1 	bl	8005184 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2201      	movs	r2, #1
 8005048:	2104      	movs	r1, #4
 800504a:	4618      	mov	r0, r3
 800504c:	f000 f89a 	bl	8005184 <TIM_CCxChannelCmd>
      break;
 8005050:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f042 0201 	orr.w	r2, r2, #1
 8005060:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a3a      	ldr	r2, [pc, #232]	@ (8005168 <TIM_Base_SetConfig+0xfc>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00f      	beq.n	80050a4 <TIM_Base_SetConfig+0x38>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800508a:	d00b      	beq.n	80050a4 <TIM_Base_SetConfig+0x38>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a37      	ldr	r2, [pc, #220]	@ (800516c <TIM_Base_SetConfig+0x100>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d007      	beq.n	80050a4 <TIM_Base_SetConfig+0x38>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a36      	ldr	r2, [pc, #216]	@ (8005170 <TIM_Base_SetConfig+0x104>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d003      	beq.n	80050a4 <TIM_Base_SetConfig+0x38>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a35      	ldr	r2, [pc, #212]	@ (8005174 <TIM_Base_SetConfig+0x108>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d108      	bne.n	80050b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a2b      	ldr	r2, [pc, #172]	@ (8005168 <TIM_Base_SetConfig+0xfc>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d01b      	beq.n	80050f6 <TIM_Base_SetConfig+0x8a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050c4:	d017      	beq.n	80050f6 <TIM_Base_SetConfig+0x8a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a28      	ldr	r2, [pc, #160]	@ (800516c <TIM_Base_SetConfig+0x100>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d013      	beq.n	80050f6 <TIM_Base_SetConfig+0x8a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a27      	ldr	r2, [pc, #156]	@ (8005170 <TIM_Base_SetConfig+0x104>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d00f      	beq.n	80050f6 <TIM_Base_SetConfig+0x8a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a26      	ldr	r2, [pc, #152]	@ (8005174 <TIM_Base_SetConfig+0x108>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00b      	beq.n	80050f6 <TIM_Base_SetConfig+0x8a>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a25      	ldr	r2, [pc, #148]	@ (8005178 <TIM_Base_SetConfig+0x10c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d007      	beq.n	80050f6 <TIM_Base_SetConfig+0x8a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a24      	ldr	r2, [pc, #144]	@ (800517c <TIM_Base_SetConfig+0x110>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d003      	beq.n	80050f6 <TIM_Base_SetConfig+0x8a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a23      	ldr	r2, [pc, #140]	@ (8005180 <TIM_Base_SetConfig+0x114>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d108      	bne.n	8005108 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4313      	orrs	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a0e      	ldr	r2, [pc, #56]	@ (8005168 <TIM_Base_SetConfig+0xfc>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d103      	bne.n	800513c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	691a      	ldr	r2, [r3, #16]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b01      	cmp	r3, #1
 800514c:	d105      	bne.n	800515a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f023 0201 	bic.w	r2, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	611a      	str	r2, [r3, #16]
  }
}
 800515a:	bf00      	nop
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40010000 	.word	0x40010000
 800516c:	40000400 	.word	0x40000400
 8005170:	40000800 	.word	0x40000800
 8005174:	40000c00 	.word	0x40000c00
 8005178:	40014000 	.word	0x40014000
 800517c:	40014400 	.word	0x40014400
 8005180:	40014800 	.word	0x40014800

08005184 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f003 031f 	and.w	r3, r3, #31
 8005196:	2201      	movs	r2, #1
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a1a      	ldr	r2, [r3, #32]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	43db      	mvns	r3, r3
 80051a6:	401a      	ands	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a1a      	ldr	r2, [r3, #32]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f003 031f 	and.w	r3, r3, #31
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	fa01 f303 	lsl.w	r3, r1, r3
 80051bc:	431a      	orrs	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	621a      	str	r2, [r3, #32]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
	...

080051d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e050      	b.n	800528a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800520e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a1c      	ldr	r2, [pc, #112]	@ (8005298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d018      	beq.n	800525e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005234:	d013      	beq.n	800525e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a18      	ldr	r2, [pc, #96]	@ (800529c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00e      	beq.n	800525e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a16      	ldr	r2, [pc, #88]	@ (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d009      	beq.n	800525e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a15      	ldr	r2, [pc, #84]	@ (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d004      	beq.n	800525e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a13      	ldr	r2, [pc, #76]	@ (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d10c      	bne.n	8005278 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005264:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	4313      	orrs	r3, r2
 800526e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40010000 	.word	0x40010000
 800529c:	40000400 	.word	0x40000400
 80052a0:	40000800 	.word	0x40000800
 80052a4:	40000c00 	.word	0x40000c00
 80052a8:	40014000 	.word	0x40014000

080052ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e042      	b.n	8005344 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fc fe1e 	bl	8001f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2224      	movs	r2, #36	@ 0x24
 80052dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f973 	bl	80055dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005304:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695a      	ldr	r2, [r3, #20]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005314:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68da      	ldr	r2, [r3, #12]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005324:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2220      	movs	r2, #32
 8005330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2220      	movs	r2, #32
 8005338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b08a      	sub	sp, #40	@ 0x28
 8005350:	af02      	add	r7, sp, #8
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	4613      	mov	r3, r2
 800535a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b20      	cmp	r3, #32
 800536a:	d175      	bne.n	8005458 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <HAL_UART_Transmit+0x2c>
 8005372:	88fb      	ldrh	r3, [r7, #6]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e06e      	b.n	800545a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2221      	movs	r2, #33	@ 0x21
 8005386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800538a:	f7fc ff1d 	bl	80021c8 <HAL_GetTick>
 800538e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	88fa      	ldrh	r2, [r7, #6]
 8005394:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	88fa      	ldrh	r2, [r7, #6]
 800539a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053a4:	d108      	bne.n	80053b8 <HAL_UART_Transmit+0x6c>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d104      	bne.n	80053b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	61bb      	str	r3, [r7, #24]
 80053b6:	e003      	b.n	80053c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053bc:	2300      	movs	r3, #0
 80053be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053c0:	e02e      	b.n	8005420 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2200      	movs	r2, #0
 80053ca:	2180      	movs	r1, #128	@ 0x80
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 f848 	bl	8005462 <UART_WaitOnFlagUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d005      	beq.n	80053e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2220      	movs	r2, #32
 80053dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e03a      	b.n	800545a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10b      	bne.n	8005402 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	3302      	adds	r3, #2
 80053fe:	61bb      	str	r3, [r7, #24]
 8005400:	e007      	b.n	8005412 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	781a      	ldrb	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	3301      	adds	r3, #1
 8005410:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005416:	b29b      	uxth	r3, r3
 8005418:	3b01      	subs	r3, #1
 800541a:	b29a      	uxth	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005424:	b29b      	uxth	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1cb      	bne.n	80053c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2200      	movs	r2, #0
 8005432:	2140      	movs	r1, #64	@ 0x40
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 f814 	bl	8005462 <UART_WaitOnFlagUntilTimeout>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d005      	beq.n	800544c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2220      	movs	r2, #32
 8005444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e006      	b.n	800545a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	e000      	b.n	800545a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005458:	2302      	movs	r3, #2
  }
}
 800545a:	4618      	mov	r0, r3
 800545c:	3720      	adds	r7, #32
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b086      	sub	sp, #24
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	603b      	str	r3, [r7, #0]
 800546e:	4613      	mov	r3, r2
 8005470:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005472:	e03b      	b.n	80054ec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547a:	d037      	beq.n	80054ec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800547c:	f7fc fea4 	bl	80021c8 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	6a3a      	ldr	r2, [r7, #32]
 8005488:	429a      	cmp	r2, r3
 800548a:	d302      	bcc.n	8005492 <UART_WaitOnFlagUntilTimeout+0x30>
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e03a      	b.n	800550c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d023      	beq.n	80054ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b80      	cmp	r3, #128	@ 0x80
 80054a8:	d020      	beq.n	80054ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b40      	cmp	r3, #64	@ 0x40
 80054ae:	d01d      	beq.n	80054ec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	d116      	bne.n	80054ec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80054be:	2300      	movs	r3, #0
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	617b      	str	r3, [r7, #20]
 80054d2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 f81d 	bl	8005514 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2208      	movs	r2, #8
 80054de:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e00f      	b.n	800550c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	4013      	ands	r3, r2
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	bf0c      	ite	eq
 80054fc:	2301      	moveq	r3, #1
 80054fe:	2300      	movne	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	461a      	mov	r2, r3
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	429a      	cmp	r2, r3
 8005508:	d0b4      	beq.n	8005474 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005514:	b480      	push	{r7}
 8005516:	b095      	sub	sp, #84	@ 0x54
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	330c      	adds	r3, #12
 8005522:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005526:	e853 3f00 	ldrex	r3, [r3]
 800552a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800552c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005532:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	330c      	adds	r3, #12
 800553a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800553c:	643a      	str	r2, [r7, #64]	@ 0x40
 800553e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005540:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005542:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005544:	e841 2300 	strex	r3, r2, [r1]
 8005548:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800554a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1e5      	bne.n	800551c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3314      	adds	r3, #20
 8005556:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	e853 3f00 	ldrex	r3, [r3]
 800555e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f023 0301 	bic.w	r3, r3, #1
 8005566:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3314      	adds	r3, #20
 800556e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005570:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005572:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005574:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005576:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005578:	e841 2300 	strex	r3, r2, [r1]
 800557c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1e5      	bne.n	8005550 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005588:	2b01      	cmp	r3, #1
 800558a:	d119      	bne.n	80055c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	330c      	adds	r3, #12
 8005592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	e853 3f00 	ldrex	r3, [r3]
 800559a:	60bb      	str	r3, [r7, #8]
   return(result);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f023 0310 	bic.w	r3, r3, #16
 80055a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	330c      	adds	r3, #12
 80055aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055ac:	61ba      	str	r2, [r7, #24]
 80055ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b0:	6979      	ldr	r1, [r7, #20]
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	e841 2300 	strex	r3, r2, [r1]
 80055b8:	613b      	str	r3, [r7, #16]
   return(result);
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e5      	bne.n	800558c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80055ce:	bf00      	nop
 80055d0:	3754      	adds	r7, #84	@ 0x54
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
	...

080055dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055e0:	b0c0      	sub	sp, #256	@ 0x100
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f8:	68d9      	ldr	r1, [r3, #12]
 80055fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	ea40 0301 	orr.w	r3, r0, r1
 8005604:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	431a      	orrs	r2, r3
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	431a      	orrs	r2, r3
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005634:	f021 010c 	bic.w	r1, r1, #12
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005642:	430b      	orrs	r3, r1
 8005644:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005656:	6999      	ldr	r1, [r3, #24]
 8005658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	ea40 0301 	orr.w	r3, r0, r1
 8005662:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	4b8f      	ldr	r3, [pc, #572]	@ (80058a8 <UART_SetConfig+0x2cc>)
 800566c:	429a      	cmp	r2, r3
 800566e:	d005      	beq.n	800567c <UART_SetConfig+0xa0>
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	4b8d      	ldr	r3, [pc, #564]	@ (80058ac <UART_SetConfig+0x2d0>)
 8005678:	429a      	cmp	r2, r3
 800567a:	d104      	bne.n	8005686 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800567c:	f7ff fbae 	bl	8004ddc <HAL_RCC_GetPCLK2Freq>
 8005680:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005684:	e003      	b.n	800568e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005686:	f7ff fb95 	bl	8004db4 <HAL_RCC_GetPCLK1Freq>
 800568a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800568e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005698:	f040 810c 	bne.w	80058b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800569c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056a0:	2200      	movs	r2, #0
 80056a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80056aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80056ae:	4622      	mov	r2, r4
 80056b0:	462b      	mov	r3, r5
 80056b2:	1891      	adds	r1, r2, r2
 80056b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80056b6:	415b      	adcs	r3, r3
 80056b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80056be:	4621      	mov	r1, r4
 80056c0:	eb12 0801 	adds.w	r8, r2, r1
 80056c4:	4629      	mov	r1, r5
 80056c6:	eb43 0901 	adc.w	r9, r3, r1
 80056ca:	f04f 0200 	mov.w	r2, #0
 80056ce:	f04f 0300 	mov.w	r3, #0
 80056d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056de:	4690      	mov	r8, r2
 80056e0:	4699      	mov	r9, r3
 80056e2:	4623      	mov	r3, r4
 80056e4:	eb18 0303 	adds.w	r3, r8, r3
 80056e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80056ec:	462b      	mov	r3, r5
 80056ee:	eb49 0303 	adc.w	r3, r9, r3
 80056f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80056f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005702:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005706:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800570a:	460b      	mov	r3, r1
 800570c:	18db      	adds	r3, r3, r3
 800570e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005710:	4613      	mov	r3, r2
 8005712:	eb42 0303 	adc.w	r3, r2, r3
 8005716:	657b      	str	r3, [r7, #84]	@ 0x54
 8005718:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800571c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005720:	f7fa ffc2 	bl	80006a8 <__aeabi_uldivmod>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	4b61      	ldr	r3, [pc, #388]	@ (80058b0 <UART_SetConfig+0x2d4>)
 800572a:	fba3 2302 	umull	r2, r3, r3, r2
 800572e:	095b      	lsrs	r3, r3, #5
 8005730:	011c      	lsls	r4, r3, #4
 8005732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005736:	2200      	movs	r2, #0
 8005738:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800573c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005740:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005744:	4642      	mov	r2, r8
 8005746:	464b      	mov	r3, r9
 8005748:	1891      	adds	r1, r2, r2
 800574a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800574c:	415b      	adcs	r3, r3
 800574e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005750:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005754:	4641      	mov	r1, r8
 8005756:	eb12 0a01 	adds.w	sl, r2, r1
 800575a:	4649      	mov	r1, r9
 800575c:	eb43 0b01 	adc.w	fp, r3, r1
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800576c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005770:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005774:	4692      	mov	sl, r2
 8005776:	469b      	mov	fp, r3
 8005778:	4643      	mov	r3, r8
 800577a:	eb1a 0303 	adds.w	r3, sl, r3
 800577e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005782:	464b      	mov	r3, r9
 8005784:	eb4b 0303 	adc.w	r3, fp, r3
 8005788:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005798:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800579c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80057a0:	460b      	mov	r3, r1
 80057a2:	18db      	adds	r3, r3, r3
 80057a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80057a6:	4613      	mov	r3, r2
 80057a8:	eb42 0303 	adc.w	r3, r2, r3
 80057ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80057b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80057b6:	f7fa ff77 	bl	80006a8 <__aeabi_uldivmod>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4611      	mov	r1, r2
 80057c0:	4b3b      	ldr	r3, [pc, #236]	@ (80058b0 <UART_SetConfig+0x2d4>)
 80057c2:	fba3 2301 	umull	r2, r3, r3, r1
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	2264      	movs	r2, #100	@ 0x64
 80057ca:	fb02 f303 	mul.w	r3, r2, r3
 80057ce:	1acb      	subs	r3, r1, r3
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80057d6:	4b36      	ldr	r3, [pc, #216]	@ (80058b0 <UART_SetConfig+0x2d4>)
 80057d8:	fba3 2302 	umull	r2, r3, r3, r2
 80057dc:	095b      	lsrs	r3, r3, #5
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80057e4:	441c      	add	r4, r3
 80057e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80057f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80057f8:	4642      	mov	r2, r8
 80057fa:	464b      	mov	r3, r9
 80057fc:	1891      	adds	r1, r2, r2
 80057fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005800:	415b      	adcs	r3, r3
 8005802:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005804:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005808:	4641      	mov	r1, r8
 800580a:	1851      	adds	r1, r2, r1
 800580c:	6339      	str	r1, [r7, #48]	@ 0x30
 800580e:	4649      	mov	r1, r9
 8005810:	414b      	adcs	r3, r1
 8005812:	637b      	str	r3, [r7, #52]	@ 0x34
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005820:	4659      	mov	r1, fp
 8005822:	00cb      	lsls	r3, r1, #3
 8005824:	4651      	mov	r1, sl
 8005826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800582a:	4651      	mov	r1, sl
 800582c:	00ca      	lsls	r2, r1, #3
 800582e:	4610      	mov	r0, r2
 8005830:	4619      	mov	r1, r3
 8005832:	4603      	mov	r3, r0
 8005834:	4642      	mov	r2, r8
 8005836:	189b      	adds	r3, r3, r2
 8005838:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800583c:	464b      	mov	r3, r9
 800583e:	460a      	mov	r2, r1
 8005840:	eb42 0303 	adc.w	r3, r2, r3
 8005844:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005854:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005858:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800585c:	460b      	mov	r3, r1
 800585e:	18db      	adds	r3, r3, r3
 8005860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005862:	4613      	mov	r3, r2
 8005864:	eb42 0303 	adc.w	r3, r2, r3
 8005868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800586a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800586e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005872:	f7fa ff19 	bl	80006a8 <__aeabi_uldivmod>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4b0d      	ldr	r3, [pc, #52]	@ (80058b0 <UART_SetConfig+0x2d4>)
 800587c:	fba3 1302 	umull	r1, r3, r3, r2
 8005880:	095b      	lsrs	r3, r3, #5
 8005882:	2164      	movs	r1, #100	@ 0x64
 8005884:	fb01 f303 	mul.w	r3, r1, r3
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	3332      	adds	r3, #50	@ 0x32
 800588e:	4a08      	ldr	r2, [pc, #32]	@ (80058b0 <UART_SetConfig+0x2d4>)
 8005890:	fba2 2303 	umull	r2, r3, r2, r3
 8005894:	095b      	lsrs	r3, r3, #5
 8005896:	f003 0207 	and.w	r2, r3, #7
 800589a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4422      	add	r2, r4
 80058a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058a4:	e106      	b.n	8005ab4 <UART_SetConfig+0x4d8>
 80058a6:	bf00      	nop
 80058a8:	40011000 	.word	0x40011000
 80058ac:	40011400 	.word	0x40011400
 80058b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80058be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80058c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80058c6:	4642      	mov	r2, r8
 80058c8:	464b      	mov	r3, r9
 80058ca:	1891      	adds	r1, r2, r2
 80058cc:	6239      	str	r1, [r7, #32]
 80058ce:	415b      	adcs	r3, r3
 80058d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80058d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058d6:	4641      	mov	r1, r8
 80058d8:	1854      	adds	r4, r2, r1
 80058da:	4649      	mov	r1, r9
 80058dc:	eb43 0501 	adc.w	r5, r3, r1
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	f04f 0300 	mov.w	r3, #0
 80058e8:	00eb      	lsls	r3, r5, #3
 80058ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058ee:	00e2      	lsls	r2, r4, #3
 80058f0:	4614      	mov	r4, r2
 80058f2:	461d      	mov	r5, r3
 80058f4:	4643      	mov	r3, r8
 80058f6:	18e3      	adds	r3, r4, r3
 80058f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058fc:	464b      	mov	r3, r9
 80058fe:	eb45 0303 	adc.w	r3, r5, r3
 8005902:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005912:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	f04f 0300 	mov.w	r3, #0
 800591e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005922:	4629      	mov	r1, r5
 8005924:	008b      	lsls	r3, r1, #2
 8005926:	4621      	mov	r1, r4
 8005928:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800592c:	4621      	mov	r1, r4
 800592e:	008a      	lsls	r2, r1, #2
 8005930:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005934:	f7fa feb8 	bl	80006a8 <__aeabi_uldivmod>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	4b60      	ldr	r3, [pc, #384]	@ (8005ac0 <UART_SetConfig+0x4e4>)
 800593e:	fba3 2302 	umull	r2, r3, r3, r2
 8005942:	095b      	lsrs	r3, r3, #5
 8005944:	011c      	lsls	r4, r3, #4
 8005946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800594a:	2200      	movs	r2, #0
 800594c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005950:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005954:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005958:	4642      	mov	r2, r8
 800595a:	464b      	mov	r3, r9
 800595c:	1891      	adds	r1, r2, r2
 800595e:	61b9      	str	r1, [r7, #24]
 8005960:	415b      	adcs	r3, r3
 8005962:	61fb      	str	r3, [r7, #28]
 8005964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005968:	4641      	mov	r1, r8
 800596a:	1851      	adds	r1, r2, r1
 800596c:	6139      	str	r1, [r7, #16]
 800596e:	4649      	mov	r1, r9
 8005970:	414b      	adcs	r3, r1
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	f04f 0300 	mov.w	r3, #0
 800597c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005980:	4659      	mov	r1, fp
 8005982:	00cb      	lsls	r3, r1, #3
 8005984:	4651      	mov	r1, sl
 8005986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800598a:	4651      	mov	r1, sl
 800598c:	00ca      	lsls	r2, r1, #3
 800598e:	4610      	mov	r0, r2
 8005990:	4619      	mov	r1, r3
 8005992:	4603      	mov	r3, r0
 8005994:	4642      	mov	r2, r8
 8005996:	189b      	adds	r3, r3, r2
 8005998:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800599c:	464b      	mov	r3, r9
 800599e:	460a      	mov	r2, r1
 80059a0:	eb42 0303 	adc.w	r3, r2, r3
 80059a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80059c0:	4649      	mov	r1, r9
 80059c2:	008b      	lsls	r3, r1, #2
 80059c4:	4641      	mov	r1, r8
 80059c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059ca:	4641      	mov	r1, r8
 80059cc:	008a      	lsls	r2, r1, #2
 80059ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80059d2:	f7fa fe69 	bl	80006a8 <__aeabi_uldivmod>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	4611      	mov	r1, r2
 80059dc:	4b38      	ldr	r3, [pc, #224]	@ (8005ac0 <UART_SetConfig+0x4e4>)
 80059de:	fba3 2301 	umull	r2, r3, r3, r1
 80059e2:	095b      	lsrs	r3, r3, #5
 80059e4:	2264      	movs	r2, #100	@ 0x64
 80059e6:	fb02 f303 	mul.w	r3, r2, r3
 80059ea:	1acb      	subs	r3, r1, r3
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	3332      	adds	r3, #50	@ 0x32
 80059f0:	4a33      	ldr	r2, [pc, #204]	@ (8005ac0 <UART_SetConfig+0x4e4>)
 80059f2:	fba2 2303 	umull	r2, r3, r2, r3
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059fc:	441c      	add	r4, r3
 80059fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a02:	2200      	movs	r2, #0
 8005a04:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a06:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a0c:	4642      	mov	r2, r8
 8005a0e:	464b      	mov	r3, r9
 8005a10:	1891      	adds	r1, r2, r2
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	415b      	adcs	r3, r3
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a1c:	4641      	mov	r1, r8
 8005a1e:	1851      	adds	r1, r2, r1
 8005a20:	6039      	str	r1, [r7, #0]
 8005a22:	4649      	mov	r1, r9
 8005a24:	414b      	adcs	r3, r1
 8005a26:	607b      	str	r3, [r7, #4]
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	f04f 0300 	mov.w	r3, #0
 8005a30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a34:	4659      	mov	r1, fp
 8005a36:	00cb      	lsls	r3, r1, #3
 8005a38:	4651      	mov	r1, sl
 8005a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a3e:	4651      	mov	r1, sl
 8005a40:	00ca      	lsls	r2, r1, #3
 8005a42:	4610      	mov	r0, r2
 8005a44:	4619      	mov	r1, r3
 8005a46:	4603      	mov	r3, r0
 8005a48:	4642      	mov	r2, r8
 8005a4a:	189b      	adds	r3, r3, r2
 8005a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a4e:	464b      	mov	r3, r9
 8005a50:	460a      	mov	r2, r1
 8005a52:	eb42 0303 	adc.w	r3, r2, r3
 8005a56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a62:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a64:	f04f 0200 	mov.w	r2, #0
 8005a68:	f04f 0300 	mov.w	r3, #0
 8005a6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a70:	4649      	mov	r1, r9
 8005a72:	008b      	lsls	r3, r1, #2
 8005a74:	4641      	mov	r1, r8
 8005a76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a7a:	4641      	mov	r1, r8
 8005a7c:	008a      	lsls	r2, r1, #2
 8005a7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a82:	f7fa fe11 	bl	80006a8 <__aeabi_uldivmod>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac0 <UART_SetConfig+0x4e4>)
 8005a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a90:	095b      	lsrs	r3, r3, #5
 8005a92:	2164      	movs	r1, #100	@ 0x64
 8005a94:	fb01 f303 	mul.w	r3, r1, r3
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	3332      	adds	r3, #50	@ 0x32
 8005a9e:	4a08      	ldr	r2, [pc, #32]	@ (8005ac0 <UART_SetConfig+0x4e4>)
 8005aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa4:	095b      	lsrs	r3, r3, #5
 8005aa6:	f003 020f 	and.w	r2, r3, #15
 8005aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4422      	add	r2, r4
 8005ab2:	609a      	str	r2, [r3, #8]
}
 8005ab4:	bf00      	nop
 8005ab6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005aba:	46bd      	mov	sp, r7
 8005abc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ac0:	51eb851f 	.word	0x51eb851f

08005ac4 <sniprintf>:
 8005ac4:	b40c      	push	{r2, r3}
 8005ac6:	b530      	push	{r4, r5, lr}
 8005ac8:	4b17      	ldr	r3, [pc, #92]	@ (8005b28 <sniprintf+0x64>)
 8005aca:	1e0c      	subs	r4, r1, #0
 8005acc:	681d      	ldr	r5, [r3, #0]
 8005ace:	b09d      	sub	sp, #116	@ 0x74
 8005ad0:	da08      	bge.n	8005ae4 <sniprintf+0x20>
 8005ad2:	238b      	movs	r3, #139	@ 0x8b
 8005ad4:	602b      	str	r3, [r5, #0]
 8005ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8005ada:	b01d      	add	sp, #116	@ 0x74
 8005adc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ae0:	b002      	add	sp, #8
 8005ae2:	4770      	bx	lr
 8005ae4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005ae8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005aec:	bf14      	ite	ne
 8005aee:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005af2:	4623      	moveq	r3, r4
 8005af4:	9304      	str	r3, [sp, #16]
 8005af6:	9307      	str	r3, [sp, #28]
 8005af8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005afc:	9002      	str	r0, [sp, #8]
 8005afe:	9006      	str	r0, [sp, #24]
 8005b00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b04:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005b06:	ab21      	add	r3, sp, #132	@ 0x84
 8005b08:	a902      	add	r1, sp, #8
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	f000 f995 	bl	8005e3c <_svfiprintf_r>
 8005b12:	1c43      	adds	r3, r0, #1
 8005b14:	bfbc      	itt	lt
 8005b16:	238b      	movlt	r3, #139	@ 0x8b
 8005b18:	602b      	strlt	r3, [r5, #0]
 8005b1a:	2c00      	cmp	r4, #0
 8005b1c:	d0dd      	beq.n	8005ada <sniprintf+0x16>
 8005b1e:	9b02      	ldr	r3, [sp, #8]
 8005b20:	2200      	movs	r2, #0
 8005b22:	701a      	strb	r2, [r3, #0]
 8005b24:	e7d9      	b.n	8005ada <sniprintf+0x16>
 8005b26:	bf00      	nop
 8005b28:	2000000c 	.word	0x2000000c

08005b2c <memset>:
 8005b2c:	4402      	add	r2, r0
 8005b2e:	4603      	mov	r3, r0
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d100      	bne.n	8005b36 <memset+0xa>
 8005b34:	4770      	bx	lr
 8005b36:	f803 1b01 	strb.w	r1, [r3], #1
 8005b3a:	e7f9      	b.n	8005b30 <memset+0x4>

08005b3c <__errno>:
 8005b3c:	4b01      	ldr	r3, [pc, #4]	@ (8005b44 <__errno+0x8>)
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	2000000c 	.word	0x2000000c

08005b48 <__libc_init_array>:
 8005b48:	b570      	push	{r4, r5, r6, lr}
 8005b4a:	4d0d      	ldr	r5, [pc, #52]	@ (8005b80 <__libc_init_array+0x38>)
 8005b4c:	4c0d      	ldr	r4, [pc, #52]	@ (8005b84 <__libc_init_array+0x3c>)
 8005b4e:	1b64      	subs	r4, r4, r5
 8005b50:	10a4      	asrs	r4, r4, #2
 8005b52:	2600      	movs	r6, #0
 8005b54:	42a6      	cmp	r6, r4
 8005b56:	d109      	bne.n	8005b6c <__libc_init_array+0x24>
 8005b58:	4d0b      	ldr	r5, [pc, #44]	@ (8005b88 <__libc_init_array+0x40>)
 8005b5a:	4c0c      	ldr	r4, [pc, #48]	@ (8005b8c <__libc_init_array+0x44>)
 8005b5c:	f000 fc66 	bl	800642c <_init>
 8005b60:	1b64      	subs	r4, r4, r5
 8005b62:	10a4      	asrs	r4, r4, #2
 8005b64:	2600      	movs	r6, #0
 8005b66:	42a6      	cmp	r6, r4
 8005b68:	d105      	bne.n	8005b76 <__libc_init_array+0x2e>
 8005b6a:	bd70      	pop	{r4, r5, r6, pc}
 8005b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b70:	4798      	blx	r3
 8005b72:	3601      	adds	r6, #1
 8005b74:	e7ee      	b.n	8005b54 <__libc_init_array+0xc>
 8005b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7a:	4798      	blx	r3
 8005b7c:	3601      	adds	r6, #1
 8005b7e:	e7f2      	b.n	8005b66 <__libc_init_array+0x1e>
 8005b80:	0800650c 	.word	0x0800650c
 8005b84:	0800650c 	.word	0x0800650c
 8005b88:	0800650c 	.word	0x0800650c
 8005b8c:	08006510 	.word	0x08006510

08005b90 <__retarget_lock_acquire_recursive>:
 8005b90:	4770      	bx	lr

08005b92 <__retarget_lock_release_recursive>:
 8005b92:	4770      	bx	lr

08005b94 <_free_r>:
 8005b94:	b538      	push	{r3, r4, r5, lr}
 8005b96:	4605      	mov	r5, r0
 8005b98:	2900      	cmp	r1, #0
 8005b9a:	d041      	beq.n	8005c20 <_free_r+0x8c>
 8005b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ba0:	1f0c      	subs	r4, r1, #4
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	bfb8      	it	lt
 8005ba6:	18e4      	addlt	r4, r4, r3
 8005ba8:	f000 f8e0 	bl	8005d6c <__malloc_lock>
 8005bac:	4a1d      	ldr	r2, [pc, #116]	@ (8005c24 <_free_r+0x90>)
 8005bae:	6813      	ldr	r3, [r2, #0]
 8005bb0:	b933      	cbnz	r3, 8005bc0 <_free_r+0x2c>
 8005bb2:	6063      	str	r3, [r4, #4]
 8005bb4:	6014      	str	r4, [r2, #0]
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bbc:	f000 b8dc 	b.w	8005d78 <__malloc_unlock>
 8005bc0:	42a3      	cmp	r3, r4
 8005bc2:	d908      	bls.n	8005bd6 <_free_r+0x42>
 8005bc4:	6820      	ldr	r0, [r4, #0]
 8005bc6:	1821      	adds	r1, r4, r0
 8005bc8:	428b      	cmp	r3, r1
 8005bca:	bf01      	itttt	eq
 8005bcc:	6819      	ldreq	r1, [r3, #0]
 8005bce:	685b      	ldreq	r3, [r3, #4]
 8005bd0:	1809      	addeq	r1, r1, r0
 8005bd2:	6021      	streq	r1, [r4, #0]
 8005bd4:	e7ed      	b.n	8005bb2 <_free_r+0x1e>
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	b10b      	cbz	r3, 8005be0 <_free_r+0x4c>
 8005bdc:	42a3      	cmp	r3, r4
 8005bde:	d9fa      	bls.n	8005bd6 <_free_r+0x42>
 8005be0:	6811      	ldr	r1, [r2, #0]
 8005be2:	1850      	adds	r0, r2, r1
 8005be4:	42a0      	cmp	r0, r4
 8005be6:	d10b      	bne.n	8005c00 <_free_r+0x6c>
 8005be8:	6820      	ldr	r0, [r4, #0]
 8005bea:	4401      	add	r1, r0
 8005bec:	1850      	adds	r0, r2, r1
 8005bee:	4283      	cmp	r3, r0
 8005bf0:	6011      	str	r1, [r2, #0]
 8005bf2:	d1e0      	bne.n	8005bb6 <_free_r+0x22>
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	6053      	str	r3, [r2, #4]
 8005bfa:	4408      	add	r0, r1
 8005bfc:	6010      	str	r0, [r2, #0]
 8005bfe:	e7da      	b.n	8005bb6 <_free_r+0x22>
 8005c00:	d902      	bls.n	8005c08 <_free_r+0x74>
 8005c02:	230c      	movs	r3, #12
 8005c04:	602b      	str	r3, [r5, #0]
 8005c06:	e7d6      	b.n	8005bb6 <_free_r+0x22>
 8005c08:	6820      	ldr	r0, [r4, #0]
 8005c0a:	1821      	adds	r1, r4, r0
 8005c0c:	428b      	cmp	r3, r1
 8005c0e:	bf04      	itt	eq
 8005c10:	6819      	ldreq	r1, [r3, #0]
 8005c12:	685b      	ldreq	r3, [r3, #4]
 8005c14:	6063      	str	r3, [r4, #4]
 8005c16:	bf04      	itt	eq
 8005c18:	1809      	addeq	r1, r1, r0
 8005c1a:	6021      	streq	r1, [r4, #0]
 8005c1c:	6054      	str	r4, [r2, #4]
 8005c1e:	e7ca      	b.n	8005bb6 <_free_r+0x22>
 8005c20:	bd38      	pop	{r3, r4, r5, pc}
 8005c22:	bf00      	nop
 8005c24:	20000344 	.word	0x20000344

08005c28 <sbrk_aligned>:
 8005c28:	b570      	push	{r4, r5, r6, lr}
 8005c2a:	4e0f      	ldr	r6, [pc, #60]	@ (8005c68 <sbrk_aligned+0x40>)
 8005c2c:	460c      	mov	r4, r1
 8005c2e:	6831      	ldr	r1, [r6, #0]
 8005c30:	4605      	mov	r5, r0
 8005c32:	b911      	cbnz	r1, 8005c3a <sbrk_aligned+0x12>
 8005c34:	f000 fba6 	bl	8006384 <_sbrk_r>
 8005c38:	6030      	str	r0, [r6, #0]
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	f000 fba1 	bl	8006384 <_sbrk_r>
 8005c42:	1c43      	adds	r3, r0, #1
 8005c44:	d103      	bne.n	8005c4e <sbrk_aligned+0x26>
 8005c46:	f04f 34ff 	mov.w	r4, #4294967295
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	bd70      	pop	{r4, r5, r6, pc}
 8005c4e:	1cc4      	adds	r4, r0, #3
 8005c50:	f024 0403 	bic.w	r4, r4, #3
 8005c54:	42a0      	cmp	r0, r4
 8005c56:	d0f8      	beq.n	8005c4a <sbrk_aligned+0x22>
 8005c58:	1a21      	subs	r1, r4, r0
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	f000 fb92 	bl	8006384 <_sbrk_r>
 8005c60:	3001      	adds	r0, #1
 8005c62:	d1f2      	bne.n	8005c4a <sbrk_aligned+0x22>
 8005c64:	e7ef      	b.n	8005c46 <sbrk_aligned+0x1e>
 8005c66:	bf00      	nop
 8005c68:	20000340 	.word	0x20000340

08005c6c <_malloc_r>:
 8005c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c70:	1ccd      	adds	r5, r1, #3
 8005c72:	f025 0503 	bic.w	r5, r5, #3
 8005c76:	3508      	adds	r5, #8
 8005c78:	2d0c      	cmp	r5, #12
 8005c7a:	bf38      	it	cc
 8005c7c:	250c      	movcc	r5, #12
 8005c7e:	2d00      	cmp	r5, #0
 8005c80:	4606      	mov	r6, r0
 8005c82:	db01      	blt.n	8005c88 <_malloc_r+0x1c>
 8005c84:	42a9      	cmp	r1, r5
 8005c86:	d904      	bls.n	8005c92 <_malloc_r+0x26>
 8005c88:	230c      	movs	r3, #12
 8005c8a:	6033      	str	r3, [r6, #0]
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d68 <_malloc_r+0xfc>
 8005c96:	f000 f869 	bl	8005d6c <__malloc_lock>
 8005c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c9e:	461c      	mov	r4, r3
 8005ca0:	bb44      	cbnz	r4, 8005cf4 <_malloc_r+0x88>
 8005ca2:	4629      	mov	r1, r5
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	f7ff ffbf 	bl	8005c28 <sbrk_aligned>
 8005caa:	1c43      	adds	r3, r0, #1
 8005cac:	4604      	mov	r4, r0
 8005cae:	d158      	bne.n	8005d62 <_malloc_r+0xf6>
 8005cb0:	f8d8 4000 	ldr.w	r4, [r8]
 8005cb4:	4627      	mov	r7, r4
 8005cb6:	2f00      	cmp	r7, #0
 8005cb8:	d143      	bne.n	8005d42 <_malloc_r+0xd6>
 8005cba:	2c00      	cmp	r4, #0
 8005cbc:	d04b      	beq.n	8005d56 <_malloc_r+0xea>
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	4639      	mov	r1, r7
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	eb04 0903 	add.w	r9, r4, r3
 8005cc8:	f000 fb5c 	bl	8006384 <_sbrk_r>
 8005ccc:	4581      	cmp	r9, r0
 8005cce:	d142      	bne.n	8005d56 <_malloc_r+0xea>
 8005cd0:	6821      	ldr	r1, [r4, #0]
 8005cd2:	1a6d      	subs	r5, r5, r1
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	f7ff ffa6 	bl	8005c28 <sbrk_aligned>
 8005cdc:	3001      	adds	r0, #1
 8005cde:	d03a      	beq.n	8005d56 <_malloc_r+0xea>
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	442b      	add	r3, r5
 8005ce4:	6023      	str	r3, [r4, #0]
 8005ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	bb62      	cbnz	r2, 8005d48 <_malloc_r+0xdc>
 8005cee:	f8c8 7000 	str.w	r7, [r8]
 8005cf2:	e00f      	b.n	8005d14 <_malloc_r+0xa8>
 8005cf4:	6822      	ldr	r2, [r4, #0]
 8005cf6:	1b52      	subs	r2, r2, r5
 8005cf8:	d420      	bmi.n	8005d3c <_malloc_r+0xd0>
 8005cfa:	2a0b      	cmp	r2, #11
 8005cfc:	d917      	bls.n	8005d2e <_malloc_r+0xc2>
 8005cfe:	1961      	adds	r1, r4, r5
 8005d00:	42a3      	cmp	r3, r4
 8005d02:	6025      	str	r5, [r4, #0]
 8005d04:	bf18      	it	ne
 8005d06:	6059      	strne	r1, [r3, #4]
 8005d08:	6863      	ldr	r3, [r4, #4]
 8005d0a:	bf08      	it	eq
 8005d0c:	f8c8 1000 	streq.w	r1, [r8]
 8005d10:	5162      	str	r2, [r4, r5]
 8005d12:	604b      	str	r3, [r1, #4]
 8005d14:	4630      	mov	r0, r6
 8005d16:	f000 f82f 	bl	8005d78 <__malloc_unlock>
 8005d1a:	f104 000b 	add.w	r0, r4, #11
 8005d1e:	1d23      	adds	r3, r4, #4
 8005d20:	f020 0007 	bic.w	r0, r0, #7
 8005d24:	1ac2      	subs	r2, r0, r3
 8005d26:	bf1c      	itt	ne
 8005d28:	1a1b      	subne	r3, r3, r0
 8005d2a:	50a3      	strne	r3, [r4, r2]
 8005d2c:	e7af      	b.n	8005c8e <_malloc_r+0x22>
 8005d2e:	6862      	ldr	r2, [r4, #4]
 8005d30:	42a3      	cmp	r3, r4
 8005d32:	bf0c      	ite	eq
 8005d34:	f8c8 2000 	streq.w	r2, [r8]
 8005d38:	605a      	strne	r2, [r3, #4]
 8005d3a:	e7eb      	b.n	8005d14 <_malloc_r+0xa8>
 8005d3c:	4623      	mov	r3, r4
 8005d3e:	6864      	ldr	r4, [r4, #4]
 8005d40:	e7ae      	b.n	8005ca0 <_malloc_r+0x34>
 8005d42:	463c      	mov	r4, r7
 8005d44:	687f      	ldr	r7, [r7, #4]
 8005d46:	e7b6      	b.n	8005cb6 <_malloc_r+0x4a>
 8005d48:	461a      	mov	r2, r3
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	42a3      	cmp	r3, r4
 8005d4e:	d1fb      	bne.n	8005d48 <_malloc_r+0xdc>
 8005d50:	2300      	movs	r3, #0
 8005d52:	6053      	str	r3, [r2, #4]
 8005d54:	e7de      	b.n	8005d14 <_malloc_r+0xa8>
 8005d56:	230c      	movs	r3, #12
 8005d58:	6033      	str	r3, [r6, #0]
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	f000 f80c 	bl	8005d78 <__malloc_unlock>
 8005d60:	e794      	b.n	8005c8c <_malloc_r+0x20>
 8005d62:	6005      	str	r5, [r0, #0]
 8005d64:	e7d6      	b.n	8005d14 <_malloc_r+0xa8>
 8005d66:	bf00      	nop
 8005d68:	20000344 	.word	0x20000344

08005d6c <__malloc_lock>:
 8005d6c:	4801      	ldr	r0, [pc, #4]	@ (8005d74 <__malloc_lock+0x8>)
 8005d6e:	f7ff bf0f 	b.w	8005b90 <__retarget_lock_acquire_recursive>
 8005d72:	bf00      	nop
 8005d74:	2000033c 	.word	0x2000033c

08005d78 <__malloc_unlock>:
 8005d78:	4801      	ldr	r0, [pc, #4]	@ (8005d80 <__malloc_unlock+0x8>)
 8005d7a:	f7ff bf0a 	b.w	8005b92 <__retarget_lock_release_recursive>
 8005d7e:	bf00      	nop
 8005d80:	2000033c 	.word	0x2000033c

08005d84 <__ssputs_r>:
 8005d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d88:	688e      	ldr	r6, [r1, #8]
 8005d8a:	461f      	mov	r7, r3
 8005d8c:	42be      	cmp	r6, r7
 8005d8e:	680b      	ldr	r3, [r1, #0]
 8005d90:	4682      	mov	sl, r0
 8005d92:	460c      	mov	r4, r1
 8005d94:	4690      	mov	r8, r2
 8005d96:	d82d      	bhi.n	8005df4 <__ssputs_r+0x70>
 8005d98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005da0:	d026      	beq.n	8005df0 <__ssputs_r+0x6c>
 8005da2:	6965      	ldr	r5, [r4, #20]
 8005da4:	6909      	ldr	r1, [r1, #16]
 8005da6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005daa:	eba3 0901 	sub.w	r9, r3, r1
 8005dae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005db2:	1c7b      	adds	r3, r7, #1
 8005db4:	444b      	add	r3, r9
 8005db6:	106d      	asrs	r5, r5, #1
 8005db8:	429d      	cmp	r5, r3
 8005dba:	bf38      	it	cc
 8005dbc:	461d      	movcc	r5, r3
 8005dbe:	0553      	lsls	r3, r2, #21
 8005dc0:	d527      	bpl.n	8005e12 <__ssputs_r+0x8e>
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	f7ff ff52 	bl	8005c6c <_malloc_r>
 8005dc8:	4606      	mov	r6, r0
 8005dca:	b360      	cbz	r0, 8005e26 <__ssputs_r+0xa2>
 8005dcc:	6921      	ldr	r1, [r4, #16]
 8005dce:	464a      	mov	r2, r9
 8005dd0:	f000 fae8 	bl	80063a4 <memcpy>
 8005dd4:	89a3      	ldrh	r3, [r4, #12]
 8005dd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dde:	81a3      	strh	r3, [r4, #12]
 8005de0:	6126      	str	r6, [r4, #16]
 8005de2:	6165      	str	r5, [r4, #20]
 8005de4:	444e      	add	r6, r9
 8005de6:	eba5 0509 	sub.w	r5, r5, r9
 8005dea:	6026      	str	r6, [r4, #0]
 8005dec:	60a5      	str	r5, [r4, #8]
 8005dee:	463e      	mov	r6, r7
 8005df0:	42be      	cmp	r6, r7
 8005df2:	d900      	bls.n	8005df6 <__ssputs_r+0x72>
 8005df4:	463e      	mov	r6, r7
 8005df6:	6820      	ldr	r0, [r4, #0]
 8005df8:	4632      	mov	r2, r6
 8005dfa:	4641      	mov	r1, r8
 8005dfc:	f000 faa8 	bl	8006350 <memmove>
 8005e00:	68a3      	ldr	r3, [r4, #8]
 8005e02:	1b9b      	subs	r3, r3, r6
 8005e04:	60a3      	str	r3, [r4, #8]
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	4433      	add	r3, r6
 8005e0a:	6023      	str	r3, [r4, #0]
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e12:	462a      	mov	r2, r5
 8005e14:	f000 fad4 	bl	80063c0 <_realloc_r>
 8005e18:	4606      	mov	r6, r0
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	d1e0      	bne.n	8005de0 <__ssputs_r+0x5c>
 8005e1e:	6921      	ldr	r1, [r4, #16]
 8005e20:	4650      	mov	r0, sl
 8005e22:	f7ff feb7 	bl	8005b94 <_free_r>
 8005e26:	230c      	movs	r3, #12
 8005e28:	f8ca 3000 	str.w	r3, [sl]
 8005e2c:	89a3      	ldrh	r3, [r4, #12]
 8005e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e32:	81a3      	strh	r3, [r4, #12]
 8005e34:	f04f 30ff 	mov.w	r0, #4294967295
 8005e38:	e7e9      	b.n	8005e0e <__ssputs_r+0x8a>
	...

08005e3c <_svfiprintf_r>:
 8005e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e40:	4698      	mov	r8, r3
 8005e42:	898b      	ldrh	r3, [r1, #12]
 8005e44:	061b      	lsls	r3, r3, #24
 8005e46:	b09d      	sub	sp, #116	@ 0x74
 8005e48:	4607      	mov	r7, r0
 8005e4a:	460d      	mov	r5, r1
 8005e4c:	4614      	mov	r4, r2
 8005e4e:	d510      	bpl.n	8005e72 <_svfiprintf_r+0x36>
 8005e50:	690b      	ldr	r3, [r1, #16]
 8005e52:	b973      	cbnz	r3, 8005e72 <_svfiprintf_r+0x36>
 8005e54:	2140      	movs	r1, #64	@ 0x40
 8005e56:	f7ff ff09 	bl	8005c6c <_malloc_r>
 8005e5a:	6028      	str	r0, [r5, #0]
 8005e5c:	6128      	str	r0, [r5, #16]
 8005e5e:	b930      	cbnz	r0, 8005e6e <_svfiprintf_r+0x32>
 8005e60:	230c      	movs	r3, #12
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	f04f 30ff 	mov.w	r0, #4294967295
 8005e68:	b01d      	add	sp, #116	@ 0x74
 8005e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e6e:	2340      	movs	r3, #64	@ 0x40
 8005e70:	616b      	str	r3, [r5, #20]
 8005e72:	2300      	movs	r3, #0
 8005e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e76:	2320      	movs	r3, #32
 8005e78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e80:	2330      	movs	r3, #48	@ 0x30
 8005e82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006020 <_svfiprintf_r+0x1e4>
 8005e86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e8a:	f04f 0901 	mov.w	r9, #1
 8005e8e:	4623      	mov	r3, r4
 8005e90:	469a      	mov	sl, r3
 8005e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e96:	b10a      	cbz	r2, 8005e9c <_svfiprintf_r+0x60>
 8005e98:	2a25      	cmp	r2, #37	@ 0x25
 8005e9a:	d1f9      	bne.n	8005e90 <_svfiprintf_r+0x54>
 8005e9c:	ebba 0b04 	subs.w	fp, sl, r4
 8005ea0:	d00b      	beq.n	8005eba <_svfiprintf_r+0x7e>
 8005ea2:	465b      	mov	r3, fp
 8005ea4:	4622      	mov	r2, r4
 8005ea6:	4629      	mov	r1, r5
 8005ea8:	4638      	mov	r0, r7
 8005eaa:	f7ff ff6b 	bl	8005d84 <__ssputs_r>
 8005eae:	3001      	adds	r0, #1
 8005eb0:	f000 80a7 	beq.w	8006002 <_svfiprintf_r+0x1c6>
 8005eb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005eb6:	445a      	add	r2, fp
 8005eb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005eba:	f89a 3000 	ldrb.w	r3, [sl]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 809f 	beq.w	8006002 <_svfiprintf_r+0x1c6>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ece:	f10a 0a01 	add.w	sl, sl, #1
 8005ed2:	9304      	str	r3, [sp, #16]
 8005ed4:	9307      	str	r3, [sp, #28]
 8005ed6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005eda:	931a      	str	r3, [sp, #104]	@ 0x68
 8005edc:	4654      	mov	r4, sl
 8005ede:	2205      	movs	r2, #5
 8005ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ee4:	484e      	ldr	r0, [pc, #312]	@ (8006020 <_svfiprintf_r+0x1e4>)
 8005ee6:	f7fa f983 	bl	80001f0 <memchr>
 8005eea:	9a04      	ldr	r2, [sp, #16]
 8005eec:	b9d8      	cbnz	r0, 8005f26 <_svfiprintf_r+0xea>
 8005eee:	06d0      	lsls	r0, r2, #27
 8005ef0:	bf44      	itt	mi
 8005ef2:	2320      	movmi	r3, #32
 8005ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ef8:	0711      	lsls	r1, r2, #28
 8005efa:	bf44      	itt	mi
 8005efc:	232b      	movmi	r3, #43	@ 0x2b
 8005efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f02:	f89a 3000 	ldrb.w	r3, [sl]
 8005f06:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f08:	d015      	beq.n	8005f36 <_svfiprintf_r+0xfa>
 8005f0a:	9a07      	ldr	r2, [sp, #28]
 8005f0c:	4654      	mov	r4, sl
 8005f0e:	2000      	movs	r0, #0
 8005f10:	f04f 0c0a 	mov.w	ip, #10
 8005f14:	4621      	mov	r1, r4
 8005f16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f1a:	3b30      	subs	r3, #48	@ 0x30
 8005f1c:	2b09      	cmp	r3, #9
 8005f1e:	d94b      	bls.n	8005fb8 <_svfiprintf_r+0x17c>
 8005f20:	b1b0      	cbz	r0, 8005f50 <_svfiprintf_r+0x114>
 8005f22:	9207      	str	r2, [sp, #28]
 8005f24:	e014      	b.n	8005f50 <_svfiprintf_r+0x114>
 8005f26:	eba0 0308 	sub.w	r3, r0, r8
 8005f2a:	fa09 f303 	lsl.w	r3, r9, r3
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	9304      	str	r3, [sp, #16]
 8005f32:	46a2      	mov	sl, r4
 8005f34:	e7d2      	b.n	8005edc <_svfiprintf_r+0xa0>
 8005f36:	9b03      	ldr	r3, [sp, #12]
 8005f38:	1d19      	adds	r1, r3, #4
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	9103      	str	r1, [sp, #12]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	bfbb      	ittet	lt
 8005f42:	425b      	neglt	r3, r3
 8005f44:	f042 0202 	orrlt.w	r2, r2, #2
 8005f48:	9307      	strge	r3, [sp, #28]
 8005f4a:	9307      	strlt	r3, [sp, #28]
 8005f4c:	bfb8      	it	lt
 8005f4e:	9204      	strlt	r2, [sp, #16]
 8005f50:	7823      	ldrb	r3, [r4, #0]
 8005f52:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f54:	d10a      	bne.n	8005f6c <_svfiprintf_r+0x130>
 8005f56:	7863      	ldrb	r3, [r4, #1]
 8005f58:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f5a:	d132      	bne.n	8005fc2 <_svfiprintf_r+0x186>
 8005f5c:	9b03      	ldr	r3, [sp, #12]
 8005f5e:	1d1a      	adds	r2, r3, #4
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	9203      	str	r2, [sp, #12]
 8005f64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f68:	3402      	adds	r4, #2
 8005f6a:	9305      	str	r3, [sp, #20]
 8005f6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006030 <_svfiprintf_r+0x1f4>
 8005f70:	7821      	ldrb	r1, [r4, #0]
 8005f72:	2203      	movs	r2, #3
 8005f74:	4650      	mov	r0, sl
 8005f76:	f7fa f93b 	bl	80001f0 <memchr>
 8005f7a:	b138      	cbz	r0, 8005f8c <_svfiprintf_r+0x150>
 8005f7c:	9b04      	ldr	r3, [sp, #16]
 8005f7e:	eba0 000a 	sub.w	r0, r0, sl
 8005f82:	2240      	movs	r2, #64	@ 0x40
 8005f84:	4082      	lsls	r2, r0
 8005f86:	4313      	orrs	r3, r2
 8005f88:	3401      	adds	r4, #1
 8005f8a:	9304      	str	r3, [sp, #16]
 8005f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f90:	4824      	ldr	r0, [pc, #144]	@ (8006024 <_svfiprintf_r+0x1e8>)
 8005f92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f96:	2206      	movs	r2, #6
 8005f98:	f7fa f92a 	bl	80001f0 <memchr>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d036      	beq.n	800600e <_svfiprintf_r+0x1d2>
 8005fa0:	4b21      	ldr	r3, [pc, #132]	@ (8006028 <_svfiprintf_r+0x1ec>)
 8005fa2:	bb1b      	cbnz	r3, 8005fec <_svfiprintf_r+0x1b0>
 8005fa4:	9b03      	ldr	r3, [sp, #12]
 8005fa6:	3307      	adds	r3, #7
 8005fa8:	f023 0307 	bic.w	r3, r3, #7
 8005fac:	3308      	adds	r3, #8
 8005fae:	9303      	str	r3, [sp, #12]
 8005fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fb2:	4433      	add	r3, r6
 8005fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fb6:	e76a      	b.n	8005e8e <_svfiprintf_r+0x52>
 8005fb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fbc:	460c      	mov	r4, r1
 8005fbe:	2001      	movs	r0, #1
 8005fc0:	e7a8      	b.n	8005f14 <_svfiprintf_r+0xd8>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	3401      	adds	r4, #1
 8005fc6:	9305      	str	r3, [sp, #20]
 8005fc8:	4619      	mov	r1, r3
 8005fca:	f04f 0c0a 	mov.w	ip, #10
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fd4:	3a30      	subs	r2, #48	@ 0x30
 8005fd6:	2a09      	cmp	r2, #9
 8005fd8:	d903      	bls.n	8005fe2 <_svfiprintf_r+0x1a6>
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0c6      	beq.n	8005f6c <_svfiprintf_r+0x130>
 8005fde:	9105      	str	r1, [sp, #20]
 8005fe0:	e7c4      	b.n	8005f6c <_svfiprintf_r+0x130>
 8005fe2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e7f0      	b.n	8005fce <_svfiprintf_r+0x192>
 8005fec:	ab03      	add	r3, sp, #12
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	462a      	mov	r2, r5
 8005ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800602c <_svfiprintf_r+0x1f0>)
 8005ff4:	a904      	add	r1, sp, #16
 8005ff6:	4638      	mov	r0, r7
 8005ff8:	f3af 8000 	nop.w
 8005ffc:	1c42      	adds	r2, r0, #1
 8005ffe:	4606      	mov	r6, r0
 8006000:	d1d6      	bne.n	8005fb0 <_svfiprintf_r+0x174>
 8006002:	89ab      	ldrh	r3, [r5, #12]
 8006004:	065b      	lsls	r3, r3, #25
 8006006:	f53f af2d 	bmi.w	8005e64 <_svfiprintf_r+0x28>
 800600a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800600c:	e72c      	b.n	8005e68 <_svfiprintf_r+0x2c>
 800600e:	ab03      	add	r3, sp, #12
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	462a      	mov	r2, r5
 8006014:	4b05      	ldr	r3, [pc, #20]	@ (800602c <_svfiprintf_r+0x1f0>)
 8006016:	a904      	add	r1, sp, #16
 8006018:	4638      	mov	r0, r7
 800601a:	f000 f879 	bl	8006110 <_printf_i>
 800601e:	e7ed      	b.n	8005ffc <_svfiprintf_r+0x1c0>
 8006020:	080064d0 	.word	0x080064d0
 8006024:	080064da 	.word	0x080064da
 8006028:	00000000 	.word	0x00000000
 800602c:	08005d85 	.word	0x08005d85
 8006030:	080064d6 	.word	0x080064d6

08006034 <_printf_common>:
 8006034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006038:	4616      	mov	r6, r2
 800603a:	4698      	mov	r8, r3
 800603c:	688a      	ldr	r2, [r1, #8]
 800603e:	690b      	ldr	r3, [r1, #16]
 8006040:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006044:	4293      	cmp	r3, r2
 8006046:	bfb8      	it	lt
 8006048:	4613      	movlt	r3, r2
 800604a:	6033      	str	r3, [r6, #0]
 800604c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006050:	4607      	mov	r7, r0
 8006052:	460c      	mov	r4, r1
 8006054:	b10a      	cbz	r2, 800605a <_printf_common+0x26>
 8006056:	3301      	adds	r3, #1
 8006058:	6033      	str	r3, [r6, #0]
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	0699      	lsls	r1, r3, #26
 800605e:	bf42      	ittt	mi
 8006060:	6833      	ldrmi	r3, [r6, #0]
 8006062:	3302      	addmi	r3, #2
 8006064:	6033      	strmi	r3, [r6, #0]
 8006066:	6825      	ldr	r5, [r4, #0]
 8006068:	f015 0506 	ands.w	r5, r5, #6
 800606c:	d106      	bne.n	800607c <_printf_common+0x48>
 800606e:	f104 0a19 	add.w	sl, r4, #25
 8006072:	68e3      	ldr	r3, [r4, #12]
 8006074:	6832      	ldr	r2, [r6, #0]
 8006076:	1a9b      	subs	r3, r3, r2
 8006078:	42ab      	cmp	r3, r5
 800607a:	dc26      	bgt.n	80060ca <_printf_common+0x96>
 800607c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006080:	6822      	ldr	r2, [r4, #0]
 8006082:	3b00      	subs	r3, #0
 8006084:	bf18      	it	ne
 8006086:	2301      	movne	r3, #1
 8006088:	0692      	lsls	r2, r2, #26
 800608a:	d42b      	bmi.n	80060e4 <_printf_common+0xb0>
 800608c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006090:	4641      	mov	r1, r8
 8006092:	4638      	mov	r0, r7
 8006094:	47c8      	blx	r9
 8006096:	3001      	adds	r0, #1
 8006098:	d01e      	beq.n	80060d8 <_printf_common+0xa4>
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	6922      	ldr	r2, [r4, #16]
 800609e:	f003 0306 	and.w	r3, r3, #6
 80060a2:	2b04      	cmp	r3, #4
 80060a4:	bf02      	ittt	eq
 80060a6:	68e5      	ldreq	r5, [r4, #12]
 80060a8:	6833      	ldreq	r3, [r6, #0]
 80060aa:	1aed      	subeq	r5, r5, r3
 80060ac:	68a3      	ldr	r3, [r4, #8]
 80060ae:	bf0c      	ite	eq
 80060b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060b4:	2500      	movne	r5, #0
 80060b6:	4293      	cmp	r3, r2
 80060b8:	bfc4      	itt	gt
 80060ba:	1a9b      	subgt	r3, r3, r2
 80060bc:	18ed      	addgt	r5, r5, r3
 80060be:	2600      	movs	r6, #0
 80060c0:	341a      	adds	r4, #26
 80060c2:	42b5      	cmp	r5, r6
 80060c4:	d11a      	bne.n	80060fc <_printf_common+0xc8>
 80060c6:	2000      	movs	r0, #0
 80060c8:	e008      	b.n	80060dc <_printf_common+0xa8>
 80060ca:	2301      	movs	r3, #1
 80060cc:	4652      	mov	r2, sl
 80060ce:	4641      	mov	r1, r8
 80060d0:	4638      	mov	r0, r7
 80060d2:	47c8      	blx	r9
 80060d4:	3001      	adds	r0, #1
 80060d6:	d103      	bne.n	80060e0 <_printf_common+0xac>
 80060d8:	f04f 30ff 	mov.w	r0, #4294967295
 80060dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e0:	3501      	adds	r5, #1
 80060e2:	e7c6      	b.n	8006072 <_printf_common+0x3e>
 80060e4:	18e1      	adds	r1, r4, r3
 80060e6:	1c5a      	adds	r2, r3, #1
 80060e8:	2030      	movs	r0, #48	@ 0x30
 80060ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060ee:	4422      	add	r2, r4
 80060f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060f8:	3302      	adds	r3, #2
 80060fa:	e7c7      	b.n	800608c <_printf_common+0x58>
 80060fc:	2301      	movs	r3, #1
 80060fe:	4622      	mov	r2, r4
 8006100:	4641      	mov	r1, r8
 8006102:	4638      	mov	r0, r7
 8006104:	47c8      	blx	r9
 8006106:	3001      	adds	r0, #1
 8006108:	d0e6      	beq.n	80060d8 <_printf_common+0xa4>
 800610a:	3601      	adds	r6, #1
 800610c:	e7d9      	b.n	80060c2 <_printf_common+0x8e>
	...

08006110 <_printf_i>:
 8006110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006114:	7e0f      	ldrb	r7, [r1, #24]
 8006116:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006118:	2f78      	cmp	r7, #120	@ 0x78
 800611a:	4691      	mov	r9, r2
 800611c:	4680      	mov	r8, r0
 800611e:	460c      	mov	r4, r1
 8006120:	469a      	mov	sl, r3
 8006122:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006126:	d807      	bhi.n	8006138 <_printf_i+0x28>
 8006128:	2f62      	cmp	r7, #98	@ 0x62
 800612a:	d80a      	bhi.n	8006142 <_printf_i+0x32>
 800612c:	2f00      	cmp	r7, #0
 800612e:	f000 80d2 	beq.w	80062d6 <_printf_i+0x1c6>
 8006132:	2f58      	cmp	r7, #88	@ 0x58
 8006134:	f000 80b9 	beq.w	80062aa <_printf_i+0x19a>
 8006138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800613c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006140:	e03a      	b.n	80061b8 <_printf_i+0xa8>
 8006142:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006146:	2b15      	cmp	r3, #21
 8006148:	d8f6      	bhi.n	8006138 <_printf_i+0x28>
 800614a:	a101      	add	r1, pc, #4	@ (adr r1, 8006150 <_printf_i+0x40>)
 800614c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006150:	080061a9 	.word	0x080061a9
 8006154:	080061bd 	.word	0x080061bd
 8006158:	08006139 	.word	0x08006139
 800615c:	08006139 	.word	0x08006139
 8006160:	08006139 	.word	0x08006139
 8006164:	08006139 	.word	0x08006139
 8006168:	080061bd 	.word	0x080061bd
 800616c:	08006139 	.word	0x08006139
 8006170:	08006139 	.word	0x08006139
 8006174:	08006139 	.word	0x08006139
 8006178:	08006139 	.word	0x08006139
 800617c:	080062bd 	.word	0x080062bd
 8006180:	080061e7 	.word	0x080061e7
 8006184:	08006277 	.word	0x08006277
 8006188:	08006139 	.word	0x08006139
 800618c:	08006139 	.word	0x08006139
 8006190:	080062df 	.word	0x080062df
 8006194:	08006139 	.word	0x08006139
 8006198:	080061e7 	.word	0x080061e7
 800619c:	08006139 	.word	0x08006139
 80061a0:	08006139 	.word	0x08006139
 80061a4:	0800627f 	.word	0x0800627f
 80061a8:	6833      	ldr	r3, [r6, #0]
 80061aa:	1d1a      	adds	r2, r3, #4
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6032      	str	r2, [r6, #0]
 80061b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80061b8:	2301      	movs	r3, #1
 80061ba:	e09d      	b.n	80062f8 <_printf_i+0x1e8>
 80061bc:	6833      	ldr	r3, [r6, #0]
 80061be:	6820      	ldr	r0, [r4, #0]
 80061c0:	1d19      	adds	r1, r3, #4
 80061c2:	6031      	str	r1, [r6, #0]
 80061c4:	0606      	lsls	r6, r0, #24
 80061c6:	d501      	bpl.n	80061cc <_printf_i+0xbc>
 80061c8:	681d      	ldr	r5, [r3, #0]
 80061ca:	e003      	b.n	80061d4 <_printf_i+0xc4>
 80061cc:	0645      	lsls	r5, r0, #25
 80061ce:	d5fb      	bpl.n	80061c8 <_printf_i+0xb8>
 80061d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80061d4:	2d00      	cmp	r5, #0
 80061d6:	da03      	bge.n	80061e0 <_printf_i+0xd0>
 80061d8:	232d      	movs	r3, #45	@ 0x2d
 80061da:	426d      	negs	r5, r5
 80061dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061e0:	4859      	ldr	r0, [pc, #356]	@ (8006348 <_printf_i+0x238>)
 80061e2:	230a      	movs	r3, #10
 80061e4:	e011      	b.n	800620a <_printf_i+0xfa>
 80061e6:	6821      	ldr	r1, [r4, #0]
 80061e8:	6833      	ldr	r3, [r6, #0]
 80061ea:	0608      	lsls	r0, r1, #24
 80061ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80061f0:	d402      	bmi.n	80061f8 <_printf_i+0xe8>
 80061f2:	0649      	lsls	r1, r1, #25
 80061f4:	bf48      	it	mi
 80061f6:	b2ad      	uxthmi	r5, r5
 80061f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80061fa:	4853      	ldr	r0, [pc, #332]	@ (8006348 <_printf_i+0x238>)
 80061fc:	6033      	str	r3, [r6, #0]
 80061fe:	bf14      	ite	ne
 8006200:	230a      	movne	r3, #10
 8006202:	2308      	moveq	r3, #8
 8006204:	2100      	movs	r1, #0
 8006206:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800620a:	6866      	ldr	r6, [r4, #4]
 800620c:	60a6      	str	r6, [r4, #8]
 800620e:	2e00      	cmp	r6, #0
 8006210:	bfa2      	ittt	ge
 8006212:	6821      	ldrge	r1, [r4, #0]
 8006214:	f021 0104 	bicge.w	r1, r1, #4
 8006218:	6021      	strge	r1, [r4, #0]
 800621a:	b90d      	cbnz	r5, 8006220 <_printf_i+0x110>
 800621c:	2e00      	cmp	r6, #0
 800621e:	d04b      	beq.n	80062b8 <_printf_i+0x1a8>
 8006220:	4616      	mov	r6, r2
 8006222:	fbb5 f1f3 	udiv	r1, r5, r3
 8006226:	fb03 5711 	mls	r7, r3, r1, r5
 800622a:	5dc7      	ldrb	r7, [r0, r7]
 800622c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006230:	462f      	mov	r7, r5
 8006232:	42bb      	cmp	r3, r7
 8006234:	460d      	mov	r5, r1
 8006236:	d9f4      	bls.n	8006222 <_printf_i+0x112>
 8006238:	2b08      	cmp	r3, #8
 800623a:	d10b      	bne.n	8006254 <_printf_i+0x144>
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	07df      	lsls	r7, r3, #31
 8006240:	d508      	bpl.n	8006254 <_printf_i+0x144>
 8006242:	6923      	ldr	r3, [r4, #16]
 8006244:	6861      	ldr	r1, [r4, #4]
 8006246:	4299      	cmp	r1, r3
 8006248:	bfde      	ittt	le
 800624a:	2330      	movle	r3, #48	@ 0x30
 800624c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006250:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006254:	1b92      	subs	r2, r2, r6
 8006256:	6122      	str	r2, [r4, #16]
 8006258:	f8cd a000 	str.w	sl, [sp]
 800625c:	464b      	mov	r3, r9
 800625e:	aa03      	add	r2, sp, #12
 8006260:	4621      	mov	r1, r4
 8006262:	4640      	mov	r0, r8
 8006264:	f7ff fee6 	bl	8006034 <_printf_common>
 8006268:	3001      	adds	r0, #1
 800626a:	d14a      	bne.n	8006302 <_printf_i+0x1f2>
 800626c:	f04f 30ff 	mov.w	r0, #4294967295
 8006270:	b004      	add	sp, #16
 8006272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	f043 0320 	orr.w	r3, r3, #32
 800627c:	6023      	str	r3, [r4, #0]
 800627e:	4833      	ldr	r0, [pc, #204]	@ (800634c <_printf_i+0x23c>)
 8006280:	2778      	movs	r7, #120	@ 0x78
 8006282:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	6831      	ldr	r1, [r6, #0]
 800628a:	061f      	lsls	r7, r3, #24
 800628c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006290:	d402      	bmi.n	8006298 <_printf_i+0x188>
 8006292:	065f      	lsls	r7, r3, #25
 8006294:	bf48      	it	mi
 8006296:	b2ad      	uxthmi	r5, r5
 8006298:	6031      	str	r1, [r6, #0]
 800629a:	07d9      	lsls	r1, r3, #31
 800629c:	bf44      	itt	mi
 800629e:	f043 0320 	orrmi.w	r3, r3, #32
 80062a2:	6023      	strmi	r3, [r4, #0]
 80062a4:	b11d      	cbz	r5, 80062ae <_printf_i+0x19e>
 80062a6:	2310      	movs	r3, #16
 80062a8:	e7ac      	b.n	8006204 <_printf_i+0xf4>
 80062aa:	4827      	ldr	r0, [pc, #156]	@ (8006348 <_printf_i+0x238>)
 80062ac:	e7e9      	b.n	8006282 <_printf_i+0x172>
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	f023 0320 	bic.w	r3, r3, #32
 80062b4:	6023      	str	r3, [r4, #0]
 80062b6:	e7f6      	b.n	80062a6 <_printf_i+0x196>
 80062b8:	4616      	mov	r6, r2
 80062ba:	e7bd      	b.n	8006238 <_printf_i+0x128>
 80062bc:	6833      	ldr	r3, [r6, #0]
 80062be:	6825      	ldr	r5, [r4, #0]
 80062c0:	6961      	ldr	r1, [r4, #20]
 80062c2:	1d18      	adds	r0, r3, #4
 80062c4:	6030      	str	r0, [r6, #0]
 80062c6:	062e      	lsls	r6, r5, #24
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	d501      	bpl.n	80062d0 <_printf_i+0x1c0>
 80062cc:	6019      	str	r1, [r3, #0]
 80062ce:	e002      	b.n	80062d6 <_printf_i+0x1c6>
 80062d0:	0668      	lsls	r0, r5, #25
 80062d2:	d5fb      	bpl.n	80062cc <_printf_i+0x1bc>
 80062d4:	8019      	strh	r1, [r3, #0]
 80062d6:	2300      	movs	r3, #0
 80062d8:	6123      	str	r3, [r4, #16]
 80062da:	4616      	mov	r6, r2
 80062dc:	e7bc      	b.n	8006258 <_printf_i+0x148>
 80062de:	6833      	ldr	r3, [r6, #0]
 80062e0:	1d1a      	adds	r2, r3, #4
 80062e2:	6032      	str	r2, [r6, #0]
 80062e4:	681e      	ldr	r6, [r3, #0]
 80062e6:	6862      	ldr	r2, [r4, #4]
 80062e8:	2100      	movs	r1, #0
 80062ea:	4630      	mov	r0, r6
 80062ec:	f7f9 ff80 	bl	80001f0 <memchr>
 80062f0:	b108      	cbz	r0, 80062f6 <_printf_i+0x1e6>
 80062f2:	1b80      	subs	r0, r0, r6
 80062f4:	6060      	str	r0, [r4, #4]
 80062f6:	6863      	ldr	r3, [r4, #4]
 80062f8:	6123      	str	r3, [r4, #16]
 80062fa:	2300      	movs	r3, #0
 80062fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006300:	e7aa      	b.n	8006258 <_printf_i+0x148>
 8006302:	6923      	ldr	r3, [r4, #16]
 8006304:	4632      	mov	r2, r6
 8006306:	4649      	mov	r1, r9
 8006308:	4640      	mov	r0, r8
 800630a:	47d0      	blx	sl
 800630c:	3001      	adds	r0, #1
 800630e:	d0ad      	beq.n	800626c <_printf_i+0x15c>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	079b      	lsls	r3, r3, #30
 8006314:	d413      	bmi.n	800633e <_printf_i+0x22e>
 8006316:	68e0      	ldr	r0, [r4, #12]
 8006318:	9b03      	ldr	r3, [sp, #12]
 800631a:	4298      	cmp	r0, r3
 800631c:	bfb8      	it	lt
 800631e:	4618      	movlt	r0, r3
 8006320:	e7a6      	b.n	8006270 <_printf_i+0x160>
 8006322:	2301      	movs	r3, #1
 8006324:	4632      	mov	r2, r6
 8006326:	4649      	mov	r1, r9
 8006328:	4640      	mov	r0, r8
 800632a:	47d0      	blx	sl
 800632c:	3001      	adds	r0, #1
 800632e:	d09d      	beq.n	800626c <_printf_i+0x15c>
 8006330:	3501      	adds	r5, #1
 8006332:	68e3      	ldr	r3, [r4, #12]
 8006334:	9903      	ldr	r1, [sp, #12]
 8006336:	1a5b      	subs	r3, r3, r1
 8006338:	42ab      	cmp	r3, r5
 800633a:	dcf2      	bgt.n	8006322 <_printf_i+0x212>
 800633c:	e7eb      	b.n	8006316 <_printf_i+0x206>
 800633e:	2500      	movs	r5, #0
 8006340:	f104 0619 	add.w	r6, r4, #25
 8006344:	e7f5      	b.n	8006332 <_printf_i+0x222>
 8006346:	bf00      	nop
 8006348:	080064e1 	.word	0x080064e1
 800634c:	080064f2 	.word	0x080064f2

08006350 <memmove>:
 8006350:	4288      	cmp	r0, r1
 8006352:	b510      	push	{r4, lr}
 8006354:	eb01 0402 	add.w	r4, r1, r2
 8006358:	d902      	bls.n	8006360 <memmove+0x10>
 800635a:	4284      	cmp	r4, r0
 800635c:	4623      	mov	r3, r4
 800635e:	d807      	bhi.n	8006370 <memmove+0x20>
 8006360:	1e43      	subs	r3, r0, #1
 8006362:	42a1      	cmp	r1, r4
 8006364:	d008      	beq.n	8006378 <memmove+0x28>
 8006366:	f811 2b01 	ldrb.w	r2, [r1], #1
 800636a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800636e:	e7f8      	b.n	8006362 <memmove+0x12>
 8006370:	4402      	add	r2, r0
 8006372:	4601      	mov	r1, r0
 8006374:	428a      	cmp	r2, r1
 8006376:	d100      	bne.n	800637a <memmove+0x2a>
 8006378:	bd10      	pop	{r4, pc}
 800637a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800637e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006382:	e7f7      	b.n	8006374 <memmove+0x24>

08006384 <_sbrk_r>:
 8006384:	b538      	push	{r3, r4, r5, lr}
 8006386:	4d06      	ldr	r5, [pc, #24]	@ (80063a0 <_sbrk_r+0x1c>)
 8006388:	2300      	movs	r3, #0
 800638a:	4604      	mov	r4, r0
 800638c:	4608      	mov	r0, r1
 800638e:	602b      	str	r3, [r5, #0]
 8006390:	f7fb fe42 	bl	8002018 <_sbrk>
 8006394:	1c43      	adds	r3, r0, #1
 8006396:	d102      	bne.n	800639e <_sbrk_r+0x1a>
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	b103      	cbz	r3, 800639e <_sbrk_r+0x1a>
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	bd38      	pop	{r3, r4, r5, pc}
 80063a0:	20000338 	.word	0x20000338

080063a4 <memcpy>:
 80063a4:	440a      	add	r2, r1
 80063a6:	4291      	cmp	r1, r2
 80063a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063ac:	d100      	bne.n	80063b0 <memcpy+0xc>
 80063ae:	4770      	bx	lr
 80063b0:	b510      	push	{r4, lr}
 80063b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ba:	4291      	cmp	r1, r2
 80063bc:	d1f9      	bne.n	80063b2 <memcpy+0xe>
 80063be:	bd10      	pop	{r4, pc}

080063c0 <_realloc_r>:
 80063c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c4:	4680      	mov	r8, r0
 80063c6:	4615      	mov	r5, r2
 80063c8:	460c      	mov	r4, r1
 80063ca:	b921      	cbnz	r1, 80063d6 <_realloc_r+0x16>
 80063cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063d0:	4611      	mov	r1, r2
 80063d2:	f7ff bc4b 	b.w	8005c6c <_malloc_r>
 80063d6:	b92a      	cbnz	r2, 80063e4 <_realloc_r+0x24>
 80063d8:	f7ff fbdc 	bl	8005b94 <_free_r>
 80063dc:	2400      	movs	r4, #0
 80063de:	4620      	mov	r0, r4
 80063e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063e4:	f000 f81a 	bl	800641c <_malloc_usable_size_r>
 80063e8:	4285      	cmp	r5, r0
 80063ea:	4606      	mov	r6, r0
 80063ec:	d802      	bhi.n	80063f4 <_realloc_r+0x34>
 80063ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80063f2:	d8f4      	bhi.n	80063de <_realloc_r+0x1e>
 80063f4:	4629      	mov	r1, r5
 80063f6:	4640      	mov	r0, r8
 80063f8:	f7ff fc38 	bl	8005c6c <_malloc_r>
 80063fc:	4607      	mov	r7, r0
 80063fe:	2800      	cmp	r0, #0
 8006400:	d0ec      	beq.n	80063dc <_realloc_r+0x1c>
 8006402:	42b5      	cmp	r5, r6
 8006404:	462a      	mov	r2, r5
 8006406:	4621      	mov	r1, r4
 8006408:	bf28      	it	cs
 800640a:	4632      	movcs	r2, r6
 800640c:	f7ff ffca 	bl	80063a4 <memcpy>
 8006410:	4621      	mov	r1, r4
 8006412:	4640      	mov	r0, r8
 8006414:	f7ff fbbe 	bl	8005b94 <_free_r>
 8006418:	463c      	mov	r4, r7
 800641a:	e7e0      	b.n	80063de <_realloc_r+0x1e>

0800641c <_malloc_usable_size_r>:
 800641c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006420:	1f18      	subs	r0, r3, #4
 8006422:	2b00      	cmp	r3, #0
 8006424:	bfbc      	itt	lt
 8006426:	580b      	ldrlt	r3, [r1, r0]
 8006428:	18c0      	addlt	r0, r0, r3
 800642a:	4770      	bx	lr

0800642c <_init>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	bf00      	nop
 8006430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006432:	bc08      	pop	{r3}
 8006434:	469e      	mov	lr, r3
 8006436:	4770      	bx	lr

08006438 <_fini>:
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	bf00      	nop
 800643c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643e:	bc08      	pop	{r3}
 8006440:	469e      	mov	lr, r3
 8006442:	4770      	bx	lr
